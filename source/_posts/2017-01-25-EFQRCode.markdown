---
layout: post
title: iOS 原生二维码生成及 UIImage 中的二维码识别
date: 2017-01-25 10:00:00 -05:00
categories: iOS
tag: QRCode
---

iOS 原生的二维码识别非常之棒，反正比 ZXing 和 ZBar 效果都好些，所以以后打算尽量用原生的二维码识别，然后最近把原生的二维码生成也顺便做了一遍，封了一个小库方便以后使用。

项目地址：[https://github.com/EyreFree/EFQRCode](https://github.com/EyreFree/EFQRCode)

---

# 一. 注意事项

最低需要 XCode 8.0 以及 Swift 3.0。

# 二. 示例

1. 利用 `git clone` 命令下载仓库；
2. 利用 cd 命令切换到 Example 目录下，执行 `pod install` 命令；
3. 随后打开 `EFQRCode.xcworkspace` 编译即可。

或执行以下命令：

```bash
git clone git@github.com:EyreFree/EFQRCode.git; cd EFQRCode/Example; pod install; open EFQRCode.xcworkspace
```

# 三. 调用

首先，需要在 Podfile 中引入：


```
pod "EFQRCode", '~> 1.1.0'
```

什么，你不知道 Pod？可以参考这里的 [CocoaPods安装和使用教程](http://code4app.com/article/cocoapods-install-usage)。

执行 pod install 之后，在需要使用的地方导入模块

```swift
import EFQRCode
```

# 四. 二维码识别

获取图片中所包含的二维码，同一张图片中可能包含多个二维码，所以返回值是一个字符串数组：

```swift
if let testImage = UIImage(named: "test.png") {
	let codes = EFQRCode.GetQRCodeString(From: testImage)
	if codes.count > 0 {
		print("There are \(codes.count) codes in testImage.")
		for (index, code) in codes.enumerated() {
			print("The content of \(index) QR Code is: \(code).")
		}
	} else {
		print("There is no QR Codes in testImage.")
	}
}
```

# 五. 二维码生成

```swift
if let tryImage = EFQRCode.createQRImage(
    string: "https://github.com/EyreFree/EFQRCode",
    inputCorrectionLevel: .h,
    size: 750,
    quality: .low,
    backColor: .white,
    frontColor: .black,
    icon: nil,
    iconSize: nil,
    iconColorful: true,
    watermark: UIImage(named: "eyrefree"),
    watermarkMode: .scaleAspectFill,
    watermarkColorful: false
    ) {
    print("Create QRCode image success!")
} else {
    print("Create QRCode image failed!")
}
```

这里的参数意义如下：

```swift
//                          string: 二维码内容
// inputCorrectionLevel (Optional): 容错率
//                                  L 7%
//                                  M 15%
//                                  Q 25%
//                                  H 30%
//                 size (Optional): 边长
//              quality (Optional): 质量
//            backColor (Optional): 背景色
//           frontColor (Optional): 前景色
//                 icon (Optional): 中心图标
//             iconSize (Optional): 中心图标边长
//         iconColorful (Optional): 中心图标是否为彩色
//            watermark (Optional): 水印图
//        watermarkMode (Optional): 水印图模式
//    watermarkColorful (Optional): 水印图是否为彩色
```

# 六. 预览

![预览](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/screenshot.png)

# 七. 输出示例

![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode1.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode2.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode4.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode6.jpg)  
:---------------------:|:---------------------:|:---------------------:|:---------------------:
![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode7.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode8.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode9.jpg)|![](https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode10.jpg) 

# 八. 备注

1. 请选用对比度较高的前景色和背景色组合；
2. 想要提高生成二维码的清晰度可以选择提高质量和二维码边长；
3. 质量过高／边长过大／二维码内容过多可能会导致生成失败；
4. 建议对生成的二维码进行测试后投入使用；
5. 若有任何问题，期待得到您的反馈，Issue 和 Pull request 都是受欢迎的。

备注的备注：好用的话可以给个[星星](https://github.com/EyreFree/EFQRCode)，蟹蟹，QAQ...

---
本文链接：[http://www.eyrefree.org/2017/01/25/2017-01-25-EFQRCode/](http://www.eyrefree.org/2017/01/25/2017-01-25-EFQRCode/)

如文中无特殊说明，本站均使用以下协议保护：[署名-非商业性使用-禁止演绎](http://creativecommons.org/licenses/by-nc-nd/3.0/cn/)
