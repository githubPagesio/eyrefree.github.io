[{"title":"蜂鸟商家版 iOS 组件化 / 模块化实践总结","url":"http://www.eyrefree.org/2018/01/20/LPDBusinessiOS/","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4af3f3d9?w=750&amp;h=400&amp;f=png&amp;s=302366\" alt=\"\"></p>\n<h2 id=\"零-前言\"><a href=\"#零-前言\" class=\"headerlink\" title=\"零. 前言\"></a>零. 前言</h2><blockquote>\n<p>“蜂鸟配送商家版”是一款针对商家打造的专业配送软件，有了这款应用，您可以使用蜂鸟商家版呼叫所有平台订单及电话订单配送，餐饮、鲜花、蛋糕、生鲜、商超均可配送。超低运费，清晰合理。海量补贴，充值返现。</p>\n</blockquote>\n<p>以上这段对「蜂鸟商家版」的描述摘自 <a href=\"https://fengniao.ele.me/business.html\" target=\"_blank\" rel=\"noopener\">蜂鸟配送官网</a>，大概可以理解为蜂鸟商家版是一个给广大商家用来发单呼叫配送员的 App。许多同学可能只听说过「饿了么」外卖应用，但是对支撑起外卖配送的后勤业务「蜂鸟配送」却知之甚少，实际上每天海量的外卖订单都是由蜂鸟配送系统进行处理和配送最终送到消费者手中的。外卖 O2O 是由外卖平台、商户、配送系统这三方合作共同完成的，缺一不可。O2O 最核心的价值就是人与服务的连接，而这种连接最终都是通过配送才得以实现的。</p>\n<p>自 2016 年底开始我参与蜂鸟商家版的维护工作，除了日常的开发迭代以外，期间还参与推进了项目 Swift 化、项目组件化 / 模块化、非业务组件开源化等技术改造工作，今天这篇文章就给大家分享一下蜂鸟商家版 iOS 的组件化 / 模块化实践过程和自己的心得体会。</p>\n<h2 id=\"一-背景分析\"><a href=\"#一-背景分析\" class=\"headerlink\" title=\"一. 背景分析\"></a>一. 背景分析</h2><p>蜂鸟商家版 iOS 端代码使用 Git 进行管理，代码托管在内网的 GitLab 上。项目的依赖管理工具是大家比较熟悉的 CocoaPods，除了 RN 模块为了和 Android 组公用采用 Submodule 进行管理外，其他所有的子模块都采用 Pods 库的方式引入。</p>\n<h3 id=\"1-存在的问题\"><a href=\"#1-存在的问题\" class=\"headerlink\" title=\"1. 存在的问题\"></a>1. 存在的问题</h3><p>在「蜂鸟商家版 iOS 组件化 / 模块化」工作开展之前，项目主要存在如下这些问题：</p>\n<ul>\n<li>项目臃肿不堪</li>\n</ul>\n<p>在组件化 / 模块化之前，蜂鸟商家版 App 的所有代码 / 资源文件等都是在同一个主工程里的，只有 RN 仓库或组内公用私有库等极少部分代码游离于主工程之外，所以在开发时，每一次都要编译整个项目的所有代码，十分低效。这个问题在独立开发时还不是十分明显，毕竟虽然项目大但是代码只有一个人在提交，所以项目代码量增加也不是那么夸张而且对项目发生的变化比较熟悉。但是当多人协作开发时，这个缺陷就暴露了出来，大家在各自开发不同的业务时，不仅要时刻和他人同步项目变化、读懂他人代码，还要每次编译完整个项目才能对自己所做的一点修改进行调试，效率低下。</p>\n<ul>\n<li>团队规模变化</li>\n</ul>\n<p>我开始参与蜂鸟商家版 iOS 端的维护时，之前只有一个前辈在维护，也就是一个人独立维护一个 App。然后过了没多久，他离职去了另一家公司，所以又变成了一个人独立维护这个 App。这时候因为是独立开发，所以也不存在什么太大的问题。但随着团队扩大，后面陆续来了几位同事共同负责这个项目的维护工作，大家都在同一个工程上进行业务开发，经常遇到如代码冲突、开发效率低下、职责划分不清、代码管理混乱等问题。</p>\n<ul>\n<li>业务发展压力</li>\n</ul>\n<p>由于公司处在高速发展的阶段，业务增长很快，最直观的表现就是市场 &amp; 客服部门不断接到大量一线使用者的使用反馈或诉求，最后就变成了产品展示给我们开发人员的一份接一份的 PRD。紧凑的业务开发需求和各种灵活的功能迫使我们想尽一切能够使用的办法来提高开发效率，提高提测质量。</p>\n<ul>\n<li>代码管理混乱</li>\n</ul>\n<p>当我开始参与这个项目的维护时，这个项目就已经是一个 Swift 和 OC 混编的项目了，然后还有 RN 和 H5 代码，可以说是十分复杂了。虽然这不是我厂唯一一个 Swift 和 OC 的混编项目，但绝对是当时 Swift 化最高的一个项目，约 25% 的代码为 Swift。众所周知，Swift 和 OC 的互相调用远不如 Java 和 Kotlin 的互相调用那么顺滑（反正你现在知道了），并且处处藏着危机，暗坑无数，所以迫切需要找一个方式，将 Swift 和 OC 代码进行整理、转换或者分隔。毕竟，这个文件是 OC 下一个文件就是 Swift 这种频繁的思维转换在业务开发这种本就十分紧张的场景下，会使人十分疲惫，不利于开发工作的顺利进行。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4ad93d93?w=800&amp;h=683&amp;f=png&amp;s=230419\" alt=\"\"></p>\n<h3 id=\"2-怎样去解决\"><a href=\"#2-怎样去解决\" class=\"headerlink\" title=\"2. 怎样去解决\"></a>2. 怎样去解决</h3><p>为了解决以上这些问题，我们曾经进行过如下一些探索：</p>\n<ol>\n<li>移除无用的第三方库和资源文件，减少打包时间：效果不明显；</li>\n<li>整理并推动内部 Gitflow 工作流，提高协作效率：有一些效果，但由于项目过大，日常协作仍然吃力；</li>\n<li>研究 Swift 编译时间优化方法，提高编译效率：发现增加编译时间的都是 Swift 的一些常用语法糖，如果不用的话，严重降低开发效率，遂放弃；</li>\n<li>在不拆分主工程的情况下，推动项目整个 Swift 化：由于之前维护项目的前辈离职，导致目前的项目开发人员都对原代码不是十分熟悉，不敢妄加改动，加之业务迭代频繁，开发和测试资源都十分紧张，该工作工作推进十分缓慢。</li>\n</ol>\n<p>可以发现上述尝试的结果都不是十分理想，在与 iOS 组内大佬们进行一些沟通，听取大佬们的意见后，决定对原项目进行「组件化 / 模块化拆分」工作，它能带来如下这些好处：</p>\n<ul>\n<li>加快编译速度，不用再编译组件 / 模块外没有被依赖到的代码；</li>\n<li>便于将每个模块指定给不同负责人进行管理；</li>\n<li>降低合并难度，减小冲突和出错概率，提高业务开发效率；</li>\n<li>将 Swift 和 OC 代码进行分离，便于进一步 Swift 化工作的推进；</li>\n<li>可为模块编写单元测试，提高工作效率，同时方便测试人员进行有针对性的测试。</li>\n</ul>\n<h2 id=\"二-目标设定\"><a href=\"#二-目标设定\" class=\"headerlink\" title=\"二. 目标设定\"></a>二. 目标设定</h2><ul>\n<li>功能组件独立：保证所有的底层功能组件从主工程抽出，独立与主工程之外，便于复用、业务模块的调用；</li>\n<li>业务模块划分与拆解：将业务按对应用途进行划分和拆解，想办法切断各业务之间的强依赖；</li>\n<li>所有组件 / 模块独立编译：所有功能组件和业务模块能够独立于主工程进行编译，有各自的 Demo 工程；</li>\n<li>CocoaPods 发布：在内网 GitLab 进行发布，并且之后对每个模块用 GitFlow 工作流进行管理和后续发布工作。</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4ae5935d?w=840&amp;h=351&amp;f=png&amp;s=110856\" alt=\"\"></p>\n<h2 id=\"三-计划制定\"><a href=\"#三-计划制定\" class=\"headerlink\" title=\"三. 计划制定\"></a>三. 计划制定</h2><p>说到组件化 / 模块化，那么什么是组件化 / 模块化呢？组件化和模块化的区别又在哪里呢？</p>\n<p>组件，就是我们对功能的封装，一个功能就是一个组件，数据库、网络、文件操作、社会化分享等等这些功能都是组件。我们之所以要搞出组件的概念，是为了能够让我们的上层业务模块能够随时依赖和调用这些基础功能。组件基本上可以分为基础功能组件、通用 UI 组件、基础业务组件等这几类。所以为了满足上述要求，组件必须具有较高的独立性、扩展性以及复用性。</p>\n<p>模块，就是对一系列有内聚性的业务进行整理，将其与其它业务进行切割、拆分，从主工程或原所在位置抽离为一个相对独立的部分。仅仅针对业务而言，比如说我们可以把订单业务独立为为一个模块，可以把个人中心独立为一个模块，把用户登录独立为一个模块等，在 App 中的体现就是一个个独立的 Git 仓库。模块化的一个好处是用到时可以搭积木，比如可以多个工程间复用同一个或几个业务模块，比如腾讯的 QQ 和 TIM，除了 UI 界面外 TIM 显然复用了大量现有的原 QQ 工程的业务模块代码，当然，我们这里暂时并没有这个需求。</p>\n<p>经过小组会议讨论，我们的想法是将共用组件独立出来，然后直接按业务对现有主工程进行拆分同时兼顾 Swift 与 OC 分离，大致划分如下表所示：</p>\n<h3 id=\"1-组件\"><a href=\"#1-组件\" class=\"headerlink\" title=\"1. 组件\"></a>1. 组件</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">组件</th>\n<th style=\"text-align:left\">库名</th>\n<th style=\"text-align:left\">主要内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">基础（OC）</td>\n<td style=\"text-align:left\">LPDBOCFoundationGarbage</td>\n<td style=\"text-align:left\">基础的 OC 组件，各种零散的、混乱的视图、组件、控件、常量、OC 宏定义等，全放在这里，供上层调用。和他的库名一样，其本质就大概就是个垃圾桶。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">基础（Swift）</td>\n<td style=\"text-align:left\">LPDBPublicModule</td>\n<td style=\"text-align:left\">基础的 Swift 组件，包含一些公用的 Swift 扩展，和模块间解耦的协议。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">网络（OC）</td>\n<td style=\"text-align:left\">LPDBNetwork</td>\n<td style=\"text-align:left\">网络组件，对 AFNetworking 的浅层封装，同时包含了和网络相关的业务功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:left\">…</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-模块\"><a href=\"#2-模块\" class=\"headerlink\" title=\"2. 模块\"></a>2. 模块</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模块</th>\n<th style=\"text-align:left\">库名</th>\n<th style=\"text-align:left\">主要内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">历史（OC）</td>\n<td style=\"text-align:left\">LPDBHistoryModule</td>\n<td style=\"text-align:left\">历史订单模块，包含和历史订单相关的资源文件、UI、业务逻辑代码等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">登录（OC）</td>\n<td style=\"text-align:left\">LPDBLoginModule</td>\n<td style=\"text-align:left\">用户登录模块，包含和登录、注册页面相关的资源文件、UI、业务逻辑代码等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户中心（OC）</td>\n<td style=\"text-align:left\">LPDBUserCenterModule</td>\n<td style=\"text-align:left\">用户中心模块，包含和用户个人中心以及状态相关的资源文件、UI、业务逻辑代码等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:left\">…</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-关系\"><a href=\"#3-关系\" class=\"headerlink\" title=\"3. 关系\"></a>3. 关系</h3><p>按照上面的思路，理想化的模块 / 组件依赖关系图大概是这个样子的：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4a9c953e?w=548&amp;h=272&amp;f=png&amp;s=22346\" alt=\"\"></p>\n<p>因为蜂鸟商家版的团队开发人员之前均没有过任何项目的拆分经验，大家也都是摸着石头过河，走一步看一步。所以虽然以上的拆分思路总体是对的，先拆组件后拆业务，但由于各种各样的原因，一些问题就在接下来的工作实施过程中暴露了出来。</p>\n<h2 id=\"四-工作实施\"><a href=\"#四-工作实施\" class=\"headerlink\" title=\"四. 工作实施\"></a>四. 工作实施</h2><p>我们小组主要还是以业务开发为主，所以组件化 / 模块化工作都是大家抽空闲时间来完成，并没有进行硬性的排期和设置 Deadline。按照之前制定的计划，我们进行了以下这些工作：</p>\n<h3 id=\"1-功能组件独立\"><a href=\"#1-功能组件独立\" class=\"headerlink\" title=\"1. 功能组件独立\"></a>1. 功能组件独立</h3><h4 id=\"1-1-LPDBOCFoundationGarbage\"><a href=\"#1-1-LPDBOCFoundationGarbage\" class=\"headerlink\" title=\"1.1 LPDBOCFoundationGarbage\"></a>1.1 LPDBOCFoundationGarbage</h4><p>LPDBOCFoundationGarbage 是我们项目最先抽出的部分，这个库将和 LPDBPublicModule 一起，作为整个工程的最底层，再往下就是。这个库的定位和它的名字一样，就是一个垃圾桶，啥都往里放。其中大致包含以下一些东西：</p>\n<ul>\n<li>自定义的 View 和控件，例如：小红点控件、刷新控件、加载控件、Tips 视图等；</li>\n<li>自定义的 Controller，例如：基础控制器 BaseViewController、WebView 基础控制器 BaseWebViewController、自定义的弹框 AlertController等；</li>\n<li>和业务相关的对基本类型或系统控件的扩展：对 NSObject、UIButton、UIImageView、UILabel 等添加的扩展代码 category；</li>\n<li>甚至版本控制模块 LPDBVersionManager 也放在了这里。</li>\n</ul>\n<p>因为我们在进行拆分任务的同时，还在同时维持着项目的开发工作，所以我们暂时没有精力做细致的拆分工作，只能先把这些零散的部分先放在一起进行管理。</p>\n<h4 id=\"1-2-LPDBPublicModule\"><a href=\"#1-2-LPDBPublicModule\" class=\"headerlink\" title=\"1.2 LPDBPublicModule\"></a>1.2 LPDBPublicModule</h4><p>LPDBPublicModule 是基础的 Swift 组件，这个库主要包含：</p>\n<ul>\n<li>一些公用的 Swift 扩展，例如：对 CGFloat、Date、NSString 等系统类型的 extension；</li>\n<li>用于模块间解耦的协议。</li>\n</ul>\n<p>因为工程内的 Swift 代码大多是我们新写的，所以相对旧的 OC 代码而言，整理地更好一些，所以这个仓库干净很多</p>\n<h4 id=\"1-3-LPDBNetwork\"><a href=\"#1-3-LPDBNetwork\" class=\"headerlink\" title=\"1.3 LPDBNetwork\"></a>1.3 LPDBNetwork</h4><p>LPDBNetwork 网络组件是我们项目完成 OC 和 Swift 基础部分后最先抽出的部分，刚开始我们认为这部分仅仅是单纯的业务网络请求操作和对 AFNetworking 的浅层封装，不包含界面 UI 逻辑等。不过当我们拆解完成后，发现其中还包含了一堆奇怪的东西：</p>\n<ul>\n<li>对 AFNetworking 的封装和网络操作的一些定义，例如：LPDBHttpManager、LPDBRequestObject 和 LPDBModel 等；</li>\n<li>UI 操作，例如：等待视图 LPDBLoadingView 和 网络请求失败的提示等。</li>\n</ul>\n<p>这一部分的话，因为都是比较古老的代码，所以当初的开发人员都已经不再继续维护了，所以在只能是我们自己进行拆分的情况下，为了防止大的变更导致发生问题，所以没有对这一块进行更细致的拆解工作。毕竟再烂代码也比不能工作的代码要好。</p>\n<h4 id=\"1-4-LPDBUIKit\"><a href=\"#1-4-LPDBUIKit\" class=\"headerlink\" title=\"1.4 LPDBUIKit\"></a>1.4 LPDBUIKit</h4><p>Swift 的 UI 库，我们将工程中的一些 Swift 视图和控件收集到了这个项目中，主要包含以下这些内容：</p>\n<ul>\n<li>视图，例如：LPDBEmptyDataView、SlideScrollView 等；</li>\n<li>控件，例如：SlideTabKit 等。</li>\n</ul>\n<p>因为 Swift 代码总量还不是很大，所以这个库的东西目前也不是很多，以后会逐渐丰富起来。</p>\n<h3 id=\"2-业务模块拆分\"><a href=\"#2-业务模块拆分\" class=\"headerlink\" title=\"2. 业务模块拆分\"></a>2. 业务模块拆分</h3><p>完成了上面的组件库的独立工作后，业务模块的拆解就相对轻松一些了，目前我们主要完成了三个业务模块的拆分工作。</p>\n<h4 id=\"2-1-LPDBHistoryModule\"><a href=\"#2-1-LPDBHistoryModule\" class=\"headerlink\" title=\"2.1 LPDBHistoryModule\"></a>2.1 LPDBHistoryModule</h4><p>LPDBHistoryModule 历史订单模块，和历史订单页面相关的信息都在该模块中，主要包含以下内容：</p>\n<ul>\n<li>UI，例如：历史订单界面、历史订单列表 Cell、加载视图等；</li>\n<li>数据模型，例如：历史订单模型；</li>\n<li>历史订单列表相关的网络请求。</li>\n</ul>\n<p>因为该模块相对来说比较独立，所以拆分过程也比较顺利，主要依赖了 LPDBPublicModule、LPDBNetwork、LPDBOCFoundationGarbage 组件。</p>\n<h4 id=\"2-2-LPDBLoginModule\"><a href=\"#2-2-LPDBLoginModule\" class=\"headerlink\" title=\"2.2 LPDBLoginModule\"></a>2.2 LPDBLoginModule</h4><p>LPDBLoginModule 用户登录模块是一个与用户登录、注册以及用户登录信息有关的模块，主要包含了以下信息：</p>\n<ul>\n<li>UI，例如：用户登录界面、用户注册界面等；</li>\n<li>数据模型，例如：用户信息模型、用户信息地址模型等；</li>\n<li>登录与注册相关的网络请求。</li>\n</ul>\n<p>该模块相比较历史订单模块复杂了一些，不过仍然比较顺利，主要依赖了 LPDBPublicModule、LPDBOCFoundationGarbage、LPDBNetwork 组件。</p>\n<h4 id=\"2-3-LPDBUserCenterModule\"><a href=\"#2-3-LPDBUserCenterModule\" class=\"headerlink\" title=\"2.3 LPDBUserCenterModule\"></a>2.3 LPDBUserCenterModule</h4><p>LPDBUserCenterModule 用户中心模块是一个与用户个人中心以及用户信息修改有关的模块，主要包含了以下信息：</p>\n<ul>\n<li>UI，例如：用户中心界面、用户电话修改界面、用户密码修改界面等；</li>\n<li>数据模型，例如：用户详细信息模型、用户信息地址模型等；</li>\n<li>用户中心相关的网络请求，例如：修改电话号码、请求验证码等。</li>\n</ul>\n<p>该模块主要依赖了 LPDBOCFoundationGarbage 组件和 LPDBLoginModule 模块。</p>\n<h4 id=\"2-4-其它\"><a href=\"#2-4-其它\" class=\"headerlink\" title=\"2.4 其它\"></a>2.4 其它</h4><p>剩下的其他一些模块仍然处于计划中的状态，暂未进行拆分。到这一步的话，库间依赖关系大致如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4a8c0fca?w=1240&amp;h=608&amp;f=png&amp;s=111714\" alt=\"\"></p>\n<p>可以看到其中存在一些不太合理的依赖关系，如 LPDBUserCenterModule 依赖 LPDBLoginModule 模块，也就是所谓的业务模块横向依赖问题，接下来，我们就要处理这一问题。</p>\n<h3 id=\"3-解除耦合\"><a href=\"#3-解除耦合\" class=\"headerlink\" title=\"3. 解除耦合\"></a>3. 解除耦合</h3><p>由于之前开发过程中从未有过任何模块化的考量，所以蜂鸟商家版的代码非常杂糅，项目依赖关系十分复杂，主要可以分为以下三类耦合：</p>\n<ul>\n<li>界面耦合：App 执行过程中，硬编码的界面间的跳转行为；</li>\n<li>工程耦合：某些模块在运行时需要依赖主工程的代码才能运行或实现完整的功能；</li>\n<li>依赖耦合：两个业务模块之间的有依赖。</li>\n</ul>\n<h4 id=\"3-1-模块间组件共用\"><a href=\"#3-1-模块间组件共用\" class=\"headerlink\" title=\"3.1 模块间组件共用\"></a>3.1 模块间组件共用</h4><p>在拆分业务模块的过程中，经常发生两个业务模块同时引用某一块业务代码的问题，这时我们就需要对这一块代码进行理解，首先区分它到底应不应该划分到业务层来？</p>\n<ul>\n<li>如果是的话，应该划归到哪一个模块中去更合理一些；</li>\n<li>如果不是的话，应该将这一部分代码下沉到哪一个组件库中去比较合适，或者独立为一个组件。</li>\n</ul>\n<p>在 LPDBUserCenterModule 的抽离过程中就遇到了这个问题，LPDBUserCenterModule<br> 和 LPDBLoginModule 共同依赖了几个和用户信息有关的数据模型，导致需要发生模块间横向依赖，所以我们将共用的数据模型抽出，然后下沉到了 LPDBOCFoundationGarbage 中。</p>\n<h4 id=\"3-2-模块间耦合\"><a href=\"#3-2-模块间耦合\" class=\"headerlink\" title=\"3.2 模块间耦合\"></a>3.2 模块间耦合</h4><p>另一个经常遇到的问题就是跨模块调用代码的问题了，不仅是模块与模块间代码的互相调用、模块间页面的跳转，还有模块反向调用主工程代码等问题，这个问题的解决我们分了三步：</p>\n<ul>\n<li>反射调用</li>\n</ul>\n<p>因为工程的复杂性和以前代码的不规范，导致我们在处理切割业务模块时比较痛苦，所以我们在刚开始抽出模块时采用了一种快速但不太安全的方式进行解耦，比如在 LPDBUserCenterModule 模块中需要调用主工程的 getMiddlePageVC 方法时，我们用了如下临时解决方案：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIApplication</span> sharedApplication].delegate respondsToSelector:<span class=\"keyword\">@selector</span>(getMiddlePageVC)]) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIViewController</span> *info = [[<span class=\"built_in\">UIApplication</span> sharedApplication].delegate performSelector:<span class=\"keyword\">@selector</span>(getMiddlePageVC)];</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主工程的 中实现这个接口：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> : <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// LPDBUserCenterModule</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)getMiddlePageVC;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .m</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)getMiddlePageVC &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> xxx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这一方案的优点就是灵活，利用 NSClassFromString、performSelector 等方式，能够快速解决各种耦合问题，瞬间切割出模块。但缺点也显而易见，字符串硬编码，维护成本大，去掉了编译器检查，容易翻车。</p>\n<ul>\n<li>协议调用</li>\n</ul>\n<p>所以自然而言地，当我们的某个业务模块的拆分工作基本定型时，我们就开始将第一步中的反射调用方式替换为协议的方式进行调用，比如当 LPDBLoginModule 模块需要调用主工程的 getCoordinate 方法时，示例如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> delegate = [[<span class=\"built_in\">UIApplication</span> sharedApplication] delegate];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (![delegate conformsToProtocol:<span class=\"class\"><span class=\"keyword\">@protocol</span>(<span class=\"title\">AppDelegateProtocol</span>)]) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">CLLocationCoordinate2D</span> coordinate = [delegate coordinate];</span><br></pre></td></tr></table></figure>\n<p>然后在主工程中实现该方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"AppDelegate.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@import</span> LPDBLoginModule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> (<span class=\"title\">Protocol</span>)  &lt;<span class=\"title\">AppDelegateProtocol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .m</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span> (<span class=\"title\">Protocol</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">CLLocationCoordinate2D</span>)getCoordinate &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.coordinate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>但是，样的改变并不能彻底解决所编写的模块间互相调用的代码缺乏编译器检查的问题，而仅仅是对调用方做了判断加上了容错，并不能在编译期就让开发人员察觉到问题，一定要进行测试才可以，所以这种方式也不是十分理想。</p>\n<ul>\n<li>Lotusoot 解耦工具</li>\n</ul>\n<p>那么为了彻底解决问题，我们开发和引入了组件通信和工具 Lotusoot，调用方式有下列几种可供参考：</p>\n<ul>\n<li>服务调用</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lotus = s(<span class=\"type\">AccountLotus</span>.<span class=\"keyword\">self</span>) </span><br><span class=\"line\"><span class=\"keyword\">let</span> accountModule: <span class=\"type\">AccountLotus</span> = <span class=\"type\">LotusootCoordinator</span>.lotusoot(lotus: lotus) <span class=\"keyword\">as</span>! <span class=\"type\">AccountLotus</span></span><br><span class=\"line\">accountModule.login(username: <span class=\"string\">\"admin\"</span>, password: <span class=\"string\">\"wow\"</span>) &#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error ?? <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>短链注册</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> error: <span class=\"type\">NSError</span>? = <span class=\"type\">LotusootRouter</span>.register(route: <span class=\"string\">\"newproj://account/login\"</span>) &#123; (lotusootURL) <span class=\"keyword\">in</span></span><br><span class=\"line\">    accountModule.showLoginVC(username: <span class=\"string\">\"admin\"</span>, password: <span class=\"string\">\"wow\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>短链调用</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> param: <span class=\"type\">Dictionary</span> = [<span class=\"string\">\"username\"</span> : <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">                                 <span class=\"string\">\"password\"</span> : <span class=\"string\">\"wow\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无回调                                 </span></span><br><span class=\"line\"><span class=\"type\">LotusootRouter</span>.<span class=\"keyword\">open</span>(route: <span class=\"string\">\"newproj://account/login\"</span>, params: param)</span><br><span class=\"line\"><span class=\"comment\">// 有回调</span></span><br><span class=\"line\"><span class=\"type\">LotusootRouter</span>.<span class=\"keyword\">open</span>(route: <span class=\"string\">\"newproj://account/login\"</span>, params: param).completion &#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error ?? <span class=\"string\">\"open success\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ⚠️不推荐的用法，用 ?pram0=xxx 这样的形式导致字符串散落在各处，不易管理。</span></span><br><span class=\"line\"><span class=\"comment\">// 但为了保证 Hybrid 项目中 H5 页面的正常跳转，提供了此种调用</span></span><br><span class=\"line\"><span class=\"type\">LotusootRouter</span>.<span class=\"keyword\">open</span>(url: <span class=\"string\">\"newproj://account/login?username=zhoulingyu\"</span>).completion &#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error ?? <span class=\"string\">\"open success\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体可以参见 <a href=\"http://zhoulingyu.com/2017/11/29/iOS-modularized-tool-Lotusoot/\" target=\"_blank\" rel=\"noopener\">iOS 灵活的 模块化/组件化 工具与规范 Lotusoot 解说</a> 一文，在此不多做赘述。类似的工具还有 <a href=\"https://github.com/alibaba/BeeHive\" target=\"_blank\" rel=\"noopener\">BeeHive</a> 和 <a href=\"https://github.com/LPD-iOS/LPDMvvmRouterKit\" target=\"_blank\" rel=\"noopener\">LPDMvvmRouterKit</a> 等，大家可以自行进一步探索。</p>\n<p>最终结构就变成了如图所示的样子：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/19/1610f02b4aa60211?w=708&amp;h=408&amp;f=png&amp;s=44455\" alt=\"\"></p>\n<h2 id=\"五-问题整理\"><a href=\"#五-问题整理\" class=\"headerlink\" title=\"五. 问题整理\"></a>五. 问题整理</h2><h3 id=\"1-不合理的分层结构和库间依赖\"><a href=\"#1-不合理的分层结构和库间依赖\" class=\"headerlink\" title=\"1. 不合理的分层结构和库间依赖\"></a>1. 不合理的分层结构和库间依赖</h3><p>由于参与拆分工作的人员比较缺乏组件化经验，所以导致某些库的拆分不是十分合理，某些应该沉入底层的公用 Model 和常量等没有在开始时就放到一个合理的位置。业务模块之间也存在一些不合理的横向依赖，没有进行一个合理的业务边界划分。这些原因导致我们在进行拆分工作时经常需要回过头来对已经拆出来的模块和组件重新进行整理和处理，重复劳动量很大。</p>\n<h3 id=\"2-拆分粒度不适中\"><a href=\"#2-拆分粒度不适中\" class=\"headerlink\" title=\"2. 拆分粒度不适中\"></a>2. 拆分粒度不适中</h3><p>某些库比如 LPDBOCFoundationGarbage 比较庞大，而像 LPDBUIKit 这样的库中内容却非常少，这一点的处理上存在问题。如果一个拆分完成的库仍然比较臃肿的化，说明仍然存在细化拆分的必余地。</p>\n<h3 id=\"3-工作进度难以控制\"><a href=\"#3-工作进度难以控制\" class=\"headerlink\" title=\"3. 工作进度难以控制\"></a>3. 工作进度难以控制</h3><p>由于没有能提前制定好详细的进度计划表，加上业务工作的挤压，导致我们花在组件化 / 模块化工作上的时间比较零散。本意是希望大家能够灵活安排工作，合理处置业务开发与技术改造工作之间的关系，但效果不是很理想，表现就是组件化 / 模块化工作的进行没有连续性，大家的积极性和工作效率也都不高。</p>\n<h2 id=\"六-经验总结\"><a href=\"#六-经验总结\" class=\"headerlink\" title=\"六. 经验总结\"></a>六. 经验总结</h2><h3 id=\"1-工作开始前要进行技术调研\"><a href=\"#1-工作开始前要进行技术调研\" class=\"headerlink\" title=\"1. 工作开始前要进行技术调研\"></a>1. 工作开始前要进行技术调研</h3><p>查看和学习一些同类成功的案例资料或者向业内大佬们请教能够对计划的制定带来便利，能够使我们避免很多错误的设计，少走一些弯路，降低返工率。</p>\n<h3 id=\"2-制定详细整体规划\"><a href=\"#2-制定详细整体规划\" class=\"headerlink\" title=\"2. 制定详细整体规划\"></a>2. 制定详细整体规划</h3><blockquote>\n<p>在准备作战时，我常常发现定好的计划没有用处，但计划的过程仍必不可少。—— 德怀特·艾森豪威尔</p>\n</blockquote>\n<p>制定详细的整体规划能够在设计阶段就将一些不合理的地方暴露出来，从而拿出解决方案使问题提前得到解决，或者把不合理的内容删减替换掉，例如分层不合理、库间依赖这样的问题，就会减少很多。拿出细致的任务拆分计划和工作量预估，也能更合理地将任务安排到开发人员手中，在提升工作效率的同时也能尽量避免和业务开发产生冲突。</p>\n<h3 id=\"3-注意对代码质量的控制\"><a href=\"#3-注意对代码质量的控制\" class=\"headerlink\" title=\"3. 注意对代码质量的控制\"></a>3. 注意对代码质量的控制</h3><p>好的代码和编码习惯能够大幅提升项目的可维护性，为之后的工作带来便利。我们之前旧的 OC 代码比较混乱，基本处于无法维护的状态，拆分起来十分痛苦；而新写的 Swift 代码明显质量要高很多（这真的不是我们自夸…），拆分起来就顺利多了。</p>\n<h3 id=\"4-重视信息的文档化\"><a href=\"#4-重视信息的文档化\" class=\"headerlink\" title=\"4. 重视信息的文档化\"></a>4. 重视信息的文档化</h3><p>每一个拆分出的模块及时添加文档，嫌麻烦的话至少要建立一份通用的 README 模板，每一个模块或组件的建立者把模块内容、拆分目的、设计思路等基本信息记录一下，有什么坑或者注意点也可以文档化，是以后的长期项目维护成为可能。</p>\n<h2 id=\"七-开源成果\"><a href=\"#七-开源成果\" class=\"headerlink\" title=\"七. 开源成果\"></a>七. 开源成果</h2><p>我们在组件化 / 模块化工作期间，产出的一些库和工具放在了 GitHub 上进行开源，给大家一些借鉴的同时，也希望能够收到大家的意见和建议，提高我们项目本身的质量：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">库名</th>\n<th style=\"text-align:left\">简介</th>\n<th style=\"text-align:left\">仓库地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Lotusoot</td>\n<td style=\"text-align:left\">灵活的 Swift 组件解耦和通信工具</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/Vegetarians/Lotusoot\" target=\"_blank\" rel=\"noopener\">https://github.com/Vegetarians/Lotusoot</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Bamboots</td>\n<td style=\"text-align:left\">一个面向协议的 Swift 网络库</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/mmoaay/Bamboots\" target=\"_blank\" rel=\"noopener\">https://github.com/mmoaay/Bamboots</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigkeeper</td>\n<td style=\"text-align:left\">一个 iOS &amp; Android 模块化项目效率提升工具</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/BigKeeper/bigkeeper\" target=\"_blank\" rel=\"noopener\">https://github.com/BigKeeper/bigkeeper</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SideNavigation</td>\n<td style=\"text-align:left\">一个支持侧滑且可自定义的侧边栏</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/CNKCQ/SideNavigation\" target=\"_blank\" rel=\"noopener\">https://github.com/CNKCQ/SideNavigation</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ViewPagers</td>\n<td style=\"text-align:left\">一个支持手势的 Segmented Control</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/CNKCQ/ViewPagers\" target=\"_blank\" rel=\"noopener\">https://github.com/CNKCQ/ViewPagers</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EFAutoScrollLabel</td>\n<td style=\"text-align:left\">一个带跑马灯效果的 UILabel</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/EyreFree/EFAutoScrollLabel\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFAutoScrollLabel</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"八-后记\"><a href=\"#八-后记\" class=\"headerlink\" title=\"八. 后记\"></a>八. 后记</h2><p>本文基本描述了蜂鸟商家版 App 到目前为止的组件化 / 模块化实践情况，希望本文能够给您的移动项目演进提供一些借鉴。在此过程中我们产出的一些文章、开源库和工具，也希望能给大家带来一定的帮助或者启发。欢迎大家提出各种反馈和建议或，帮助我们继续改进和提高。</p>\n<p>2017 年底，也就是差不多我参与蜂鸟商家版的维护工作满一年的样子，由于业务调整的原因这个 App 已经移交给别的团队进行维护了，导致项目的 Swift 化和组件化 / 模块化工作并没有全部完成，这一点有些遗憾。不过还是希望蜂鸟商家版能够越来越好，继续为广大商家朋友们服务。</p>\n<p>好消息是，接下来我主要参与蜂鸟团队版 App 的架构工作，这一次我们根据之前暴露出的问题制定了详细的工作计划，有了蜂鸟商家版的踩坑经验后，我相信这一次我们一定能顺利完成目标。2018，加油，一起拼！</p>\n<p>本文编写过程中参考了以下文章，在此对原作者们表示感谢：</p>\n<ol>\n<li><a href=\"https://36kr.com/p/5100487.html\" target=\"_blank\" rel=\"noopener\">即时配送网之于外卖O2O，配送的更高境界是社群经营</a></li>\n<li><a href=\"https://www.jianshu.com/p/79e4df63f31f\" target=\"_blank\" rel=\"noopener\">谈谈我的理解-组件化/模块化</a></li>\n<li><a href=\"http://limboy.me/tech/2016/03/10/mgj-components.html\" target=\"_blank\" rel=\"noopener\">蘑菇街 App 的组件化之路</a></li>\n<li><a href=\"http://lincode.github.io/Modularity\" target=\"_blank\" rel=\"noopener\">豆瓣App的模块化实践</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/the-road-of-mobile-tmall-decoupling\" target=\"_blank\" rel=\"noopener\">手机天猫解耦之路</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/jd-ios-component-management\" target=\"_blank\" rel=\"noopener\">京东iOS客户端组件管理实践</a></li>\n</ol>\n<hr>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。<br><a href=\"https://juejin.im/post/5a620cf5f265da3e36415764\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a620cf5f265da3e36415764</a><br>转载请注明原作者及以上信息。</p>\n</blockquote>\n","categories":["iOS"],"tags":["Swift"]},{"title":"Git 踩坑：Git Push 远端无分支不提示","url":"http://www.eyrefree.org/2017/12/25/Git-Push/","content":"<p>上周遇到一个 Git 配置导致的问题，踩坑过程如下。</p>\n<h2 id=\"一-问题描述\"><a href=\"#一-问题描述\" class=\"headerlink\" title=\"一. 问题描述\"></a>一. 问题描述</h2><ol>\n<li>首先找一个远端 Git 仓库，clone 到本地；</li>\n<li>在本地新建一个分支 test（名字随意，只要远端不存在这个分支即可）并切换到该分支；</li>\n<li>执行 <code>git push</code> 命令后会发现终端显示了 <code>Everything up-to-date</code>，会让人误以为该分支成功推到了远端；</li>\n<li>实际上问题已经出现了，这里 <code>git push</code> 指令并没有正确提示我们远端不存在该分支。我们可以检查一下远端 Git 仓库，的确没有把 test 分支推上去；</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608c4ec3e087cf1?w=585&amp;h=366&amp;f=png&amp;s=55199\" alt=\"\"></p>\n<ol>\n<li>这个问题有多坑呢？假设没察觉这里回显不对，而是把本地分支删了干别的去了，估计就哭了。</li>\n</ol>\n<h2 id=\"二-问题解决\"><a href=\"#二-问题解决\" class=\"headerlink\" title=\"二. 问题解决\"></a>二. 问题解决</h2><ol>\n<li>查了 N 多资料；</li>\n<li>对比了 N 多类似案例；</li>\n<li>耗费了无数脑细胞；</li>\n<li>终于在 <a href=\"http://timothyqiu.com/\" target=\"_blank\" rel=\"noopener\">TimothyQiu</a> 大大告诉我解决方法之后解决了该问题，😂；</li>\n<li>问题原因大概是因为 <code>gitconfig</code> 中的 参数设置异常导致的，我们可以执行 <code>git config -l</code>  命令查看当前的 Git 配置，可以看到 <code>push.default</code> 的值为 <code>matching</code>：</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608c4ec3c4f77f6?w=805&amp;h=381&amp;f=png&amp;s=63849\" alt=\"\"></p>\n<ol>\n<li>用 <code>git config --global push.default simple</code> 命令把它改成 <code>simple</code> 即可：</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608c4ec3c565841?w=804&amp;h=396&amp;f=png&amp;s=69369\" alt=\"\"></p>\n<ol>\n<li>然后执行 <code>git push</code> 命令就可以正常获取错误提示信息啦：</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/25/1608c4ec3c6b61bd?w=518&amp;h=103&amp;f=png&amp;s=11300\" alt=\"\"></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/12/25/2017-12-25-Git-Push/\">http://www.eyrefree.org/2017/12/25/2017-12-25-Git-Push/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Git"],"tags":["Git"]},{"title":"利用 CodeBeat 为你在 GitHub 上的项目进行代码质量管理","url":"http://www.eyrefree.org/2017/12/13/CodeBeat-GitHub/","content":"<p>CodeBeat 是一个免费为开源项目进行代码质量管理的工具（付费可以支持私有项目），目前已经支持的编程语言有 Swift、Objective-C、Go、Ruby、Python、Java、Kotlin、Javascript、Typescript、Elixir，无需对原有项目进行任何修改即可获取针对项目的完整质量分析，方便快捷。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当我们在 GitHub 上的代码仓库发生变更后，会通知 CodeBeat 执行分析操作刷新项目代码质量评分，并在完成后刷新项目评级 / 评分的状态或结果，如图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b248e6fda?w=1184&amp;h=673&amp;f=png&amp;s=98888\" alt=\"代码质量效果预览\"></p>\n<p>CodeBeat 的同类产品有 Code Climate，目前支持 Ruby、Python、PHP、JavaScript、Java、TypeScript，不过官网显示<br> Swift、Go、Objective-C 的支持在计划中，因为我是 iOS 开发，所以暂时用不了这个，在一个 <a href=\"https://github.com/BigKeeper/bigstash\" target=\"_blank\" rel=\"noopener\">Ruby 项目</a>有试过这个，看起来还好，有兴趣的同学也可以一试。</p>\n<p>本文以 <a href=\"https://github.com/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\">EFQRCode</a>(一个使用 Swift 作为开发语言的二维码库) 为例，简述怎样为自己的开源项目添加代码质量管理功能。</p>\n<h2 id=\"1-注册-CodeBeat-账号\"><a href=\"#1-注册-CodeBeat-账号\" class=\"headerlink\" title=\"1. 注册 CodeBeat 账号\"></a>1. 注册 CodeBeat 账号</h2><p>打开 <a href=\"https://codebeat.co/\" target=\"_blank\" rel=\"noopener\">https://codebeat.co/</a> 注册一个 CodeBeat 账号，也可以通过 GitHub 账户直接登陆。CodeBeat 服务对开源项目是免费的，所以你的私有项目无法享受到免费的持续构建服务。唔，当然，每月支付 20 美刀成为付费用户后可以解锁无限数量私有库的功能。</p>\n<h2 id=\"2-从-GitHub-添加项目\"><a href=\"#2-从-GitHub-添加项目\" class=\"headerlink\" title=\"2. 从 GitHub 添加项目\"></a>2. 从 GitHub 添加项目</h2><p>登陆完成后，点击右边的 <code>Add Repository</code> 按钮即可开始添加自己的 Git 仓库，支持各种 Git 托管平台，甚至自建的也可以：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b27e29b81?w=1168&amp;h=411&amp;f=png&amp;s=35896\" alt=\"Add Repository\"></p>\n<h2 id=\"3-开启代码质量管理\"><a href=\"#3-开启代码质量管理\" class=\"headerlink\" title=\"3. 开启代码质量管理\"></a>3. 开启代码质量管理</h2><p>第一次项目导入后会立即进行一次分析，试了一下速度还是比较快的（反正比持续集成快多了），反正我的项目导入以后刷新一下页面就出结果了。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b27f26013?w=1145&amp;h=493&amp;f=png&amp;s=54810\" alt=\"\"></p>\n<p>唔，细心的同学可能会发现，这一步操作完成后我们在 GitHub 项目 Setting 中的 <code>Webhooks</code> 已经添加了一个属于 <code>codebeat.co</code> 的 Webhook，没错，以后项目代码发生更改后就会自动触发代码质量分析，不需要我们手动操作了。感兴趣的同学可以点击 <code>Edit</code> 按钮查看一下 CodeBeat 具体干了啥：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b294a4d04?w=916&amp;h=360&amp;f=png&amp;s=77638\" alt=\"Webhooks\"></p>\n<p>关于 Webhook 感兴趣的同学可以查看 GitHub 官方的资料：<a href=\"https://developer.github.com/webhooks/\" target=\"_blank\" rel=\"noopener\">https://developer.github.com/webhooks/</a>。</p>\n<h2 id=\"4-查看代码质量分析结果\"><a href=\"#4-查看代码质量分析结果\" class=\"headerlink\" title=\"4. 查看代码质量分析结果\"></a>4. 查看代码质量分析结果</h2><p>点击进入该项目的分析结果，可以查看到具体的问题，如代码复杂性、代码风格、代码重复等，点击 <code>Quick Wins</code> 这一栏可以查看优先推荐修复的项目，如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b2da5c683?w=1162&amp;h=401&amp;f=png&amp;s=70133\" alt=\"\"></p>\n<p>我们可以对应分析出的代码质量问题对我们的工程代码进行修改，改完直接提交到仓库即可，Webhook 会通知 CodeBeat 进行刷新。</p>\n<h2 id=\"没了\"><a href=\"#没了\" class=\"headerlink\" title=\"没了\"></a>没了</h2><p>在  的项目设置中可以看到更多有意思的玩法，比如将代码质量变化通知发送到 Slack 或邮箱等，也可以将代码质量评级徽标添加到自己的项目 README 中，大佬们可以自行研究…</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/13/1604ec0b2d2ad569?w=1148&amp;h=340&amp;f=png&amp;s=35402\" alt=\"Setting\"></p>\n<p>祝操作顺利，🌈</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/12/13/2017-12-13-CodeBeat-GitHub/\">http://www.eyrefree.org/2017/12/13/2017-12-13-CodeBeat-GitHub/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["GitHub"],"tags":["CodeBeat"]},{"title":"AppStore 审核 macOS 应用踩坑记录","url":"http://www.eyrefree.org/2017/12/12/AppStore-macOS/","content":"<h2 id=\"1-Guideline-2-3-8-Performance\"><a href=\"#1-Guideline-2-3-8-Performance\" class=\"headerlink\" title=\"1. Guideline 2.3.8 - Performance\"></a>1. Guideline 2.3.8 - Performance</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Guideline 2.3.8 - Performance</span><br><span class=\"line\"></span><br><span class=\"line\">We noticed that your app name to be displayed on the App Store does not sufficiently match the name of the app displayed when installed on macOS.</span><br><span class=\"line\"></span><br><span class=\"line\">iTunes Connect Name: EFQRCode</span><br><span class=\"line\"></span><br><span class=\"line\">App Name when Installed: EFQRCode.macos</span><br><span class=\"line\"></span><br><span class=\"line\">App Name when Launched: EFQRCode</span><br><span class=\"line\"></span><br><span class=\"line\">App Name in About/Quit Menu: macOS Example</span><br></pre></td></tr></table></figure>\n<p>大概是说 AppStore 的应用名称和 App 安装后以及 App 内的菜单项目上显示的不符，需要修改每一处到一样后重新打包提交。</p>\n<p>iTunes Connect Name：编辑 iTunes Connect 的 App 信息中 App 名称可更改；<br>App Name when Installed：编辑 Build Setting 中的 Product Name 可更改；</p>\n<h2 id=\"2-Guideline-5-2-5-Legal\"><a href=\"#2-Guideline-5-2-5-Legal\" class=\"headerlink\" title=\"2. Guideline 5.2.5 - Legal\"></a>2. Guideline 5.2.5 - Legal</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Guideline 5.2.5 - Legal</span><br><span class=\"line\"></span><br><span class=\"line\">Your app uses ‘macOS’ in the Installed App Name and Menu Item Names in a manner that is not consistent with Apple&apos;s trademark guidelines.</span><br><span class=\"line\"></span><br><span class=\"line\">Indicating Mac compatibility in the app name is not necessary for the Mac App Store.</span><br></pre></td></tr></table></figure>\n<p>这条意思是 App 中不应该出现 ‘macOS’ 等不符合苹果商标指南的字样，全局搜索，把不合法的文字出现从按钮 / 菜单 / 页面去除即可。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/12/12/2017-12-12-AppStore-macOS/\">http://www.eyrefree.org/2017/12/12/2017-12-12-AppStore-macOS/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["AppStore"],"tags":["macOS"]},{"title":"如何将 CocoaPods 库升级到 Swift 4","url":"http://www.eyrefree.org/2017/12/05/CocoaPods-Swift4/","content":"<h2 id=\"零-前言\"><a href=\"#零-前言\" class=\"headerlink\" title=\"零. 前言\"></a>零. 前言</h2><p>Swift 版本升级嘛，大家应该都很熟练了，菜单 -&gt; Edit -&gt; Convert -&gt; To Current Swift Syntax…，然后巴拉巴拉一顿操作。emmmn，抱歉，编译过了也不一定能正常使用。</p>\n<p>这次 Swift 3 到 Swift 4 的更新和之前的大版本更新相比，已经平滑了很多，相较之前的动辄几百上千个 error，现在用 Xcode 进行 Convert 之后基本上只需要进行少量人工修正即可，不过仍然有一些点需要注意，本文将会对一些常见的坑或者注意点以及解决方法进行讨论。</p>\n<p>本文以 <a href=\"https://github.com/EyreFree/EFCountingLabel\" target=\"_blank\" rel=\"noopener\">EFCountingLabel</a> 的 1.0.3 版本和 Xcode 9.0 为例，主要关于原有的 Swift 3 的 CocoaPods 库到 Swift 4 的升级，仍处于 Swift 2 阶段的同学可暂时忽略本文。</p>\n<h2 id=\"一-升级流程\"><a href=\"#一-升级流程\" class=\"headerlink\" title=\"一. 升级流程\"></a>一. 升级流程</h2><h3 id=\"1-查看当前版本\"><a href=\"#1-查看当前版本\" class=\"headerlink\" title=\"1. 查看当前版本\"></a>1. 查看当前版本</h3><p>首先用 Xcode 打开工程，看一下当前工程设置的 Swift 版本，如果过低的话可能无法直接 Convert，选中需要转换的 target 搜索 <code>swift_ver</code> 即可，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-51f2abcb6ffc474c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里 EFCountingLabel 的 Swift 版本为 3.2，如果是 2.x 的话需要自己想办法先转换成 Swift 3.x…</p>\n<h3 id=\"2-Xcode-代码转换\"><a href=\"#2-Xcode-代码转换\" class=\"headerlink\" title=\"2. Xcode 代码转换\"></a>2. Xcode 代码转换</h3><p>接下来，就是利用 Xcode 实现代码转换了，菜单 -&gt; Edit -&gt; Convert -&gt; To Current Swift Syntax…，然后选中需要转换的 target，点击 <code>Next</code> 按钮即可：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7235c3b6ddb5f4fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"3-选择转换模式\"><a href=\"#3-选择转换模式\" class=\"headerlink\" title=\"3. 选择转换模式\"></a>3. 选择转换模式</h3><p>然后会出现一个转换模式选项，有 <code>Minimize Inference（recommended）</code> 和 <code>Match Swift 3 Behavior</code> 两个选择，苹果推荐的是第一个选项：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d603752b86a67dd9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>苹果官方文档对这两个选项的描述如下，大意是：如果选第一个选项，会仅在必要的时候为方法或属性添加 <code>@objc</code> 标志，不过大部分工作需要用户（也就是你）手动完成，好处是能减少最终生成的二进制文件的大小；如果选择第二个选项，则会按 Swift 3 的方式给所有的地方直接添加 <code>@objc</code> 标志（关于 <code>@objc</code> 标志的介绍大家可以参考 Swift 翻译组的<a href=\"http://swift.gg/2016/04/20/swift-qa-2016-04-20/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>），缺点就是不会对生成的二进制文件大小进行优化（也就是跟 Swift 3 一样）：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-0565c3371c173e78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里我们分几种情况：</p>\n<ol>\n<li>如果你的 Swift 库不打算支持 OC 调用的话，选 <code>Minimize Inference（recommended）</code>，检查并且保存自动转换结果即可，然后可以直接跳到下一小节，请忽略下面这一大段；</li>\n<li>如果你的 Swift 库打算支持 OC 调用，但是开发时间紧迫暂时没时间仔细设置 <code>@objc</code> 标志或者对这一点二进制文件体积的缩减并不是十分在意的话，选 <code>Match Swift 3 Behavior</code>，检查并且保存自动转换结果即可，然后可以直接跳到下一小节，请忽略下面这一大段；</li>\n<li>如果你的 Swift 库打算支持 OC 调用，并且打算用推荐的方式进行优化的话，选 <code>Minimize Inference（recommended）</code>，保存更改，然后按下面的操作去做：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 编译工程；</span><br><span class=\"line\">2. 修正那些提示你需要添加 @objc 标志的警告（请务必修正，不然即使编译能过运行时也可能会出问题）；</span><br><span class=\"line\">3. 修正 Xcode 提示的不需要添加 @objc 标志的代码，持续构建和测试你的代码，直到没有任何警告出现；</span><br><span class=\"line\">4. 打开工程设置；</span><br><span class=\"line\">5. 选中 target，搜索 `@objc` 找到 `Swift 3 @objc Inference` 选项，设为 `Default`。</span><br></pre></td></tr></table></figure>\n<p>唔，以上这段大概是原文翻译过来的了，官方文档原文如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-57b6b30c33b54e1f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>需要注意的是，因为我们这里针对的并不是完整的 iOS 项目，而是 CocoaPods 库，如果你的 OC Demo 没有调用库中需要暴露的功能（或者干脆没有 OC Demo），辣么编译器可能完全不会给你任何提示而是直接通过编译了，直到你某一天在一个 OC 工程中引入这个库才会发现并不能调用到某些方法或获取某些属性。</p>\n<p>所以其实麻烦之处在于，编译器并不会给你任何提示，因为编译器也不知道哪些类 / 属性 / 方法需要暴露，哪些需要被优化掉，需要开发人员自己决定并手动添加对应的 <code>@objc</code> 标志，总结起来的话有以下几点：</p>\n<ol>\n<li>需要在 OC 中调用一个 Swift 4 的类，需要让这个类继承 NSObject 并且在这个类前加上 @objc 标志；</li>\n<li>需要在 OC 中调用一个 Swift 4 类的方法，需要在方法前加上 @objc 标志（这里有一个坑，如果是普通的函数调用还好，至少编译器会报错，如果是用 <code>#selector</code> 的方式调用的话，能过编译并且在运行时直接找不到对应方法而闪退，建议升完 Swift 4 检查一下所有的 #selector 调用）；</li>\n<li>需要在 OC 中访问一个 Swift 4 类的某个属性，需要在属性前加上 @objc 标志（同上，如果是普通属性访问的话编译器会报错，但是 KVC 的话会在运行时找不到属性而崩溃，记得检查…）；</li>\n<li>需要在 OC 中访问一个 Swift 4 类的扩展，只要在扩展前加上 @objc 标志，该扩展的属性和方法就都能被调用了。</li>\n</ol>\n<h3 id=\"4-更新-Xcode-设置\"><a href=\"#4-更新-Xcode-设置\" class=\"headerlink\" title=\"4. 更新 Xcode 设置\"></a>4. 更新 Xcode 设置</h3><ol>\n<li>如下图所示，根据 Xcode 提示将工程设置进行更新，点击 Warning 后单击 <code>Perform Changes</code> 按钮即可；</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-450ad5a3dfe1641f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ol>\n<li>检查设置，将所有 target 的 <code>Swift 3 @objc Inference</code> 设置（如果有的话）改为 <code>Default</code>，之前改过的话就不用改了；</li>\n<li>搜索 <code>swift_ver</code>，可以看到当前的 <code>Swift Language Version</code> 已经是 <code>Swift 4</code> 了。</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d10ebceafdcfcb6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>剩下少量方法名变动之类的更新大家可以根据提示自行修改，到这里基本就完成了升级过程，不过先别急，接下来我们看注意事项。</p>\n<h2 id=\"二-注意事项\"><a href=\"#二-注意事项\" class=\"headerlink\" title=\"二. 注意事项\"></a>二. 注意事项</h2><p>以下情况必须要给对应的属性或方法添加 <code>@objc</code> 标志（当然，他们所在的类肯定也需要添加 <code>@objc</code> 标志），不管是通过 OC 还是 Swift 调用：</p>\n<ol>\n<li>使用 <code>@selector()</code> 或 <code>#selector()</code> 方式调用的函数；</li>\n<li>使用 KVC 进行访问的属性；</li>\n<li>使用 IBOutlet 或者 IBAction 和 StoryBoard 绑定的函数或属性。</li>\n</ol>\n<p>这些有部分在官方文档中也有提及：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-940d3152de88724d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"三-一些问题\"><a href=\"#三-一些问题\" class=\"headerlink\" title=\"三. 一些问题\"></a>三. 一些问题</h2><ol>\n<li>同一工程的 Pods 库是否可以既有 Swift 3 的也有 Swift 4 的？</li>\n</ol>\n<p>Swift 的版本控制粒度在 framework 层面，也就是说同一个工程中不同的 framework 可以是按不同版本的 Swift 进行编译的，所以并不需要等待项目依赖的所有 Pods 库都支持 Swift 4 后再更新，完全可以将已经升级 Swift 4 的库先用起来。</p>\n<ol>\n<li><code>Swift 3 @objc Inference</code> 选项是干啥的？</li>\n</ol>\n<p>在 Swift 4 之前，编译器对 Objective-C 自动提供了一些 Swift 声明。例如，编译器会为 NSObject 子类的所有方法创建 Objective-C 入口点，该机制称为 @objc 推断（@objc Inference）。</p>\n<p>在 Swift 4 中，这种自动的 @objc 推断已被废弃，因为生成所有这些 Objective-C 入口点有代价，会增大最终的二进制文件体积。当 <code>Swift 3 @objc Inference</code> 设置为 <code>On</code> 时，它会按照 Swift 4 之前的模式运行，不进行优化，也就是隐式为我们编写的所有 Swift 代码提供 OC 入口。</p>\n<p>但是，当设置为 <code>On</code> 时 Xcode 会报一个警告，建议修复这个警告，并将设置切换到 <code>Default</code>。新的 Swift 项目的默认为“Default”。可以理解为该项设置为 <code>On</code> 时和上文代码转换时选择 <code>Match Swift 3 Behavior</code> 选项效果类似。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f32398e06f3f1538.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"四-没了\"><a href=\"#四-没了\" class=\"headerlink\" title=\"四. 没了\"></a>四. 没了</h2><p>升级完请务必跑一遍整体测试流程，暗坑无数，以防万一，祝大家线上稳定。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/12/05/2017-12-05-CocoaPods-Swift4/\">http://www.eyrefree.org/2017/12/05/2017-12-05-CocoaPods-Swift4/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Swift"],"tags":["CocoaPods"]},{"title":"EFColorPicker - 一个纯 Swift 的轻量级 iOS 颜色选择器","url":"http://www.eyrefree.org/2017/10/09/EFColorPicker/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-54ace766144a585f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFColorPicker 是一个纯 Swift 的轻量级 iOS 颜色选择器，受 <a href=\"https://github.com/sgl0v/MSColorPicker\" target=\"_blank\" rel=\"noopener\">MSColorPicker</a> 启发。</p>\n<blockquote>\n<p><a href=\"https://github.com/EyreFree/EFColorPicker/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">English Introduction</a></p>\n</blockquote>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://github.com/EyreFree/EFColorPicker\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFColorPicker</a></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>iOS 颜色选择器组件，它能够让用户选择自定义颜色，关键特性如下：</p>\n<ul>\n<li>支持 iPhone 和 iPad</li>\n<li>自适应的用户界面</li>\n<li>支持 RGB 和 HSB 两种颜色模式</li>\n<li>比较完善的文档和注释</li>\n<li>支持 iOS 8.0 (iPhone &amp; iPad) 及更高版本</li>\n</ul>\n<h2 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">iPhone</th>\n<th style=\"text-align:center\">iPad   </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-bde6c476505cd154.gif?imageMogr2/auto-orient/strip\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-c0bcbd2dd0bc027d.gif?imageMogr2/auto-orient/strip\" alt=\"\">   </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ol>\n<li>利用 <code>git clone</code> 命令下载本仓库；</li>\n<li>利用 cd 命令切换到 Example 目录下，执行 <code>pod install</code> 命令；</li>\n<li>随后打开 <code>EFColorPicker.xcworkspace</code> 编译即可。</li>\n</ol>\n<p>或执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:EyreFree/EFColorPicker.git; <span class=\"built_in\">cd</span> EFColorPicker/Example; pod install; open EFColorPicker.xcworkspace</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>iOS 8.0+</li>\n<li>Xcode 9.0+</li>\n<li>Swift 4.0+</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>EFColorPicker 可以通过 <a href=\"http://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> 进行获取。只需要在你的 Podfile 中添加如下代码就能实现引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod &quot;EFColorPicker&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h2><p>EyreFree, eyrefree@eyrefree.org</p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-133df270d79d2d3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFQRCode 基于 MIT 协议进行分发和使用，更多信息参见协议文件。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/10/09/2017-10-09-EFColorPicker/\">http://www.eyrefree.org/2017/10/09/2017-10-09-EFColorPicker/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Swift"],"tags":["EFColorPicker"]},{"title":"EFResume - 一个普通的 Swift 简历模板","url":"http://www.eyrefree.org/2017/09/14/EFResume/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-879153e48fb39720.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFResume 是一个普通的简历模板（可能还称不上），用 Swift 进行开发，受 <a href=\"https://github.com/izuolan/zresume\" target=\"_blank\" rel=\"noopener\">zresume</a> 启发，因为 zresume 是基于容器技术的然后需要服务器支持，然而对此技术 EyreFree 表示一窍不通并且囊中羞涩但是觉得这份简历真的非常好看呢，所以就只能自己动手改成静态模板了，😂。设计稿来源于 <a href=\"https://www.behance.net/gallery/15677411/FREE-Resume-Template\" target=\"_blank\" rel=\"noopener\">FREE Resume Template</a>。欢迎大家提 Issue 和 PR，希望能和大家一起改进这份简历，然后好用的话望大佬们赏个 Star，🙏，有问题可以来撩我。</p>\n<blockquote>\n<p><a href=\"https://github.com/EyreFree/EFResume/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">English Introduction</a></p>\n</blockquote>\n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><p><a href=\"https://github.com/EyreFree/EFResume\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFResume</a></p>\n<h2 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f54ae220436583f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><a href=\"https://eyrefree.github.io/EFResume/\" target=\"_blank\" rel=\"noopener\">https://eyrefree.github.io/EFResume/</a></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>XCode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>唔，首先需要安装 Xcode；</li>\n<li>利用 <code>git clone</code> 命令下载本仓库；</li>\n<li>随后打开 core 目录下的 <code>EFResume.xcworkspace</code> 编译即可。</li>\n</ol>\n<p>或执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:EyreFree/EFResume.git; <span class=\"built_in\">cd</span> EFResume/core; open EFResume.xcworkspace</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>用 Xcode 打开工程；</li>\n<li>打开 main.swift 文件，编辑 input 函数中对应的文本，将信息修改为自己的即可；</li>\n<li>编辑完成后直接编译即可；</li>\n<li>打开 docs 目录下的 index.html 可在本地进行预览；</li>\n<li>将本地变更提交到远端 Git 仓库；</li>\n<li>打开 GitHub 的 Pages 服务，选择 /docs 路径作为根路径，即可生成在线简历同时获得 URL 地址。</li>\n<li>祝好运，👍</li>\n</ol>\n<h2 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h2><p>EyreFree, eyrefree@eyrefree.org</p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4922d1f639709d4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFResume 基于 GPLv3 协议进行分发和使用，更多信息参见协议文件。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/09/14/2017-09-14-EFResume/\">http://www.eyrefree.org/2017/09/14/2017-09-14-EFResume/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Resume"]},{"title":"iOS Markdown 转换及预览","url":"http://www.eyrefree.org/2017/08/27/EFMarkdown/","content":"<p>作为一个开发人员，日常经常会需要编写各种各样的文档／材料之类的，个人非常喜欢用 Markdown 来完成这些工作，Markdown 的优点就不再赘述了，大家应该都有过了解，不过目前 iOS 原生并没有提供任何对 Markdown 的支持。所以最近基于 cmark-gfm 把 Markdown 转 HTML 的功能封装了一遍，并且在原有基础上添加了对列表 table 的支持，同时利用 WKWebView 做了一个可直接展示 Markdown 的 View，方便以后使用，现已开源到 GitHub 基于 WTFPL 协议进行分发，需要的同学可以自取。</p>\n<p>项目地址：<a href=\"https://github.com/EyreFree/EFMarkdown\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFMarkdown</a></p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4e62a5fdcac2b5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFMarkdown 是一个轻量级的 Markdown 库，可以用来将 Markdown 转为 HTML，也可以用来直接展示 Markdown 对其进行预览。</p>\n<blockquote>\n<p><a href=\"https://github.com/EyreFree/EFMarkdown/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">English Introduction</a></p>\n</blockquote>\n<h2 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">sample1</th>\n<th style=\"text-align:center\">sample2</th>\n<th style=\"text-align:center\">sample3</th>\n<th style=\"text-align:center\">sample4  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-da0a10c955e06239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-6812167f568aef5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-64e5e2ae106fb89d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-90d2e5d82627276b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ol>\n<li>利用 <code>git clone</code> 命令下载本仓库；</li>\n<li>利用 cd 命令切换到 Example 目录下，执行 <code>pod install</code> 命令；</li>\n<li>随后打开 <code>EFMarkdown.xcworkspace</code> 编译即可。</li>\n</ol>\n<p>或执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:EyreFree/EFMarkdown.git; <span class=\"built_in\">cd</span> EFMarkdown/Example; pod install; open EFMarkdown.xcworkspace</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>XCode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>EFMarkdown 可以通过 <a href=\"http://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> 进行获取。只需要在你的 Podfile 中添加如下代码就能实现引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod &quot;EFMarkdown&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"1-将-Markdown-转为-HTML\"><a href=\"#1-将-Markdown-转为-HTML\" class=\"headerlink\" title=\"1. 将 Markdown 转为 HTML\"></a>1. 将 Markdown 转为 HTML</h3><p>你可以利用 <code>EFMarkdown</code> 轻松实现 Markdown 字符串到 HTML 字符串地转换，示例代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> markdown = <span class=\"string\">\"# Hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    html = <span class=\"keyword\">try</span> <span class=\"type\">EFMarkdown</span>().markdownToHTML(markdown, options: <span class=\"type\">EFMarkdownOptions</span>.safe)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(html) <span class=\"comment\">// 这里会输出 \"&lt;h1&gt;Hello&lt;/h1&gt;\\n\"</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">\"Error: <span class=\"subst\">\\(error.domain)</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-对-Markdown-进行预览\"><a href=\"#2-对-Markdown-进行预览\" class=\"headerlink\" title=\"2. 对 Markdown 进行预览\"></a>2. 对 Markdown 进行预览</h3><p>你可以利用 <code>EFMarkdownView</code> 实现对 Markdown 字符串的预览，示例代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> screenSize = <span class=\"type\">UIScreen</span>.main.bounds</span><br><span class=\"line\"><span class=\"keyword\">let</span> markView = <span class=\"type\">EFMarkdownView</span>()</span><br><span class=\"line\">markView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">20</span>, width: screenSize.width, height: screenSize.height - <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(markView)</span><br><span class=\"line\">markView.load(markdown: testMarkdownFileContent(), options: [.<span class=\"keyword\">default</span>]) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] (<span class=\"number\">_</span>, <span class=\"number\">_</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 可选：你可以通过在此处传入一个百分比来改变字体大小</span></span><br><span class=\"line\">        markView.setFontSize(percent: <span class=\"number\">128</span>)</span><br><span class=\"line\">        printLog(<span class=\"string\">\"load finish!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-选项\"><a href=\"#3-选项\" class=\"headerlink\" title=\"3. 选项\"></a>3. 选项</h3><p>你可以通过传入不同的选项来控制底层 <code>cmark</code> 对 Markdown 字符串的处理，默认传入的值为 <code>safe</code>。</p>\n<p>可选的值有以下这些：</p>\n<ul>\n<li>default</li>\n<li>sourcePos</li>\n<li>hardBreaks</li>\n<li>safe</li>\n<li>noBreaks</li>\n<li>validateUTF8</li>\n<li>smart</li>\n<li>githubPreLang</li>\n<li>liberalHtmlTag</li>\n</ul>\n<p>更多关于这些选项的信息，可以参考 <a href=\"https://github.com/github/cmark\" target=\"_blank\" rel=\"noopener\"><code>cmark</code></a>。</p>\n<h2 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h2><p>EyreFree, eyrefree@eyrefree.org</p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-17002c4b490b0b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>EFMarkdown 基于 WTFPL 协议进行分发和使用，更多信息参见协议文件。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/08/27/2017-08-27-EFMarkdown/\">http://www.eyrefree.org/2017/08/27/2017-08-27-EFMarkdown/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Markdown"]},{"title":"Swift 流水账：踩到一个 Enum 坑（并不是","url":"http://www.eyrefree.org/2017/08/15/Swift-Enum/","content":"<p>今天，天气晴朗，阳光明媚，我像往常一样赖床赖到了九点半，然后在最后一遍起床闹钟的催促声中穿起了衣服，飞一般地冲出了出租屋，蹬上小区门口的小黄，一路冲刺，在即将迟到的前 1s 到达了工位，和平的日常呢。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-ee973c8209f8dd57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>熟练地打开 XCode（我为什么这么熟练呢…）启动项目，开始继续完成产品大大昨天下达的任务。这时，一个枚举进入了我的视野范围内，枚举常量数据类型是 NSUInteger，哼哼，用表驱动法结合 rawValue 的方式，就能优雅地实现这个需求了，完美。</p>\n<p>然而，跑了一下居然发生了运行时错误炸掉了…没道理啊，这也能炸…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-59ea929cb1b4246e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"EyreFree 眉头一皱，发现事情并不简单\"></p>\n<p>点开这个枚举类型，仔细观察了起来…然后发现了一个坑…（应该是我年少无知…</p>\n<p>下面，我带着大家一起跳进这个坑…哦不，一起复现一下这个问题：</p>\n<h3 id=\"1-新建一个-OC-的-Pod-库\"><a href=\"#1-新建一个-OC-的-Pod-库\" class=\"headerlink\" title=\"1. 新建一个 OC 的 Pod 库\"></a>1. 新建一个 OC 的 Pod 库</h3><p>首先，我们需要新建一个 OC 的 Pod 库，然后在其中定义一个枚举类型，指定枚举值从 2 开始（反正不要是默认的 0 就行），大概这个样子就行了：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSUInteger</span>, TestEnum) &#123;</span><br><span class=\"line\">    TestEnumA = <span class=\"number\">2</span>,</span><br><span class=\"line\">    TestEnumB,</span><br><span class=\"line\">    TestEnumC,</span><br><span class=\"line\">    TestEnumD,</span><br><span class=\"line\">    TestEnumE,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> TestEnum EFTestEnumType;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2529d4f32de43374.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1\"></p>\n<h3 id=\"2-新建一个-Swift-工程\"><a href=\"#2-新建一个-Swift-工程\" class=\"headerlink\" title=\"2. 新建一个 Swift 工程\"></a>2. 新建一个 Swift 工程</h3><p>然后，我们再建一个新的 Swift 工程（没错，我司项目是 Swift 的…），在其中引入第一步建好的 CocoaPods 库。到这里，我们可以随便找个地方编写如下测试代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(EFTestEnumType.A.rawValue)</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<p>先不要执行蛤，大家按住 command 键点击 EFTestEnumType 进入类型定义可以看到如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TestEnum</span> : <span class=\"title\">UInt</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">A</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">B</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">C</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">D</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">E</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">EFTestEnumType</span> = <span class=\"type\">TestEnum</span></span><br></pre></td></tr></table></figure>\n<p>注意到了么，这里通过 Pod 库中的原始 OC 代码转化出的中间 Swift 代码的枚举中，并没有指定枚举值的起始值。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-b2e7873bd027cbed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2\"></p>\n<h3 id=\"3-编译运行并观察\"><a href=\"#3-编译运行并观察\" class=\"headerlink\" title=\"3. 编译运行并观察\"></a>3. 编译运行并观察</h3><p>然后编译运行，观察测试代码的输出会发现，EFTestEnumType.A.rawValue 的值的确是 2…所以，我在主工程中查看了某个枚举类型的定义，而没有注意到 Pod 库中枚举的原始定义是指定了枚举值的起始值的（很好奇为啥这里不一样，搞这么多幺蛾子…），然后就炸了，数组下标越界，初始化失败，随便来一个都会炸掉了…</p>\n<p>小伙伴们看懂了么…（嘛，如果这是常识的话…请告诉我我好删掉这篇水文…逃…</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-94efe02f989268af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>PS: 文中所用代码可以在 <a href=\"https://github.com/EyreFree/EFEnumPitDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFEnumPitDemo</a> 找到。</p>\n<hr>\n<p>更新：</p>\n<p>感谢 <a href=\"http://www.weibo.com/kemchenj\" target=\"_blank\" rel=\"noopener\">@kemchenj</a> 大大的提示，这里应该需要将鼠标悬浮到枚举值之上才可以查看到对应的原始值，反正我还是觉得坑…[摊手]</p>\n<blockquote>\n<p>@kemchenj：看了很久之后终于懂了，其实主要是 Interface 的锅，Interface 里不会显示枚举值的具体原始值，跟 OC 转 Swift 无关，你可以在 Swift 里定义一个相同的枚举，然后进 Xcode 菜单 -&gt; Navigate -&gt; Jump To Generated Interface，这样就可以看到这个 swift 文件的 Interface 了，也不会具体的 rawValue</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-afadd3defe195ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/08/15/2017-08-15-Swift-Enum/\">http://www.eyrefree.org/2017/08/15/2017-08-15-Swift-Enum/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Swift"],"tags":["Enum"]},{"title":"GitHub Wiki 页面的添加和设置","url":"http://www.eyrefree.org/2017/07/06/GitHub-Wiki-Introduction/","content":"<p>目前大家在 GitHub 上发布的项目，一般使用 Markdown 来编写项目文档和 README.md 等。Markdown 一般情况下能够满足我们的文档编写需求，如果使用得当的话，效果也非常棒。不过当项目文档比较长的时候，阅读体验可能就不是那么理想了，这种情况我想大家应该都曾经遇到过。</p>\n<p>GitHub 每一个项目都有一个独立完整的 Wiki 页面，我们可以用它来实现项目信息管理，为项目提供更加完善的文档。我们可以把 Wiki<br> 作为项目文档的一个重要组成部分，将冗长、具体的文档整理成 Wiki，将精简的、概述性的内容，放到项目中或是 README.md 里。</p>\n<h2 id=\"一-Wiki-简介\"><a href=\"#一-Wiki-简介\" class=\"headerlink\" title=\"一. Wiki 简介\"></a>一. Wiki 简介</h2><blockquote>\n<p>Wiki 是一种在网络上开放且可供多人协同创作的超文本系统，由沃德·坎宁安于 1995 年首先开发，这种超文本系统支持面向社群的协作式写作，同时也包括一组支持这种写作。Wiki 站点可以有多人（甚至任何访问者）维护，每个人都可以发表自己的意见，或者对共同的主题进行扩展或者探讨。</p>\n</blockquote>\n<p>上面这段描述引用自 <a href=\"http://baike.baidu.com/item/wiki/97755\" target=\"_blank\" rel=\"noopener\">百度百科</a>，嗯，实际上百度百科本身也是一个 Wiki，最著名的 Wiki 大概是是 <a href=\"https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91\" target=\"_blank\" rel=\"noopener\">维基百科</a> 了吧。</p>\n<p>然后 Wiki 页面效果大概可以参考 <a href=\"https://github.com/onevcat/Kingfisher/wiki\" target=\"_blank\" rel=\"noopener\">Kingfisher</a>，看起来还是非常棒的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-51b1b1ab89fc7d4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Kingfisher 的 Wiki 页面\"></p>\n<h2 id=\"二-Wiki-的开启和关闭\"><a href=\"#二-Wiki-的开启和关闭\" class=\"headerlink\" title=\"二. Wiki 的开启和关闭\"></a>二. Wiki 的开启和关闭</h2><p>GitHub 项目的 Wikis 功能默认是开启的，如果你没有找到 Wiki 选项卡，可能是因为该项目关闭了 Wikis 选项，在项目 Setting 中将其选中即可，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-55bf326e65831bdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Wikis 开关\"></p>\n<p>如果在之后某一天决定不再继续使用 Wikis 也可以通过取消该功能的勾选将其关闭，即使已经添加了 Wiki 页面也可以。并且会保存之前的 Wiki 页面内容，即关闭 Wiki 功能并不会清除内容，还可以随时再打开。</p>\n<h2 id=\"三-创建和编辑页面\"><a href=\"#三-创建和编辑页面\" class=\"headerlink\" title=\"三. 创建和编辑页面\"></a>三. 创建和编辑页面</h2><p>GitHub 的 Wiki 页面在如图所示选项卡下，默认应该是开启的，但是是空的，我们可以点击中间那个绿色的 <code>Create the first page</code> 按钮创建一个页面。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-fadd06a0b50a299b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建 Wiki 页面\"></p>\n<p>如果你没有找到 Wiki 选项卡，可能是因为该项目关闭了 Wikis 选项，在项目 Setting 中将其选中即可，参考上文内容。</p>\n<p>点击 <code>Create the first page</code> 按钮后会进入 Create new page 页面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-b5082f398cf04cd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Create new page\"></p>\n<p>从上往下进行介绍，顶部的输入框是页面标题；Edit mode 控制编辑页面的标记语言类型，这里默认的是 Markdown，支持的类型如下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-8955fdc3169fe36c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Edit mode 下拉列表\"></p>\n<p>中间的是页面内容，我们可以用 Edit mode 选择的语法在这里编写页面内容；底部编辑框用来输入本次编辑保存时的提交信息；编辑完成后点击 <code>Save Page</code> 按钮即可保存，唔，保存前可以先切换到 Preview 选项卡下进行预览，看一下效果是否是自己想要的。</p>\n<p>然后保存我们新建的页面，大概会是如下效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f3bbc7ae3f87d86a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建页面完成\"></p>\n<p>点击右上角的 <code>Edit</code> 按钮可以对当前页面进行编辑，也可以点击 <code>New Page</code> 按钮继续添加新的页面。</p>\n<p>唔，这里有一点需要注意的是，默认的主页标题必须为 Home，如果不存在标题为 Home 的页面，切换到项目的 Wiki 选项卡时，会显示一个所有页面组成的列表。所以我们的主页必须以 Home 为标题。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-ac17b4a9220d4503.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>目前好像没什么内容，感觉比较空额，不过没关系，接下来我们会一步步完善。</p>\n<h2 id=\"四-添加页脚\"><a href=\"#四-添加页脚\" class=\"headerlink\" title=\"四. 添加页脚\"></a>四. 添加页脚</h2><p>点击 Wiki 页面底部的 <code>Add a custom footer</code> 按钮，进入新建页脚页面，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-898c1c9b8ff154b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Add a custom footer\"></p>\n<p>新建页脚页面实际上就是一个普通的 Create new page 页面，不过标题需要设为 _Footer 并且不能修改（如果修改了就不会被当作页脚来处理了）。</p>\n<p>我们可以参考 Kingfisher 的页脚代码，放置多个超链接在这里供读者在阅读完某一页后快速跳转到关键的章节或页面去，具体代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">Installation</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/Installation-Guide</span>) - [<span class=\"string\">Cheat Sheet</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet</span>) - [<span class=\"string\">FAQ</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/FAQ</span>) - [<span class=\"string\">API Reference</span>](<span class=\"link\">http://onevcat.github.io/Kingfisher/</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-ff95cc5b1f8caeb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Kingfisher 页脚效果\"></p>\n<p>当然也可以放一些奇怪的东西，比如，这样的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-58c20385b24679b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"+1s\"></p>\n<p>如上图所示，点击页脚右侧的编辑按钮，就可以对页脚进行编辑啦，很方便。</p>\n<h2 id=\"五-添加侧边栏\"><a href=\"#五-添加侧边栏\" class=\"headerlink\" title=\"五. 添加侧边栏\"></a>五. 添加侧边栏</h2><p>点击右侧的 <code>Add a custom sidebar</code> 按钮可以添加侧边栏，和页脚同理，页面名为特殊的 _Sidebar：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d71291cb72c041e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Add a custom sidebar\"></p>\n<p>我们可以参考 Kingfisher 的侧边栏实现，代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## Getting Started</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">Getting Started with Kingfisher</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/Getting-Started-with-Kingfisher</span>)</span><br><span class=\"line\"><span class=\"code\">    * [Install Kingfisher](https://github.com/onevcat/Kingfisher/wiki/Installation-Guide)</span></span><br><span class=\"line\"><span class=\"code\">    * [Cheat Sheet](https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet)</span></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">API Reference</span>](<span class=\"link\">http://onevcat.github.io/Kingfisher/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Migration Guide</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">3.0 Migration Guide</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/Kingfisher-3.0-Migration-Guide</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">2.0 Migration Guide</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/Kingfisher-2.0-Migration-Guide</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Communication</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">FAQ</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/wiki/FAQ</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">Ask a question</span>](<span class=\"link\">http://stackoverflow.com/search?q=kingfisher</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">Submit an issue</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/issues/new</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">Open a pull request</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/compare</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Information</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">Change Log</span>](<span class=\"link\">https://github.com/onevcat/Kingfisher/blob/master/CHANGELOG.md</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-eb156bb5531e33ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Kingfisher 的侧边栏\"></p>\n<p>这里的话可以自己适当摸索一下，调整标题层级等样式，以获得一个自己比较满意的展示效果。同样的，点击侧边栏右上角的编辑按钮可以对快速侧边栏进行在线编辑。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-9935667a3e9db865.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"侧边栏编辑按钮\"></p>\n<h2 id=\"六-查看编辑历史\"><a href=\"#六-查看编辑历史\" class=\"headerlink\" title=\"六. 查看编辑历史\"></a>六. 查看编辑历史</h2><p>进入某个页面的编辑页面，点击右上角的 <code>Page History</code> 按钮，可以查看该页面的编辑历史，如下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4b8793bbd61f8087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Page History 按钮\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f4738bce2c4201fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编辑历史页面\"></p>\n<h2 id=\"七-权限控制\"><a href=\"#七-权限控制\" class=\"headerlink\" title=\"七. 权限控制\"></a>七. 权限控制</h2><p>那么问题来了，既然是 Wiki 的话，为啥以上这些内容完全是项目所有者一个人手撸呢，完全没有体现出「多人协作」的特性啊喂。</p>\n<p>嗯，GitHub Wiki 是可以开放给所有人编辑权限的，不过默认是只有项目所有者和合作者才有权限编辑的，只要到 Setting 中将 Restrict editing to collaborators only 选项去除勾选即可。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-eeda3279fe26cc8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Restrict editing to collaborators only\"></p>\n<p>这样的话，只要有 GitHub 账号的用户，都可以对该项目的 Wiki 进行编辑。如果怕被胡乱篡改，不想开放编辑权限的话，还是保持勾选好了。</p>\n<h2 id=\"八-本地编辑\"><a href=\"#八-本地编辑\" class=\"headerlink\" title=\"八. 本地编辑\"></a>八. 本地编辑</h2><p>唔，上文内容一直在介绍 Wiki 的在线编辑，实际上 Wiki 是一个单独的 Git 仓库，可以 Clone 到本地进行操作</p>\n<h3 id=\"1-Wiki-仓库下载\"><a href=\"#1-Wiki-仓库下载\" class=\"headerlink\" title=\"1. Wiki 仓库下载\"></a>1. Wiki 仓库下载</h3><p>细心的同学应该已经注意到了，Wiki 的右下角处有当前 Wiki 的 Git 仓库地址（我们也可以通过该方法下载他人所属的 Wiki 页面的源代码）：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-23f30e41d4d6981b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Wiki 仓库地址\"></p>\n<p>Kingfisher 的 Wiki 仓库结构如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-6795f9e7aaa9440a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Kingfisher Wiki 结构\"></p>\n<p>接下来就可以直接对 Wiki 页面源文件进行编辑了，实际上就是一堆 Markdown 文件的组合（或者其他比标记语言，看你选的是啥了）。</p>\n<h3 id=\"2-本地预览\"><a href=\"#2-本地预览\" class=\"headerlink\" title=\"2. 本地预览\"></a>2. 本地预览</h3><p>我们在本地手动编辑编辑完成后，只能通过 push 到 GitHub 的方式进行预览，非常不方便，这个时候，就需要借助一个叫 <a href=\"https://github.com/gollum/gollum\" target=\"_blank\" rel=\"noopener\">gollum</a> 的工具了。</p>\n<p>Gollum 是 GitHub 上用到的 Wiki 引擎，使用它可以在本地上搭建一个类似的GitHub Wiki 的网站，对本地的 Wiki 页面进行快速预览。执行以下命令即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gem install gollum</span><br></pre></td></tr></table></figure>\n<p>安装完成后，将路径切换到 Wiki 的 Git 仓库下然后执行 <code>gollum</code> 命令，然后访问 <a href=\"http://127.0.0.1:4567/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:4567/</a> 即可进行预览。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-34b7d6d79ffd94cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Gollum 预览\"></p>\n<h2 id=\"九-其他\"><a href=\"#九-其他\" class=\"headerlink\" title=\"九. 其他\"></a>九. 其他</h2><p>Wiki 不仅仅可以作为项目辅助工具来用，你也可以把它当作一个个人信息知识库来使用，不需要搭建，不需要部署，无需付费，方便快捷，更多功鞥大家可以自行开发。</p>\n<p>如果你觉得上文的报道，哦不，描述可能有偏差，<a href=\"https://help.github.com/categories/wiki/\" target=\"_blank\" rel=\"noopener\">GitHub Wiki 的帮助文档</a> 也许能给你带来一些帮助。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/07/06/2017-07-06-GitHub-Wiki-Introduction/\">http://www.eyrefree.org/2017/07/06/2017-07-06-GitHub-Wiki-Introduction/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["GitHub"],"tags":["Wiki"]},{"title":"GitHub 项目徽章的添加和设置","url":"http://www.eyrefree.org/2017/05/01/GitHub-Badge-Introduction/","content":"<p>许多同学在 GitHub 上发布了自己的开源项目，有辛苦开发的实用工具、构思巧妙的开源库、别具一格的 App、精心整理的示例代码等等。</p>\n<p>自己花了大把时间和精力构建的项目，当然是希望能够得到更多人的关注，被更多的人知晓或者使用。如何更好滴向他人展示自己的项目，介绍项目相关信息呢？用一些通用的小图标来描述项目相关信息不失为一种很棒的选择，几个好看的徽标能够为自己的项目说明增色不少！</p>\n<h1 id=\"一-徽标简介\"><a href=\"#一-徽标简介\" class=\"headerlink\" title=\"一. 徽标简介\"></a>一. 徽标简介</h1><p>GitHub 项目的 README.md 中可以添加徽章（Badge）对项目进行标记和说明，这些好看的小图标不仅简洁美观，而且还包含了清晰易读的信息。</p>\n<p>徽标主要由图片和对应的链接（当然，你可以不填）组成，徽标图片的话一般由左半部分的名称和右半部分的值组成。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-3489b47031ed2017.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"一枚普通的徽标\"></p>\n<p>GitHub 徽标的官方网站是 <a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">http://shields.io/</a>，我萌可以在官网预览绝大部分的徽标样式，然后选择自己喜欢的（当然首先需要适用于自己的目标项目）徽标，添加到自己的项目文档中去。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-b2676f0571e5684c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Shields.IO\"></p>\n<p>下面贴出几个栗子以供参考：</p>\n<ul>\n<li>正在学习的 ReSwift</li>\n</ul>\n<p><a href=\"https://travis-ci.org/ReSwift/ReSwift\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/ReSwift/ReSwift/master.svg?style=flat-square\" alt=\"Build Status\"></a> <a href=\"http://codecov.io/github/ReSwift/ReSwift\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/codecov/c/github/ReSwift/ReSwift.svg?style=flat-square\" alt=\"Code coverage status\"></a> <a href=\"https://cocoapods.org/pods/ReSwift\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/v/ReSwift.svg?style=flat-square\" alt=\"CocoaPods Compatible\"></a> <a href=\"https://github.com/ReSwift/ReSwift/blob/master/LICENSE.md\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/platform-ios%20%7C%20osx%20%7C%20tvos%20%7C%20watchos-lightgrey.svg?style=flat-square\" alt=\"Platform support\"></a> <a href=\"https://github.com/ReSwift/ReSwift/blob/master/LICENSE.md\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"License MIT\"></a></p>\n<ul>\n<li>大名鼎鼎的 Kingfisher</li>\n</ul>\n<p align=\"center\"><br><br><img src=\"https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png\" alt=\"Kingfisher\" title=\"Kingfisher\" width=\"557\"><br><br></p>\n\n<p align=\"center\"><br><a href=\"https://travis-ci.org/onevcat/Kingfisher\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/onevcat/Kingfisher/master.svg\"></a><br><a href=\"https://github.com/Carthage/Carthage/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"></a><br><a href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/SPM-ready-orange.svg\"></a><br><a href=\"http://onevcat.github.io/Kingfisher/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat\"></a><br><a href=\"https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat\"></a><br><a href=\"http://onevcat.github.io/Kingfisher/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat\"></a><br><a href=\"https://codebeat.co/projects/github-com-onevcat-kingfisher\" target=\"_blank\" rel=\"noopener\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/assets/svg/badges/A-398b39-669406e9e1b136187b91af587d4092b0160370f271f66a651f444b990c2730e9.svg\"></a><br><img src=\"https://img.shields.io/badge/made%20with-%3C3-orange.svg\"><br></p>\n\n<ul>\n<li>家喻户晓的 Alamofire</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Alamofire/Alamofire/assets/alamofire.png\" alt=\"Alamofire: Elegant Networking in Swift\"></p>\n<p><a href=\"https://travis-ci.org/Alamofire/Alamofire\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/Alamofire/Alamofire.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://img.shields.io/cocoapods/v/Alamofire.svg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg\" alt=\"CocoaPods Compatible\"></a><br><a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage Compatible\"></a><br><a href=\"http://cocoadocs.org/docsets/Alamofire\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/p/Alamofire.svg?style=flat\" alt=\"Platform\"></a><br><a href=\"http://twitter.com/AlamofireSF\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/twitter-@AlamofireSF-blue.svg?style=flat\" alt=\"Twitter\"></a><br><a href=\"https://gitter.im/Alamofire/Alamofire?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/Alamofire/Alamofire.svg\" alt=\"Gitter\"></a></p>\n<p>徽标并不是添加的越多越好，合理地选择适合项目的徽标做具有针对性地添加才是理性的做法，像 <a href=\"https://github.com/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\">EFQRCode</a> 这样堆积徽标的无脑行为并不是十分可取，在这里提出这一点，希望大家不要盲目追求数量。</p>\n<ul>\n<li>腊鸡 EFQRCode</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/assets/EFQRCode.jpg\" alt=\"\"></p>\n<p align=\"center\"><br><a href=\"https://travis-ci.org/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\"><img src=\"http://img.shields.io/travis/EyreFree/EFQRCode.svg\"></a><br><a href=\"https://codecov.io/gh/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codecov.io/gh/EyreFree/EFQRCode/branch/master/graph/badge.svg\"></a><br><a href=\"https://github.com/Carthage/Carthage/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"></a><br><a href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/SPM-ready-orange.svg\"></a><br><a href=\"http://cocoapods.org/pods/EFQRCode\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/v/EFQRCode.svg?style=flat\"></a><br><a href=\"http://cocoapods.org/pods/EFQRCode\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/p/EFQRCode.svg?style=flat\"></a><br><a href=\"https://github.com/apple/swift\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/language-swift-orange.svg\"></a><br><a href=\"https://codebeat.co/projects/github-com-eyrefree-efqrcode-master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codebeat.co/badges/01f53e9d-542c-4c22-adc7-d1dbff0d2a6f\"></a><br><a href=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/l/EFQRCode.svg?style=flat\"></a><br><a href=\"https://gitter.im/EFQRCode/Lobby\" target=\"_blank\" rel=\"noopener\"><img src=\"https://badges.gitter.im/EyreFree/EFQRCode.svg\"></a><br><a href=\"https://twitter.com/EyreFree777\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?style=flat\"></a><br><a href=\"http://weibo.com/eyrefree777\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=flat\"></a><br></p>\n\n<p>当然如果个人比较喜欢的话，请随意添加。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-bd12202658a6a391.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请随意\"></p>\n<h1 id=\"二-常用徽标添加\"><a href=\"#二-常用徽标添加\" class=\"headerlink\" title=\"二. 常用徽标添加\"></a>二. 常用徽标添加</h1><p>常用的徽标主要有持续集成状态、项目版本信息、代码测试覆盖率、项目支持平台、项目语言、代码分析等，下面我萌就来依次添加这些可爱的徽标！</p>\n<h2 id=\"1-持续集成状态\"><a href=\"#1-持续集成状态\" class=\"headerlink\" title=\"1. 持续集成状态\"></a>1. 持续集成状态</h2><p>持续集成的话推荐 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a>，针对开源项目免费，所以你的私有项目无法享受到免费的持续构建服务，不过我们的目的貌似就是给开源项目添加徽标。</p>\n<p>同类型的产品还有 <a href=\"https://circleci.com\" target=\"_blank\" rel=\"noopener\">CircleCI</a>，不过目前跑 OS X 项目需要额外付费，免费版提供一个 Linux 项目队列，作为非付费用户在这里不多做评价，大佬们可以自己试下。其他还有诸如 <a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">Jenkins</a><br> 和 <a href=\"https://codeship.com/\" target=\"_blank\" rel=\"noopener\">Codeship</a> 等，大家可以在 <a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">http://shields.io/</a> 的 <code>Build</code> 这一栏自行翻阅。</p>\n<p>接下来就是 Travis CI 的集成工作了，首先打开 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org/</a> 注册一个 Travis-CI 账号，可以通过 GitHub 账户直接登陆。</p>\n<p>然后参考 <a href=\"https://docs.travis-ci.com/user/getting-started/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，根据你的项目语言或类型选择具体的配置方式，主要就是在项目中添加一个 <code>.travis.yml</code> 配置文件，告诉 Travis CI 怎样对你的项目进行编译或测试。这里有一个 Swift CocoaPods 库的集成示例，可以参考一下：<a href=\"http://www.jianshu.com/p/beaa9ec9183d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/beaa9ec9183d</a>。</p>\n<p>然后徽标图片地址是这个样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://img.shields.io/travis/&#123;GitHub 用户名&#125;/&#123;项目名称&#125;.svg</span><br></pre></td></tr></table></figure>\n<p>将上面 URL 中的 {GitHub 用户名} 和 {项目名称} 替换为你的即可，再加上该项目在 Travis CI 上的地址，以 Alamofire 为例，最后集成完成的 Markdown 代码和效果大概是这个样子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![</span>](<span class=\"link\">https://travis-ci.org/Alamofire/Alamofire.svg?branch=master</span>)](<span class=\"link\">https://travis-ci.org/Alamofire/Alamofire</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://travis-ci.org/Alamofire/Alamofire\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/Alamofire/Alamofire.svg?branch=master\" alt=\"\"></a></p>\n<p>当然如果你的编译没跑过或者发生错误之类的，会出现其他的状态，比如酱紫的：</p>\n<p><img src=\"https://img.shields.io/codeship/d6c1ddd0-16a3-0132-5f85-2e35c05e22b1.svg\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/vso/build/larsbrinkhoff/953a34b9-5966-4923-a48a-c41874cfb5f5/1.svg\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/snap-ci/ThoughtWorksStudios/eb_deployer/master.svg\" alt=\"\"></p>\n<p>这里需要指出的是，开源项目的 Travis CI 也是公开的，包括日志和历史记录在内，都是针对所有人可见的，所以小伙伴们一定不要把密码、私钥等重要信息暴露了。</p>\n<h2 id=\"2-项目下载量\"><a href=\"#2-项目下载量\" class=\"headerlink\" title=\"2. 项目下载量\"></a>2. 项目下载量</h2><p>项目被下载的次数，这个的话各个平台的统计都是独立的，比如发布在 CocoaPods 的项目下载量徽标图片地址如下，以 AFNetworking 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">总下载量：https://img.shields.io/cocoapods/dt/AFNetworking.svg</span><br><span class=\"line\">月下载量：https://img.shields.io/cocoapods/dm/AFNetworking.svg</span><br><span class=\"line\">周下载量：https://img.shields.io/cocoapods/dw/AFNetworking.svg</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"https://img.shields.io/cocoapods/dt/AFNetworking.svg\" alt=\"\"><br><img src=\"https://img.shields.io/cocoapods/dm/AFNetworking.svg\" alt=\"\"><br><img src=\"https://img.shields.io/cocoapods/dw/AFNetworking.svg\" alt=\"\"></p>\n<p>如果你的库已经发布到 CocoaPods 的话，我们只要把上面的 AFNetworking 改为自己的项目名称即可。更多其他发布方式如 apm、npm、Gem 等可查阅 <a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">http://shields.io/</a> 的 <code>Downloads</code> 一栏。</p>\n<h2 id=\"3-项目版本信息\"><a href=\"#3-项目版本信息\" class=\"headerlink\" title=\"3. 项目版本信息\"></a>3. 项目版本信息</h2><p>这个的话，因为我的 iOS 库是发布在 CocoaPods 的，我用的是 CocoaPods 提供的，URL 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/cocoapods/v/&#123;项目名称&#125;.svg?style=flat</span><br></pre></td></tr></table></figure>\n<p>以 Alamofire 为例，Markdown 代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat\" alt=\"\"></p>\n<p>如果你的库已经发布到 CocoaPods 的话，我们只要把上面的 Alamofire 改为自己的项目名称即可。更多其他发布方式如 apm、npm、Gem 等可查阅 <a href=\"http://shields.io/\" target=\"_blank\" rel=\"noopener\">http://shields.io/</a> 的 <code>Version</code> 一栏，这里提供一个可以查询已发布的各种包的版本号徽标地址的网站 <a href=\"https://badge.fury.io/\" target=\"_blank\" rel=\"noopener\">https://badge.fury.io/</a>，可以轻松获取对应包的徽标代码，如下图所示</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a6257e9b997c4a7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如果你的发布工具不提供项目版本信息的徽标的话，可以用自定义徽标的方式实现，具体可参考下文自定义徽标一节，这里给出徽标代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/&#123;发布方式&#125;-&#123;版本号&#125;-519dd9.svg</span><br></pre></td></tr></table></figure>\n<p>将 {发布方式} 和 {版本号} 替换为你的项目目前的发布方式和版本号即可，例如通过 360 应用商店发布，发布版本号为 v1.2.3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/360_store-v1.2.3-519dd9.svg)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/360_store-v1.2.3-519dd9.svg\" alt=\"\"></p>\n<h2 id=\"4-代码测试覆盖率\"><a href=\"#4-代码测试覆盖率\" class=\"headerlink\" title=\"4. 代码测试覆盖率\"></a>4. 代码测试覆盖率</h2><p>代码测试覆盖率的话推荐 <a href=\"https://codecov.io/\" target=\"_blank\" rel=\"noopener\">Codecov</a>。同类产品有 <a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"noopener\">Coveralls</a>，不过网站风格略复古，文档也不详细，安装过程也复杂，需要配置一大堆奇怪的东西，遂不推荐。</p>\n<p>同样的，Codecov 可以直接使用 GitHub 账号登陆，需要结合 Travis CI 使用，在 <code>.travis.yml</code> 文件中添加一个回调触发 Codecov 的刷新，同时需要打开工程中的测试覆盖信息收集，XCode 中的设置如下</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a1fceb0028ce645a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>更多信息可参考 <a href=\"https://docs.codecov.io/docs\" target=\"_blank\" rel=\"noopener\">官方文档</a> 和 <a href=\"https://github.com/codecov\" target=\"_blank\" rel=\"noopener\">示例</a>。</p>\n<p>然后，我们就可以在 Setting 中的 Badge 一栏找到添加图标的代码啦：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-95306d0d263235c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>最终效果如下：</p>\n<p><a href=\"https://codecov.io/gh/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codecov.io/gh/EyreFree/EFQRCode/branch/master/graph/badge.svg\" alt=\"codecov\"></a></p>\n<h2 id=\"5-项目支持平台\"><a href=\"#5-项目支持平台\" class=\"headerlink\" title=\"5. 项目支持平台\"></a>5. 项目支持平台</h2><p>这个的话，因为我的 iOS 库是发布在 CocoaPods 的，我用的是 CocoaPods 提供的，URL 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/cocoapods/p/&#123;项目名称&#125;.svg?style=flat</span><br></pre></td></tr></table></figure>\n<p>以 Alamofire 为例，Markdown 代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/p/Alamofire.svg?style=flat)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/p/Alamofire.svg?style=flat\" alt=\"\"></p>\n<p>如果你的库已经发布到 CocoaPods 的话，我们只要把上面的 Alamofire 改为自己的项目名称即可。如果你的发布工具不提供项目支持平台的徽标的话，可以用自定义徽标的方式实现，具体可参考下文自定义徽标一节，这里给出徽标代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/platform-&#123;项目支持平台&#125;-lightgrey.svg</span><br></pre></td></tr></table></figure>\n<p>将 {项目支持平台} 替换为你的项目目前的版本号即可，例如 ios：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/platform-ios-lightgrey.svg)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/platform-ios-lightgrey.svg\" alt=\"\"></p>\n<h2 id=\"6-项目语言\"><a href=\"#6-项目语言\" class=\"headerlink\" title=\"6. 项目语言\"></a>6. 项目语言</h2><p>嗯，这个完全是用自定义徽标实现的，具体可参考下文自定义徽标一节，这里给出徽标代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/language-&#123;项目语言&#125;-&#123;背景色&#125;.svg</span><br></pre></td></tr></table></figure>\n<p>将 {项目语言} 和 {背景色} 替换为你的项目目前的语言和你想要的背景色即可，这里以 Swift 为例，我们用上 Swift 官方橘色：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/language-swift-orange.svg)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/language-swift-orange.svg\" alt=\"\"></p>\n<p>完美!</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7aaab9c7de41a78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Swift\"></p>\n<h2 id=\"7-代码分析\"><a href=\"#7-代码分析\" class=\"headerlink\" title=\"7. 代码分析\"></a>7. 代码分析</h2><blockquote>\n<p><a href=\"https://codebeat.co/\" target=\"_blank\" rel=\"noopener\">Codebeat</a> 可以计算全局项目评分、GPA、和不同命名空间的等级来帮助您量化技术债务和发现重构机会，你唯一需要做的就是连接你的 Github 库，获得反馈就好了。</p>\n</blockquote>\n<p>嗯，上面是官方自述，大概意思就是每次 push 或者 merge 之后会对代码进行分，给出评分，然后告诉你哪些地方复杂度过高需要进行重构之类的。用 GitHub 登陆后绑定项目即可，无需对原有项目进行修改（其实是 codebeat 在你的项目设置里加了一个 Webhook，通知它重新计算评分）。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-271c429613a8d34e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Webhooks\"></p>\n<p>照着引导巴拉巴拉一顿操作之后就可以获取图标啦，在项目的 Setting 中可以获取徽标代码，自己复制出来就可以。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-080b0705f241d072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Setting\"></p>\n<p>最终效果如下：</p>\n<p><a href=\"https://codebeat.co/projects/github-com-eyrefree-efqrcode-master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codebeat.co/badges/01f53e9d-542c-4c22-adc7-d1dbff0d2a6f\" alt=\"codebeat badge\"></a></p>\n<h2 id=\"8-开源协议类型\"><a href=\"#8-开源协议类型\" class=\"headerlink\" title=\"8. 开源协议类型\"></a>8. 开源协议类型</h2><p>这个的话，因为我的 iOS 库是发布在 CocoaPods 的，我用的是 CocoaPods 提供的，URL 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/cocoapods/l/&#123;项目名称&#125;.svg?style=flat</span><br></pre></td></tr></table></figure>\n<p>以 Alamofire 为例，Markdown 代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/l/Alamofire.svg?style=flat)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/l/Alamofire.svg?style=flat\" alt=\"\"></p>\n<p>如果你的库已经发布到 CocoaPods 的话，我们只要把上面的 Alamofire 改为自己的项目名称即可。如果你的发布工具不提供开源协议类型的徽标的话，可以用自定义徽标的方式实现，具体可参考下文自定义徽标一节，这里给出徽标代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/license-&#123;协议名称&#125;-000000.svg</span><br></pre></td></tr></table></figure>\n<p>将 {协议名称} 替换为你的项目所使用的协议名称即可，例如 MIT：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/license-MIT-000000.svg)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/license-MIT-000000.svg\" alt=\"\"></p>\n<h1 id=\"三-自定义徽标\"><a href=\"#三-自定义徽标\" class=\"headerlink\" title=\"三. 自定义徽标\"></a>三. 自定义徽标</h1><h2 id=\"1-标题／内容／颜色／链接\"><a href=\"#1-标题／内容／颜色／链接\" class=\"headerlink\" title=\"1. 标题／内容／颜色／链接\"></a>1. 标题／内容／颜色／链接</h2><p>如果以上这些徽标没有满足你的需求，我们还可以定制自己的个性化徽标，<code>shields.io</code> 提供了添加自定义徽标的功能，通过修改如下 URL 即可获取自定义徽标图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/&#123;徽标标题&#125;-&#123;徽标内容&#125;-&#123;徽标颜色&#125;.svg</span><br></pre></td></tr></table></figure>\n<p>{徽标标题}：徽标左半部分的文本（短线：–，下划线：__，空格： 或_）；<br>{徽标内容}：徽标右半部分的文本，同上；<br>{徽标颜色}：徽标右半部分背景颜色，可以是 red、green、blue 等颜色英文单词，也可以直接写十六进制的颜色值，如 ff69b4，示例如下：</p>\n<p><img src=\"https://img.shields.io/badge/color-brightgreen-brightgreen.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-green-green.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-yellowgreen-yellowgreen.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-yellow-yellow.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-orange-orange.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-red-red.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-lightgrey-lightgrey.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-blue-blue.svg?maxAge=2592000\" alt=\"\"><br><img src=\"https://img.shields.io/badge/color-ff69b4-ff69b4.svg?maxAge=2592000\" alt=\"\"></p>\n<p>将其中的 {徽标标题}、{徽标内容}、{徽标颜色} 分别替换为需要的内容即可，例如我的微博徽标图片地址如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://img.shields.io/badge/weibo-@EyreFree-red.svg</span><br></pre></td></tr></table></figure>\n<p>再结合我的微博地址 <a href=\"http://weibo.com/eyrefree777\" target=\"_blank\" rel=\"noopener\">http://weibo.com/eyrefree777</a> 后完整徽标代码和效果如下（如果这段代码用在 GitHub 的话，点击该徽标会打开对应的 URL 地址，即直接跳到我的微博）：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![</span>](<span class=\"link\">https://img.shields.io/badge/weibo-@EyreFree-red.svg</span>)](<span class=\"link\">http://weibo.com/eyrefree777</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://weibo.com/eyrefree777\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/weibo-@EyreFree-red.svg\" alt=\"\"></a></p>\n<p>同理我的推特徽标代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">![</span>](<span class=\"link\">https://img.shields.io/badge/twitter-@EyreFree777-blue.svg</span>)](<span class=\"link\">https://twitter.com/EyreFree777</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://twitter.com/EyreFree777\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/twitter-@EyreFree777-blue.svg\" alt=\"\"></a></p>\n<h2 id=\"2-附加参数\"><a href=\"#2-附加参数\" class=\"headerlink\" title=\"2. 附加参数\"></a>2. 附加参数</h2><p>可以在徽标图片 URL 后面带上一些参数来控制徽标的样式，这一部分是可选的，不想折腾的话默认的样式就挺好了，可以不看这里的。</p>\n<p>使用方法就是在徽标图片 URL 后面跟上 <code>?{参数名}={参数值}</code></p>\n<p>多个参数联用的话就是 <code>?{参数名1}={参数值1}&amp;{参数名2}={参数值2}...</code></p>\n<h3 id=\"1-style\"><a href=\"#1-style\" class=\"headerlink\" title=\"1. style\"></a>1. style</h3><p>style 控制徽标的主体样式，有四种，不设置的话默认是 <code>flat</code> 的，示例代码和效果如下：</p>\n<h4 id=\"plastic\"><a href=\"#plastic\" class=\"headerlink\" title=\"plastic\"></a>plastic</h4><p>塑料？大概是指立体效果</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?style=plastic)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?style=plastic\" alt=\"\"></p>\n<h4 id=\"flat\"><a href=\"#flat\" class=\"headerlink\" title=\"flat\"></a>flat</h4><p>正常的样子，扁平化</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat\" alt=\"\"></p>\n<h4 id=\"flat-square\"><a href=\"#flat-square\" class=\"headerlink\" title=\"flat-square\"></a>flat-square</h4><p>扁平化 + 去除圆角</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square\" alt=\"\"></p>\n<h4 id=\"social\"><a href=\"#social\" class=\"headerlink\" title=\"social\"></a>social</h4><p>社交样式</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?style=social)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?style=social\" alt=\"\"></p>\n<h3 id=\"2-label\"><a href=\"#2-label\" class=\"headerlink\" title=\"2. label\"></a>2. label</h3><p>该参数可以用来强制覆盖原有的徽标标题文字，效果如下，原有的 pod 字样已经被覆盖了：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?label=healthinesses)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?label=healthinesses\" alt=\"\"></p>\n<h3 id=\"3-logo\"><a href=\"#3-logo\" class=\"headerlink\" title=\"3. logo\"></a>3. logo</h3><p>该参数可以用来为徽标添加 logo，logo 图片会出现在左半部分的徽标标题左边，logo 图片高度必须 ≥ 14px，logo 图片需要先转为 base64 编码然后直接插入到 URL 中（可以用 <a href=\"http://b64.io/\" target=\"_blank\" rel=\"noopener\">http://b64.io/</a> 将图片转为 base64 编码的字符串），格式如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?logo=&#123;base64 编码后的图片数据&#125;</span><br></pre></td></tr></table></figure>\n<p>示例代码和效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/gadget-Raspberry%20Pi-pink.svg?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAACJ0lEQVR4AW2Qy0tUfxjGv3Pm3O%2BXGec3jnMZZ9Rxxp%2BWkYpJ2QkVIzDpkkoGBSOpBZmWgRIkWSs30SJchC26B9aijKLaFET9Be1q46ayRVDU5uk9Q8seeOG8X573eT%2FnZbwQqo5l5Rube52PQdH3BcaY4SbEiy2%2B%2FWFLv7ueblJv0luJmRHBHzqfwuyDRkzfKqB8pRZeQnwzuZynvgHTtwsYvZRBs2%2BVGSU5nfsjX2bocexqDsMLKXgZCQfmkzi6lK0EDJxOfNJdoYORQl5O3OeXY5%2BH59PI5XXUMh3RuIQR6v2J2Ld8h3488FXMBWb2TJkNPw9GUzirF3HX2oZFrQUD0Rqc84rfVcaPs0D%2FcTK%2FQ6y6N6eVsJX3MCglcUzJYVytw6CYxKRSj1Elu0bWCBNCXCnPGz96pTieOTvxyN6OIm%2Fhid2Nx1SzWhGxsLwR4aQ9rFOMPl8lwwQlvXZ78NLZhRbBwZrTjReOjzuENKc1YUTOrLJ%2BKf7%2BsrEJhIL7dhfOaI34n7cxpRWwYnbghFqPMmENyelXzOLE0d1SNbrFGOKcgmDwnduH61Y7zJCAvVINDisZJMPqNEuHVeOQnPr11u3FESWLa2ZbBecp8VNaZXBBb15njHUxmxPC7YK3uGS0YkzNo1VwcZJWtwkeThHKMg33SfEVMqsskBeSjLqwMZYKa18ppXKRwESIv0u8NVPFyRb7hxK0ZYX%2BfIPO95D6KBXH%2FuoPnu%2FBfZ7Zxb0AAAAASUVORK5CYII)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/gadget-Raspberry%20Pi-pink.svg?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAACJ0lEQVR4AW2Qy0tUfxjGv3Pm3O%2BXGec3jnMZZ9Rxxp%2BWkYpJ2QkVIzDpkkoGBSOpBZmWgRIkWSs30SJchC26B9aijKLaFET9Be1q46ayRVDU5uk9Q8seeOG8X573eT%2FnZbwQqo5l5Rube52PQdH3BcaY4SbEiy2%2B%2FWFLv7ueblJv0luJmRHBHzqfwuyDRkzfKqB8pRZeQnwzuZynvgHTtwsYvZRBs2%2BVGSU5nfsjX2bocexqDsMLKXgZCQfmkzi6lK0EDJxOfNJdoYORQl5O3OeXY5%2BH59PI5XXUMh3RuIQR6v2J2Ld8h3488FXMBWb2TJkNPw9GUzirF3HX2oZFrQUD0Rqc84rfVcaPs0D%2FcTK%2FQ6y6N6eVsJX3MCglcUzJYVytw6CYxKRSj1Elu0bWCBNCXCnPGz96pTieOTvxyN6OIm%2Fhid2Nx1SzWhGxsLwR4aQ9rFOMPl8lwwQlvXZ78NLZhRbBwZrTjReOjzuENKc1YUTOrLJ%2BKf7%2BsrEJhIL7dhfOaI34n7cxpRWwYnbghFqPMmENyelXzOLE0d1SNbrFGOKcgmDwnduH61Y7zJCAvVINDisZJMPqNEuHVeOQnPr11u3FESWLa2ZbBecp8VNaZXBBb15njHUxmxPC7YK3uGS0YkzNo1VwcZJWtwkeThHKMg33SfEVMqsskBeSjLqwMZYKa18ppXKRwESIv0u8NVPFyRb7hxK0ZYX%2BfIPO95D6KBXH%2FuoPnu%2FBfZ7Zxb0AAAAASUVORK5CYII\" alt=\"\"></p>\n<h3 id=\"4-logoWidth\"><a href=\"#4-logoWidth\" class=\"headerlink\" title=\"4. logoWidth\"></a>4. logoWidth</h3><p>该参数可以设置在上一个参数 logo 中添加的图标的宽度，设为 0 的话即为忽略该参数，示例代码和效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/gadget-Raspberry%20Pi-pink.svg?logoWidth=100&amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAACJ0lEQVR4AW2Qy0tUfxjGv3Pm3O%2BXGec3jnMZZ9Rxxp%2BWkYpJ2QkVIzDpkkoGBSOpBZmWgRIkWSs30SJchC26B9aijKLaFET9Be1q46ayRVDU5uk9Q8seeOG8X573eT%2FnZbwQqo5l5Rube52PQdH3BcaY4SbEiy2%2B%2FWFLv7ueblJv0luJmRHBHzqfwuyDRkzfKqB8pRZeQnwzuZynvgHTtwsYvZRBs2%2BVGSU5nfsjX2bocexqDsMLKXgZCQfmkzi6lK0EDJxOfNJdoYORQl5O3OeXY5%2BH59PI5XXUMh3RuIQR6v2J2Ld8h3488FXMBWb2TJkNPw9GUzirF3HX2oZFrQUD0Rqc84rfVcaPs0D%2FcTK%2FQ6y6N6eVsJX3MCglcUzJYVytw6CYxKRSj1Elu0bWCBNCXCnPGz96pTieOTvxyN6OIm%2Fhid2Nx1SzWhGxsLwR4aQ9rFOMPl8lwwQlvXZ78NLZhRbBwZrTjReOjzuENKc1YUTOrLJ%2BKf7%2BsrEJhIL7dhfOaI34n7cxpRWwYnbghFqPMmENyelXzOLE0d1SNbrFGOKcgmDwnduH61Y7zJCAvVINDisZJMPqNEuHVeOQnPr11u3FESWLa2ZbBecp8VNaZXBBb15njHUxmxPC7YK3uGS0YkzNo1VwcZJWtwkeThHKMg33SfEVMqsskBeSjLqwMZYKa18ppXKRwESIv0u8NVPFyRb7hxK0ZYX%2BfIPO95D6KBXH%2FuoPnu%2FBfZ7Zxb0AAAAASUVORK5CYII)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/gadget-Raspberry%20Pi-pink.svg?logoWidth=100&amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAsAAAAOCAYAAAD5YeaVAAACJ0lEQVR4AW2Qy0tUfxjGv3Pm3O%2BXGec3jnMZZ9Rxxp%2BWkYpJ2QkVIzDpkkoGBSOpBZmWgRIkWSs30SJchC26B9aijKLaFET9Be1q46ayRVDU5uk9Q8seeOG8X573eT%2FnZbwQqo5l5Rube52PQdH3BcaY4SbEiy2%2B%2FWFLv7ueblJv0luJmRHBHzqfwuyDRkzfKqB8pRZeQnwzuZynvgHTtwsYvZRBs2%2BVGSU5nfsjX2bocexqDsMLKXgZCQfmkzi6lK0EDJxOfNJdoYORQl5O3OeXY5%2BH59PI5XXUMh3RuIQR6v2J2Ld8h3488FXMBWb2TJkNPw9GUzirF3HX2oZFrQUD0Rqc84rfVcaPs0D%2FcTK%2FQ6y6N6eVsJX3MCglcUzJYVytw6CYxKRSj1Elu0bWCBNCXCnPGz96pTieOTvxyN6OIm%2Fhid2Nx1SzWhGxsLwR4aQ9rFOMPl8lwwQlvXZ78NLZhRbBwZrTjReOjzuENKc1YUTOrLJ%2BKf7%2BsrEJhIL7dhfOaI34n7cxpRWwYnbghFqPMmENyelXzOLE0d1SNbrFGOKcgmDwnduH61Y7zJCAvVINDisZJMPqNEuHVeOQnPr11u3FESWLa2ZbBecp8VNaZXBBb15njHUxmxPC7YK3uGS0YkzNo1VwcZJWtwkeThHKMg33SfEVMqsskBeSjLqwMZYKa18ppXKRwESIv0u8NVPFyRb7hxK0ZYX%2BfIPO95D6KBXH%2FuoPnu%2FBfZ7Zxb0AAAAASUVORK5CYII\" alt=\"\"></p>\n<h3 id=\"5-link\"><a href=\"#5-link\" class=\"headerlink\" title=\"5. link\"></a>5. link</h3><p>据说该参数是用来设置 style 为 social 类型点击后跳转的 URL 的（嗯，俗称超链接），并且应该能够设置左右两边为不同的 URL，官方描述如下：</p>\n<ul>\n<li>Specify what clicking on the left/right of a badge should do (esp. for social badge style)</li>\n</ul>\n<p>如果把 URL 贴到浏览器中直接访问的确是这样的，比如直接在浏览器中打开下面这个链接，点击左半部分会跳到百度，右半部分则跳到 Google（感谢 <a href=\"https://github.com/yuzhouwww\" target=\"_blank\" rel=\"noopener\">@yuzhouwww</a> 同学的提示）：</p>\n<p><a href=\"https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=social&amp;link=https://www.baidu.com&amp;link=https://www.google.com\" target=\"_blank\" rel=\"noopener\">https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=social&amp;link=https://www.baidu.com&amp;link=https://www.google.com</a></p>\n<p>不过如果直接添加在 Markdown 中显示貌似没啥效果？如果有大佬知道的求指点，感谢！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=social&amp;link=https://www.baidu.com&amp;link=https://www.google.com)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=social&amp;link=https://www.baidu.com&amp;link=https://www.google.com\" alt=\"\"></p>\n<h3 id=\"6-colorA\"><a href=\"#6-colorA\" class=\"headerlink\" title=\"6. colorA\"></a>6. colorA</h3><p>该参数用来控制徽标左半部分的背景色，只能用十六进制的颜色作为参数哦，不能直接写 red、green、blue 之类的，这里将左半部分的背景色改为 0xabcdef，代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?colorA=abcdef)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?colorA=abcdef\" alt=\"\"></p>\n<h3 id=\"7-colorB\"><a href=\"#7-colorB\" class=\"headerlink\" title=\"7. colorB\"></a>7. colorB</h3><p>该参数用来控制徽标右半部分的背景色，同上，只能用十六进制的颜色作为参数哦，不能直接写 red、green、blue 之类的，这里将右半部分的背景色改为 0xabcdef，代码和效果如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?colorB=abcdef)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?colorB=abcdef\" alt=\"\"></p>\n<h3 id=\"8-maxAge\"><a href=\"#8-maxAge\" class=\"headerlink\" title=\"8. maxAge\"></a>8. maxAge</h3><p>该参数用来设置 HTTP 缓存时间，以秒为单位，直接在 svg 地址后跟 <code>?maxAge={缓存秒数}</code> 即可，好像没啥好预览的，不放效果图了。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>这里需要注意的是，如果你是引用的第三方 svg 然后添加自己的样式，如果该样式之前已经被第三方添加过，是不一定会覆盖第三方的设置的，也就是说自己设置的属性不一定会生效…例如下面的代码设置 colorB 就没生效：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](https://img.shields.io/cocoapods/v/Alamofire.svg?colorB=000000)</span><br></pre></td></tr></table></figure>\n<p>右半部分应该变成黑色，但是毫无效果的说：</p>\n<p><img src=\"https://img.shields.io/cocoapods/v/Alamofire.svg?colorB=000000\" alt=\"\"></p>\n<h1 id=\"四-其他\"><a href=\"#四-其他\" class=\"headerlink\" title=\"四. 其他\"></a>四. 其他</h1><p>默认的徽标是居左排列的，如果需要居中排列需要使用 HTML 的方式来插入徽标，可参考 <a href=\"https://github.com/onevcat/Kingfisher\" target=\"_blank\" rel=\"noopener\">Kingfisher</a>，代码和效果如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://travis-ci.org/onevcat/Kingfisher\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/travis/onevcat/Kingfisher/master.svg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/Carthage/Carthage/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://swift.org/package-manager/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/badge/SPM-ready-orange.svg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://onevcat.github.io/Kingfisher/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://onevcat.github.io/Kingfisher/\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://codebeat.co/projects/github-com-onevcat-kingfisher\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"codebeat badge\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://codebeat.co/assets/svg/badges/A-398b39-669406e9e1b136187b91af587d4092b0160370f271f66a651f444b990c2730e9.svg\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p align=\"center\"><br><a href=\"https://travis-ci.org/onevcat/Kingfisher\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/onevcat/Kingfisher/master.svg\"></a><br><a href=\"https://github.com/Carthage/Carthage/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"></a><br><a href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/SPM-ready-orange.svg\"></a><br><a href=\"http://onevcat.github.io/Kingfisher/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat\"></a><br><a href=\"https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat\"></a><br><a href=\"http://onevcat.github.io/Kingfisher/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat\"></a><br><a href=\"https://codebeat.co/projects/github-com-onevcat-kingfisher\" target=\"_blank\" rel=\"noopener\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/assets/svg/badges/A-398b39-669406e9e1b136187b91af587d4092b0160370f271f66a651f444b990c2730e9.svg\"></a><br></p>\n\n<p>没了，🙄</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/05/01/2017-05-01-GitHub-Badge-Introduction/\">http://www.eyrefree.org/2017/05/01/2017-05-01-GitHub-Badge-Introduction/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["GitHub"],"tags":["Badge"]},{"title":"iOS 在 App 中使用自定义字体","url":"http://www.eyrefree.org/2017/03/23/UIFont-TTF/","content":"<p>最近在做一个神奇的 App 需要添加楷体，检查了一下发现 iOS 默认并不会安装这种字体，需要我们自己将字体文件添加到 App 中，本文主要记录了添加自定义字体的过程、添加完成后的效果以及遇到的一些坑，文中 iOS 代码主要为 Swift 3。</p>\n<hr>\n<h1 id=\"1-查看全部可用字体\"><a href=\"#1-查看全部可用字体\" class=\"headerlink\" title=\"1. 查看全部可用字体\"></a>1. 查看全部可用字体</h1><p>在进行操作之前，我们先查看默认情况下，系统的可用字体有哪些，利用如下代码可以将系统全部字体的 FontFamilyName 以及它们的 FontName 进行打印：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> fontFamily <span class=\"keyword\">in</span> <span class=\"type\">UIFont</span>.familyNames &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fontFamily)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> font <span class=\"keyword\">in</span> <span class=\"type\">UIFont</span>.fontNames(forFamilyName: fontFamily) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(fontFamily + <span class=\"string\">\": \"</span> + font)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在日志输出窗口搜索我们需要的楷体，可以看到默认并没有安装，效果如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7350c33cc8513393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看全部可用字体\"></p>\n<h1 id=\"2-获取字体文件\"><a href=\"#2-获取字体文件\" class=\"headerlink\" title=\"2. 获取字体文件\"></a>2. 获取字体文件</h1><p>首先，我们需要获取字体文件，一般文件类型为 ttf 或 ttc 的就是字体文件了，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-8128dda0b2489f39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"字体文件\"></p>\n<p>可以在 <a href=\"http://www.zitikoudai.com/\" target=\"_blank\" rel=\"noopener\">字体口袋</a>，<a href=\"http://www.sozi.cn/\" target=\"_blank\" rel=\"noopener\">搜字网</a> 之类的网站找到很多可供下载的资源：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-510dc0d1628c7b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"字体口袋\"></p>\n<p>或者也可以在 OS X 的系统字体册找到我们想要的字体，可以从应用程序列表中打开字体册：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-ec156aacb9194153.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"字体册\"></p>\n<p>选择 <code>所有字体</code> 然后在搜索栏内键入需要查找的字体名即可列出匹配的项目：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-29901f9b4632925f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在字体册中查找字体\"></p>\n<p>右键点击想要的字体选择 <code>在 Finder 中显示</code> 即可找到对应的字体文件。</p>\n<h1 id=\"3-添加字体文件到工程\"><a href=\"#3-添加字体文件到工程\" class=\"headerlink\" title=\"3. 添加字体文件到工程\"></a>3. 添加字体文件到工程</h1><p>将我们获取的字体文件直接拖到工程中的合适位置，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2aad3e8abae38ee9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加字体文件\"></p>\n<p>添加完成后选中对应的字体文件可进行预览：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-5f5b457a8bdda98b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"预览\"></p>\n<p>我们还需要在 <code>Info.plist</code> 文件中添加 Fonts provided by application 项，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-be03386c8a892c1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Info.plist 添加 Fonts provided by application 项\"></p>\n<p>也可通过直接添加代码的方式完成，例如这里添加两个字体文件 STKaiti.ttf 和 Kaiti-SC.ttf 的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;UIAppFonts&lt;/key&gt;</span><br><span class=\"line\">&lt;array&gt;</span><br><span class=\"line\">    &lt;string&gt;STKaiti.ttf&lt;/string&gt;</span><br><span class=\"line\">    &lt;string&gt;Kaiti-SC.ttf&lt;/string&gt;</span><br><span class=\"line\">&lt;/array&gt;</span><br></pre></td></tr></table></figure>\n<p>这时，我们对工程进行编译，再次查看可用的全部字体，这时我们可以看到，我们需要的楷体已经添加了进来：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-35090eacafa8f523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"成功添加楷体\"></p>\n<h1 id=\"4-字体的使用\"><a href=\"#4-字体的使用\" class=\"headerlink\" title=\"4. 字体的使用\"></a>4. 字体的使用</h1><h2 id=\"1-StoryBoard\"><a href=\"#1-StoryBoard\" class=\"headerlink\" title=\"1. StoryBoard\"></a>1. StoryBoard</h2><p>在 StoryBoard 中使用的话，只需要设置控件的 Font 属性为，选择 Custom，然后再从 Family 中选择需要的字体即可。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-ae1d2f52ed178db2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"在 StoryBoard 中使用\"></p>\n<h2 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2. 代码\"></a>2. 代码</h2><p>我们直接通过如下代码直接生成一个楷体的字体对象，将其赋给 UIButton 或者 UILabel 等空间对应的属性即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIFont</span>(name: <span class=\"string\">\"STKaiti\"</span>, size: <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是 UIFont 的 name 字符串必须是上面我们打印出的字体名称，和字体文件的文件名或者其他信息无关。如果这里我们输入了一个无效的字体名称，可能会返回一个空的对象，所以我的使用方式如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIFont</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">boldKaiti</span><span class=\"params\">(ofSize fontSize: CGFloat)</span></span> -&gt; <span class=\"type\">UIFont</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIFont</span>(name: <span class=\"string\">\"Kaiti SC Black\"</span>, size: fontSize) ?? <span class=\"type\">UIFont</span>.systemFont(ofSize: fontSize)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">kaiti</span><span class=\"params\">(ofSize fontSize: CGFloat)</span></span> -&gt; <span class=\"type\">UIFont</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIFont</span>(name: <span class=\"string\">\"Kaiti SC\"</span>, size: fontSize) ?? <span class=\"type\">UIFont</span>.systemFont(ofSize: fontSize)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用楷体前后效果对比，可以看到换个字体以后感觉整个 feel 就不一样了，可见我们要好好听设计师蜀黍们的话，该用啥字体用啥字体，不能偷懒，😂 （嘛，控件位置还没调整，第二段可能有点放不下了）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">添加字体前</th>\n<th style=\"text-align:center\">添加字体后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-af181721cca8c174.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-e089745639153fd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"5-一些坑\"><a href=\"#5-一些坑\" class=\"headerlink\" title=\"5. 一些坑\"></a>5. 一些坑</h1><h4 id=\"1-字体文件过大\"><a href=\"#1-字体文件过大\" class=\"headerlink\" title=\"1. 字体文件过大\"></a>1. 字体文件过大</h4><p>如果你用的字体文件是 TTC 格式的，可以考虑去下载单独的 TTF 字体文件，TTC 是几个 TTF 合成的字库，里面包含不止一种字体类型。</p>\n<p>然后多个类似的字体，可以和设计师商量一下统一使用同一种字体。</p>\n<p>唔，如果是单个 TTF 文件过大的话，暂时木有找到好的解决办法，可以考虑多下几个不同来源的同种字体的文件，挑一个体积最小的。或者对现有的 TTF 文件进行编辑，将一些低频字符进行删除。</p>\n<h4 id=\"2-字体重名问题\"><a href=\"#2-字体重名问题\" class=\"headerlink\" title=\"2. 字体重名问题\"></a>2. 字体重名问题</h4><p>在导入同一种字体的不同风格时，比如这里楷体的粗体 <code>Kaiti-SC-Black</code> 和普通体 <code>Kaiti-SC-Regular</code> ，在 App 中打印出的 FontName 居然只有一个楷体的，这是为啥呢，推测可能是字体文件生成的时候填写字体名偷工减料，没有填写完整的字体名或者字体名识别异常导致的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-cd76f9fd80856fbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"只有一个楷体\"></p>\n<p>然后我找了一个 OS X 下可用的免费字体编辑工具 BirdFont 对字体文件进行查看想一探究竟，官网地址 <a href=\"https://birdfont.org/\" target=\"_blank\" rel=\"noopener\">https://birdfont.org/</a>，我用的是 <a href=\"http://eyrefree.coding.me/FileKeeper/birdfont-2.15.5-free.dmg\" target=\"_blank\" rel=\"noopener\">2.15.5</a> 版本，大家可以自行去官网下载最新版。</p>\n<p>在 Finder 中打开我们的字体文件，右键选择用 BirdFont 进行打开即可，因为字体文件数据量较大，打开过程可能会有些长，需要耐心等待几分钟，具体时长根据数据量而定，等软件右上角的 Loading 消失即表示打开完成。</p>\n<p>点击右上角菜单，选择 Name and Description 选项可打开字体描述信息编辑页面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f0a8629b4d2b6382.png\" alt=\"Name and Description\"></p>\n<p>在这里我们可以看到，Kaiti-SC-Black 和 Kaiti-SC-Regular 两个字体文件的 <code>Name</code> 一栏确实是只写了 Kaiti SC，和我们之前在 App 中输出的字体名称一致，<code>Style</code> 一栏虽然有所区别，但是我们在 App 中是无法通过 <code>Style</code> 这个参数来找到某个字体的（反正我没找到，如果真的有办法希望可以教我，蟹蟹，😂 ），所以这应该就是我们只能在 App 中找到一个楷体的原因了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">BirdFont Kaiti-SC-Black</th>\n<th style=\"text-align:center\">BirdFont Kaiti-SC-Regular</th>\n<th style=\"text-align:center\">App</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-36d14efc746d886a.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-c828d1f366a82258.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4b11a9f1122e702b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<p>然后我们对其中一个字体的 <code>Name</code> 做一下修改，反正使俩字体文件的 Name 不一样就行，然后我这里将 Kaiti-SC-Black 的 <code>Name</code> 改为 Kaiti SC Black，改完之后需要先 Save，然后选择 Import and Export：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-c27be693b5abdae5.png\" alt=\"Import and Export\"></p>\n<p>然后再选择 Export Fonts：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-0d4f161f80baa28a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Export Fonts\"></p>\n<p>然后会弹出 Export Settings 页面进行一些参数设置，注意将 Formats 中的 TTF 选项勾选即可，其他的两个选项可以去掉，加快导出速度。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2a2a4271cfbc9133.png\" alt=\"Export Settings\"></p>\n<p>然后单击下面的 Export 按钮即可开始导出工作，右上角会出现一个 Loading 视图，等它消失就表示导出完成了，导出完成后会在 Finder 中打开对应字体文件。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-06962a1c5acf94a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"导出完成\"></p>\n<p>我们将其添加到工程中再看下能不能找到它：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-96d28c83f011ed0c.png\" alt=\"新增 Kaiti SC Black 字体\"></p>\n<p>可以看到这一次多了一个名为 Kaiti SC Black 的字体，完成！</p>\n<p>PS：</p>\n<p>最后吐槽一下，BirdFont 这工具真的好慢，巨慢，慢到爆炸，🙄 。大家在操作过过程中尽量挑体积小一点的字体文件进行操作。不过还好，使用过程中还没遇到闪退之类的状况，功能上没问题。希望后续版本能够提高处理速度。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/03/23/2017-03-23-UIFont-TTF/\">http://www.eyrefree.org/2017/03/23/2017-03-23-UIFont-TTF/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["TTF"]},{"title":"利用 Travis-CI 让你在 GitHub 上的 CocoaPods 库持续构建","url":"http://www.eyrefree.org/2017/03/16/Travis-CI/","content":"<p>Travis-CI 是一个专门为开源项目打造的持续集成环境，目前已经支持绝大部分主流语言，它采用 yaml 格式，简洁清新独树一帜（感谢百度百科，2333）。</p>\n<p>每次 Commit 后会执行构建操作，并在 GitHub 对应的 Commit 后显示构建状态或结果，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-87b43c1d2d1e9c1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"持续构建效果预览\"></p>\n<p>本文以 <a href=\"https://github.com/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\">EFQRCode</a>(一个使用 Swift 作为开发语言的 CocoaPods 开源库) 为例，简述怎样为自己的开源项目添加持续构建功能。</p>\n<h1 id=\"1-指定-Swift-版本\"><a href=\"#1-指定-Swift-版本\" class=\"headerlink\" title=\"1. 指定 Swift 版本\"></a>1. 指定 Swift 版本</h1><p>在根目录下添加一个 .swift-version 文件，在其中填写 Swift 版本号，例如这里 EFQRCode 库使用 Swift 3.0 进行开发，所以这里填写的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">3.0</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-添加-Travis-CI-配置文件\"><a href=\"#2-添加-Travis-CI-配置文件\" class=\"headerlink\" title=\"2. 添加 Travis-CI 配置文件\"></a>2. 添加 Travis-CI 配置文件</h1><p>在根目录下添加一个 .travis.yml 文件，在其中填写配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">osx_image: xcode8</span><br><span class=\"line\">language: objective-c</span><br><span class=\"line\"></span><br><span class=\"line\">cache: cocoapods</span><br><span class=\"line\">podfile: Example/Podfile</span><br><span class=\"line\"></span><br><span class=\"line\">env:</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    - LANG=en_US.UTF-8</span><br><span class=\"line\">    - LC_ALL=en_US.UTF-8</span><br><span class=\"line\">    - XCODE_WORKSPACE=Example/EFQRCode.xcworkspace</span><br><span class=\"line\">  matrix:</span><br><span class=\"line\">    - SCHEME=&quot;EFQRCode-Example&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">  - gem install xcpretty --no-rdoc --no-ri --no-document --quiet</span><br><span class=\"line\">  - gem install cocoapods --pre --no-rdoc --no-ri --no-document --quiet</span><br><span class=\"line\">  - pod install --project-directory=Example</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - set -o pipefail</span><br><span class=\"line\">  - xcodebuild -workspace &quot;$XCODE_WORKSPACE&quot; -scheme &quot;$SCHEME&quot; -configuration Debug clean build CODE_SIGN_IDENTITY=&quot;&quot; CODE_SIGNING_REQUIRED=NO | xcpretty -c</span><br><span class=\"line\">  - xcodebuild -workspace &quot;$XCODE_WORKSPACE&quot; -scheme &quot;$SCHEME&quot; -configuration Release clean build CODE_SIGN_IDENTITY=&quot;&quot; CODE_SIGNING_REQUIRED=NO | xcpretty -c</span><br><span class=\"line\">  - pod lib lint --no-clean</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - sleep 5</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册-Travis-CI-账号\"><a href=\"#3-注册-Travis-CI-账号\" class=\"headerlink\" title=\"3. 注册 Travis-CI 账号\"></a>3. 注册 Travis-CI 账号</h1><p>打开 <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org/</a> 注册一个 Travis-CI 账号，也可以通过 GitHub 账户直接登陆。Travis-CI 服务对开源项目是免费的，所以你的私有项目无法享受到免费的持续构建服务。</p>\n<h1 id=\"4-从-GitHub-同步项目\"><a href=\"#4-从-GitHub-同步项目\" class=\"headerlink\" title=\"4. 从 GitHub 同步项目\"></a>4. 从 GitHub 同步项目</h1><p>第一次进入时会自动从 GitHub 同步项目数据，可能需要等待一段的时间进行同步，同步完成后可以看到如下的项目列表：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d01facdae4cb29f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"项目列表\"></p>\n<p>一般情况下每隔一定的时间 Travis-CI 都会从 GitHub 自动同步数据，如果新添加的项目想要立刻同步到 Travis-CI 的话，可以手动点击右上角的 Sync account 同步按钮，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d14d4450f3790330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"同步按钮\"></p>\n<h1 id=\"5-开启持续集成\"><a href=\"#5-开启持续集成\" class=\"headerlink\" title=\"5. 开启持续集成\"></a>5. 开启持续集成</h1><p>然后接下来就是开启对应项目的持续构建，大家应该已经猜到该怎么做了吧…将对应项目之前的 Switch 按钮设为启用绿色勾选状态即可，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2085dfac1d55e776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"勾选状态\"></p>\n<h1 id=\"6-观察错误日志\"><a href=\"#6-观察错误日志\" class=\"headerlink\" title=\"6. 观察错误日志\"></a>6. 观察错误日志</h1><p>若发生构建失败，可通过查看错误日志的方式来定位具体问题原因，可点击工程名，选择出错的那一次构建即可：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a483be7d32c674bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"构建日志\"></p>\n<h1 id=\"7-一些废话\"><a href=\"#7-一些废话\" class=\"headerlink\" title=\"7. 一些废话\"></a>7. 一些废话</h1><p>本文只提供了针对 Swift CocoaPods 库的操作步骤，Travis-CI 具体到每种语言／项目的构建配置各不相同，参数各异，有的时候还需要根据自己的项目特性做一些个性化的调整，需要我们多思考，多调试，多尝试，总之不要轻易放弃哇。别问我是怎么知道的，😂 ：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7cbf867d9314dbbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"坑\"></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/03/16/2017-03-16-Travis-CI/\">http://www.eyrefree.org/2017/03/16/2017-03-16-Travis-CI/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["GitHub"],"tags":["Travis-CI"]},{"title":"iOS 利用 NEHotspotHelper 获取 WiFi 列表","url":"http://www.eyrefree.org/2017/03/09/NEHotspotHelper/","content":"<p>iOS 9 发布之后，苹果推出了 NetworkExtension，利用这个框架可以实现很多和网络相关的操作。本文主要介绍怎样使用其中的 NEHotspotHelper 进行设备 WiFi 列表的获取。</p>\n<p>Demo 地址：<a href=\"https://github.com/EyreFree/EFNEHotspotHelperDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFNEHotspotHelperDemo</a></p>\n<h1 id=\"一-注意事项\"><a href=\"#一-注意事项\" class=\"headerlink\" title=\"一. 注意事项\"></a>一. 注意事项</h1><ol>\n<li>首先，NEHotspotHelper 只在 iOS 9 及以上版本得到支持，之前版本的 iOS 并不支持该功能；</li>\n<li>然后，你需要有一个开发者账号；</li>\n<li>最后，该框架目前还没有大规模开放使用，所以需要向苹果发送申请并且审核通过才能够获得使用该框架的权限，大致内容就是描述一下你需要使用该框架的原因之类的，然后我是用的英文进行描述（感谢百度以及谷歌翻译），不过据说中文也行。提交申请后大概一周内会收到反馈邮件，申请地址为： <a href=\"https://developer.apple.com/contact/network-extension/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/contact/network-extension/</a> 。</li>\n</ol>\n<h1 id=\"二-创建-App-ID\"><a href=\"#二-创建-App-ID\" class=\"headerlink\" title=\"二. 创建 App ID\"></a>二. 创建 App ID</h1><p>打开苹果开发者中心，登陆然后找到 App IDs 选项，点击右上角按钮创建一个 App ID 用于接下来创建 Provisioning Profile，地址为： <a href=\"https://developer.apple.com/account/ios/identifier/bundle/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/account/ios/identifier/bundle/</a>  ，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-f447bfbbb6095d33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建 App ID\"></p>\n<p>首先，填写 Name 以及 Bundle ID，这里统一填写为 EFNEHotspotHelperDemo，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-1fda13b55d6683a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"填写 Name\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a51c01c1bb8e0ef9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"填写 Bundle ID\"></p>\n<p>接下来这一步注意需要勾选 Wireless Accessory Configuration 这一选项，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-5acb269c05aacea5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"勾选 Wireless Accessory Configuration\"></p>\n<p>然后观察到如图所示状态表明已成功打开：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-73d2e00e40181d9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"状态显示\"></p>\n<p>在 App IDs 列表中查看刚创建完成的 App ID：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2d0024f561ed17ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"App IDs 列表\"></p>\n<h1 id=\"三-创建-Provisioning-Profile\"><a href=\"#三-创建-Provisioning-Profile\" class=\"headerlink\" title=\"三. 创建 Provisioning Profile\"></a>三. 创建 Provisioning Profile</h1><p>找到 Provisioning Profiles 选项，点击右上角按钮创建一个 Provisioning Profile 用于接下来创建示例工程，地址为： <a href=\"https://developer.apple.com/account/ios/profile/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/account/ios/profile/</a>  ，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-911e7761ba3c44e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建 Provisioning Profile\"></p>\n<p>首先选择 Profile 类型，这里我选择的是 iOS App Development，可以根据自己的具体需要自由选择：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-d5061ad530a3f724.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择 Profile 类型\"></p>\n<p>接下来选择我们在第二步创建好的 App ID，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4e017ec4c1c09402.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择 App ID\"></p>\n<p>然后选择证书和设备，全选即可：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-9c675e9238d1da11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择证书\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-58a130484fdfed6c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择设备\"></p>\n<p>在额外权限这一步需要选中我们申请到的 Network Extension 权限，可以看到其中包含我们需要使用的 NEHotspotHelper 权限，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a6abfce07b76a017.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选中 Network Extension 权限\"></p>\n<p>填写完 Profile Name 之后，即可成功创建我们需要的 Profile：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2f602ebf05102c28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"填写 Profile Name\"></p>\n<p>点击 Download 将它下载到本地：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-1bf8b38560227b93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"下载 Profile\"></p>\n<p>双击打开，即可将 Profile 添加到本机：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-42e294701187033a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加 Profile\"></p>\n<p>可以到 XCode 的账户设置里查看已安装的 Profile，若未安装成功可以尝试点击 Action 中的 Download 按钮重新下载：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-99fff3c8f41706d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看已安装的 Profile\"></p>\n<h1 id=\"四-创建工程\"><a href=\"#四-创建工程\" class=\"headerlink\" title=\"四. 创建工程\"></a>四. 创建工程</h1><p>接下来我们创建一个示例工程，演示如何获取 WiFi 列表。首先，将 Bundle ID 改为之前设置的 EFNEHotspotHelperDemo：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-a39aced31600687a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改 Bundle ID\"></p>\n<p>然后在 Info.plist 中添加后台模式权限数组：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-1870d94c708379d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加后台模式代码\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIBackgroundModes<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>network-authentication<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加完成后可以在 Target -&gt; Capabilities 中看到后台模式已处于开启状态：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-99c24463ac8fa56f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"后台模式已开启\"></p>\n<p>接下来在 Capabilities 找到 Wireless Accessory Configuration 并将其打开：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-8eb012d9732a3197.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打开 Wireless Accessory Configuration\"></p>\n<p> 在工程中找到后缀为 {工程名}.entitlements 的文件 EFNEHotspotHelperDemo.entitlements，在其中加入 HotspotHelper 权限代码：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-065ba9d93185a539.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加 HotspotHelper 权限代码\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>com.apple.developer.networking.HotspotHelper<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>好了，到这里已经完成了各种乱七八糟的配置工作，可以尝试进行 Build。如果没有提示错误信息的话，接下来就可以愉快地使用 HotspotHelper 了；如果有问题的话，请检查之前的步骤是否都已正确完成或者根据错误信息修改具体项目。</p>\n<h1 id=\"五-核心代码\"><a href=\"#五-核心代码\" class=\"headerlink\" title=\"五. 核心代码\"></a>五. 核心代码</h1><p>首先，在需要使用 HotspotHelper 的地方添加头文件引用，这里以 Objective-C 代码为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#import &lt;NetworkExtension/NetworkExtension.h&gt;</span><br></pre></td></tr></table></figure>\n<p>然后使用如下代码即可将 WiFi 列表信息打印到 XCode 控制台，注意：这里需要打开系统 <code>设置</code> 中的 <code>无线局域网</code> 页面才可以触发回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)scanWifiInfos&#123;</span><br><span class=\"line\">    NSLog(@&quot;1.Start&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSMutableDictionary* options = [[NSMutableDictionary alloc] init];</span><br><span class=\"line\">    [options setObject:@&quot;EFNEHotspotHelperDemo&quot; forKey: kNEHotspotHelperOptionDisplayName];</span><br><span class=\"line\">    dispatch_queue_t queue = dispatch_queue_create(&quot;EFNEHotspotHelperDemo&quot;, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;2.Try&quot;);</span><br><span class=\"line\">    BOOL returnType = [NEHotspotHelper registerWithOptions: options queue: queue handler: ^(NEHotspotHelperCommand * cmd) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        NSLog(@&quot;4.Finish&quot;);</span><br><span class=\"line\">        NEHotspotNetwork* network;</span><br><span class=\"line\">        if (cmd.commandType == kNEHotspotHelperCommandTypeEvaluate || cmd.commandType == kNEHotspotHelperCommandTypeFilterScanList) &#123;</span><br><span class=\"line\">            // 遍历 WiFi 列表，打印基本信息</span><br><span class=\"line\">            for (network in cmd.networkList) &#123;</span><br><span class=\"line\">                NSString* wifiInfoString = [[NSString alloc] initWithFormat: @&quot;---------------------------\\nSSID: %@\\nMac地址: %@\\n信号强度: %f\\nCommandType:%ld\\n---------------------------\\n\\n&quot;, network.SSID, network.BSSID, network.signalStrength, (long)cmd.commandType];</span><br><span class=\"line\">                NSLog(@&quot;%@&quot;, wifiInfoString);</span><br><span class=\"line\"></span><br><span class=\"line\">                // 检测到指定 WiFi 可设定密码直接连接</span><br><span class=\"line\">                if ([network.SSID isEqualToString: @&quot;测试 WiFi&quot;]) &#123;</span><br><span class=\"line\">                    [network setConfidence: kNEHotspotHelperConfidenceHigh];</span><br><span class=\"line\">                    [network setPassword: @&quot;123456789&quot;];</span><br><span class=\"line\">                    NEHotspotHelperResponse *response = [cmd createResponse: kNEHotspotHelperResultSuccess];</span><br><span class=\"line\">                    NSLog(@&quot;Response CMD: %@&quot;, response);</span><br><span class=\"line\">                    [response setNetworkList: @[network]];</span><br><span class=\"line\">                    [response setNetwork: network];</span><br><span class=\"line\">                    [response deliver];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 注册成功 returnType 会返回一个 Yes 值，否则 No</span><br><span class=\"line\">    NSLog(@&quot;3.Result: %@&quot;, returnType == YES ? @&quot;Yes&quot; : @&quot;No&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"六-演示\"><a href=\"#六-演示\" class=\"headerlink\" title=\"六. 演示\"></a>六. 演示</h1><p>唔，Demo 运行效果如下，点击 <code>Open WiFi Setting</code> 按钮可直接打开 <code>无线局域网</code> 页面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-761d24d00368fc0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行效果\"></p>\n<p>具体可尝试下载 Demo 并完成相应配置后体验：<a href=\"https://github.com/EyreFree/EFNEHotspotHelperDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFNEHotspotHelperDemo</a></p>\n<h1 id=\"七-备注\"><a href=\"#七-备注\" class=\"headerlink\" title=\"七. 备注\"></a>七. 备注</h1><p>参考以下资料完成本 Demo，在此表示感谢：</p>\n<p><a href=\"http://blog.csdn.net/i374711088/article/details/51655526\" target=\"_blank\" rel=\"noopener\">IOS NetworkExtension 框架使用笔记</a><br><a href=\"http://blog.csdn.net/toto18369905359/article/details/52622115\" target=\"_blank\" rel=\"noopener\">iOS NEHotspotHelper使用</a><br><a href=\"https://github.com/42vio/iOS-NetworkExtension-NEHotspotHelper\" target=\"_blank\" rel=\"noopener\">iOS-NetworkExtension-NEHotspotHelper</a><br><a href=\"https://developer.apple.com/reference/networkextension\" target=\"_blank\" rel=\"noopener\">API Reference - NetworkExtension</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/03/09/2017-03-09-NEHotspotHelper/\">http://www.eyrefree.org/2017/03/09/2017-03-09-NEHotspotHelper/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["NEHotspotHelper"]},{"title":"Swift 3 编写的图片分享应用","url":"http://www.eyrefree.org/2017/02/05/VSCAM/","content":"<p>VSCAM 是一款图片分享应用，此处为使用 Swift 编写的 iOS 版本。</p>\n<p>项目地址：<a href=\"https://github.com/EyreFree/VSCAM\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/VSCAM</a></p>\n<hr>\n<p>首页使用 UICollectionView 实现不同尺寸图片的瀑布流展示；<br>发布页使用 Alamofire 实现了图片后台上传并且实时显示上传进度；<br>图片详情页使用 UITableView 实现了类似 QQ 个人信息页面的背景图片拉伸效果；<br>利用 MJPhotoBrowser 实现图片浏览功能；<br>登录与注册页使用 UITableView 实现了焦点所在编辑框自动滚动到屏幕中心的效果；<br>使用 ShareExtension 利用系统分享实现从浏览器页面打开 App 对应页面；<br>使用 3D Touch 实现从剪贴板读取 URL 快速打开 App 内指定页面；<br>完成国际化，添加英文支持；<br>集成 UMeng 与 Fabric 统计分析 SDK，可作为新手参考。</p>\n<h2 id=\"AppStore\"><a href=\"#AppStore\" class=\"headerlink\" title=\"AppStore\"></a>AppStore</h2><p><a target=\"_blank\" href=\"https://itunes.apple.com/cn/app/VSCAM/id1163589746?mt=8\"><br>    <img src=\"http://ww2.sinaimg.cn/large/0060lm7Tgw1f1hgrs1ebwj308102q0sp.jpg\" width=\"144\" height=\"49\"><br></a></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>XCode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><ol>\n<li>首先，需要安装 <a href=\"https://github.com/CocoaPods/CocoaPods\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> 如果你没有安装的话；</li>\n<li>在终端中移动到当前工程根目录下执行 <code>pod install</code>；</li>\n<li>用 XCode 打开 VSCAM.xcworkspace；</li>\n<li>构建。</li>\n</ol>\n<h2 id=\"计划中\"><a href=\"#计划中\" class=\"headerlink\" title=\"计划中\"></a>计划中</h2><ol>\n<li>iPad 适配；</li>\n<li>动画；</li>\n<li>评论／点赞。</li>\n</ol>\n<h2 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h2><p><img src=\"https://raw.githubusercontent.com/EyreFree/VSCAM/master/assets/screenshot.png\" alt=\"\"></p>\n<h2 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h2><p>EyreFree, eyrefree@eyrefree.org</p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p>VSCAM is available under the MIT license. See the LICENSE file for more info.</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/02/05/2017-02-05-VSCAM/\">http://www.eyrefree.org/2017/02/05/2017-02-05-VSCAM/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Swift"]},{"title":"iOS 花式二维码生成和二维码识别","url":"http://www.eyrefree.org/2017/01/25/EFQRCode/","content":"<p>iOS 原生的二维码识别非常之棒，反正比 ZXing 和 ZBar 效果都好些，所以以后打算尽量用原生的二维码识别，然后最近把原生的二维码生成也顺便做了一遍，并且在原有基础上加了一些样式参数，封了一个小库方便以后使用。</p>\n<p>项目地址：<a href=\"https://github.com/EyreFree/EFQRCode\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFQRCode</a></p>\n<hr>\n<p><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/EFQRCode.jpg\" alt=\"\"></p>\n<p>EFQRCode 是一个用 Swift 编写的用来生成和识别二维码的库，它基于系统二维码生成与识别进行开发。</p>\n<ul>\n<li>生成：利用输入的水印图/图标等资源生成各种艺术二维码；</li>\n<li>识别：识别率比 iOS 原生二维码识别率更高。</li>\n</ul>\n<h2 id=\"一-效果预览\"><a href=\"#一-效果预览\" class=\"headerlink\" title=\"一. 效果预览\"></a>一. 效果预览</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode1.jpg\" alt=\"\"></th>\n<th style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode2.jpg\" alt=\"\"></th>\n<th style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode3.jpg\" alt=\"\"></th>\n<th style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode4.jpg\" alt=\"\">  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode5.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode6.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode7.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/EyreFree/EFQRCode/master/assets/QRCode8.jpg\" alt=\"\">  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二-示例\"><a href=\"#二-示例\" class=\"headerlink\" title=\"二. 示例\"></a>二. 示例</h2><p>执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:EyreFree/EFQRCode.git; <span class=\"built_in\">cd</span> EFQRCode/Example; pod install; open EFQRCode.xcworkspace</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-环境\"><a href=\"#三-环境\" class=\"headerlink\" title=\"三. 环境\"></a>三. 环境</h2><ul>\n<li>XCode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h2 id=\"四-安装\"><a href=\"#四-安装\" class=\"headerlink\" title=\"四. 安装\"></a>四. 安装</h2><p>EFQRCode 可以通过 <a href=\"http://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> 进行获取。只需要在你的 Podfile 中添加如下代码就能实现引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod &quot;EFQRCode&quot;, &apos;~&gt; 1.2.0&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-快速使用\"><a href=\"#五-快速使用\" class=\"headerlink\" title=\"五. 快速使用\"></a>五. 快速使用</h2><h4 id=\"1-导入-EFQRCode\"><a href=\"#1-导入-EFQRCode\" class=\"headerlink\" title=\"1. 导入 EFQRCode\"></a>1. 导入 EFQRCode</h4><p>在你需要使用的地方添加如下代码引入 EFQRCode 模块：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> EFQRCode</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-二维码识别\"><a href=\"#2-二维码识别\" class=\"headerlink\" title=\"2. 二维码识别\"></a>2. 二维码识别</h4><p>获取图片中所包含的二维码，同一张图片中可能包含多个二维码，所以返回值是一个字符串数组：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> testImage = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"test.png\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> tryCodes = <span class=\"type\">EFQRCode</span>.recognize(image: testImage) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tryCodes.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"There are <span class=\"subst\">\\(tryCodes.<span class=\"built_in\">count</span>)</span> codes in testImage.\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (index, code) <span class=\"keyword\">in</span> tryCodes.enumerated() &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"The content of <span class=\"subst\">\\(index)</span> QR Code is: <span class=\"subst\">\\(code)</span>.\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"There is no QR Codes in testImage.\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Recognize failed, check your input image!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-二维码生成\"><a href=\"#3-二维码生成\" class=\"headerlink\" title=\"3. 二维码生成\"></a>3. 二维码生成</h4><p>根据所输入参数创建各种艺术二维码图片，快速使用方式如下:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用参数:</span></span><br><span class=\"line\"><span class=\"comment\">//                         content: 二维码内容</span></span><br><span class=\"line\"><span class=\"comment\">// inputCorrectionLevel (Optional): 容错率</span></span><br><span class=\"line\"><span class=\"comment\">//                                  L 7%</span></span><br><span class=\"line\"><span class=\"comment\">//                                  M 15%</span></span><br><span class=\"line\"><span class=\"comment\">//                                  Q 25%</span></span><br><span class=\"line\"><span class=\"comment\">//                                  H 30%(默认值)</span></span><br><span class=\"line\"><span class=\"comment\">//                 size (Optional): 边长</span></span><br><span class=\"line\"><span class=\"comment\">//        magnification (Optional): 放大倍数</span></span><br><span class=\"line\"><span class=\"comment\">//                                  (如果 magnification 不为空，将会忽略 size 参数)</span></span><br><span class=\"line\"><span class=\"comment\">//      backgroundColor (Optional): 背景色</span></span><br><span class=\"line\"><span class=\"comment\">//      foregroundColor (Optional): 前景色</span></span><br><span class=\"line\"><span class=\"comment\">//                 icon (Optional): 中心图标</span></span><br><span class=\"line\"><span class=\"comment\">//             iconSize (Optional): 中心图标边长</span></span><br><span class=\"line\"><span class=\"comment\">//       isIconColorful (Optional): 中心图标是否为彩色</span></span><br><span class=\"line\"><span class=\"comment\">//            watermark (Optional): 水印图</span></span><br><span class=\"line\"><span class=\"comment\">//        watermarkMode (Optional): 水印图模式</span></span><br><span class=\"line\"><span class=\"comment\">//  isWatermarkColorful (Optional): 水印图是否为彩色</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 额外参数</span></span><br><span class=\"line\"><span class=\"comment\">//           foregroundPointOffset: 前景点偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//                allowTransparent: 允许透明</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> tryImage = <span class=\"type\">EFQRCode</span>.generate(</span><br><span class=\"line\">    content: <span class=\"string\">\"https://github.com/EyreFree/EFQRCode\"</span>,</span><br><span class=\"line\">    magnification: <span class=\"number\">9</span>,</span><br><span class=\"line\">    watermark: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"WWF\"</span>),</span><br><span class=\"line\">    watermarkMode: .scaleAspectFill,</span><br><span class=\"line\">    isWatermarkColorful: <span class=\"literal\">false</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Create QRCode image success!\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Create QRCode image failed!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7579f281bbd2d0fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"生成示例\"></p>\n<h2 id=\"六-使用指南\"><a href=\"#六-使用指南\" class=\"headerlink\" title=\"六. 使用指南\"></a>六. 使用指南</h2><p>详情可参见具体使用文档：<a href=\"https://github.com/EyreFree/EFQRCode/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFQRCode/blob/master/README_CN.md</a></p>\n<h2 id=\"七-备注\"><a href=\"#七-备注\" class=\"headerlink\" title=\"七. 备注\"></a>七. 备注</h2><ol>\n<li>请选用对比度较高的前景色和背景色组合；</li>\n<li>想要提高生成二维码的清晰度可以选择使用 <code>magnificatio</code> 替代 <code>size</code>，或适当提高它们的数值；</li>\n<li>放大倍数过高／边长过大／二维码内容过多可能会导致生成失败；</li>\n<li>建议对生成的二维码进行测试后投入使用，例如微信能够扫描成功并不代表支付宝也能成功扫描，请务必根据您的具体业务需要做有针对性的测试；</li>\n<li>若有任何问题，期待得到您的反馈，<code>Issue</code> 和 <code>Pull request</code> 都是受欢迎的。</li>\n</ol>\n<p>备注的备注：好用的话可以给个<code>星星</code>，蟹蟹，QAQ…</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2017/01/25/2017-01-25-EFQRCode/\">http://www.eyrefree.org/2017/01/25/2017-01-25-EFQRCode/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["QRCode"]},{"title":"十分钟开发一款 iOS 表情包 App","url":"http://www.eyrefree.org/2016/11/24/Coding-Emoji/","content":"<p>在最近更新的 iOS 10 系统中，苹果开放了 iMessage Stickers 的开发，通俗的说法就是我们现在可以为 iMessage 开发表情包了。<br>表情包的开发十分简单，不需要写一行代码，只需要准备好图片资源即可。本文主要以 Coding 的<a href=\"https://coding.net/u/coding/p/Onion-Monkey-Emoji/git\" target=\"_blank\" rel=\"noopener\">洋葱猴系列表情</a>为例快速开发一款表情包 App。</p>\n<p>本文所需所有素材以及工程文件地址：<br><a href=\"https://github.com/EyreFree/CodingEmoji\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/CodingEmoji</a></p>\n<hr>\n<h1 id=\"一-注意事项\"><a href=\"#一-注意事项\" class=\"headerlink\" title=\"一.注意事项\"></a>一.注意事项</h1><p>开发环境：XCode 8.0 及以上；<br>运行环境：iOS 10 及以上；<br>其他：表情包图片的格式可以是 JPG, PNG, GIF 等，不过单张图片最大不能超过 500KB。</p>\n<h1 id=\"二-准备图片\"><a href=\"#二-准备图片\" class=\"headerlink\" title=\"二.准备图片\"></a>二.准备图片</h1><p>下载洋葱猴表情包，找到其中的表情图片。<br>（下载地址：<a href=\"https://coding.net/u/coding/p/Onion-Monkey-Emoji/git）\" target=\"_blank\" rel=\"noopener\">https://coding.net/u/coding/p/Onion-Monkey-Emoji/git）</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-5bcefc958791bbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"洋葱猴表情包\"></p>\n<h1 id=\"三-建立工程\"><a href=\"#三-建立工程\" class=\"headerlink\" title=\"三.建立工程\"></a>三.建立工程</h1><h2 id=\"1-新建工程\"><a href=\"#1-新建工程\" class=\"headerlink\" title=\"1.新建工程\"></a>1.新建工程</h2><p>打开 XCode，新建 Sticker Pack Application 工程，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-0b7408065e8b9efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建 Sticker Pack Application 工程\"></p>\n<h2 id=\"2-添加图标\"><a href=\"#2-添加图标\" class=\"headerlink\" title=\"2.添加图标\"></a>2.添加图标</h2><p>Sticker Pack Application 的图标和一般的 iOS 应用不太一样，它部分图标是扁的，详细尺寸如下（最后一个为 App Store 需要上传的图标尺寸。其他为工程内用到的应用图标）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No</th>\n<th style=\"text-align:center\">Size</th>\n<th style=\"text-align:center\">PS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">54 x 40</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">58 x 58</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">64 x 48</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">81 x 60</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">87 x 87</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">96 x 72</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">120 x 90</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">134 x 100</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">148 x 110</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">180 x 135</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">1024 x 768</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">1024 x 1024</td>\n<td style=\"text-align:center\">App Store 应用图标</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-7a4a2618c8a958f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"应用图标\"></p>\n<h2 id=\"3-导入表情图片\"><a href=\"#3-导入表情图片\" class=\"headerlink\" title=\"3.导入表情图片\"></a>3.导入表情图片</h2><p>接下来，可以将我们想要添加到表情包里的图片拖到 Sticker Pack 目录中，如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-dde7f28f09c1cf87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"导入表情图片\"></p>\n<h2 id=\"4-修改表情包名称\"><a href=\"#4-修改表情包名称\" class=\"headerlink\" title=\"4.修改表情包名称\"></a>4.修改表情包名称</h2><p>我们可以通过修改 Display Name 的方式来修改表情包在设备上显示的名称：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-9bcbb6f8e0315fcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改表情包名称\"></p>\n<h1 id=\"四-测试\"><a href=\"#四-测试\" class=\"headerlink\" title=\"四.测试\"></a>四.测试</h1><p>完成上面这些步骤后，就可以编译然后进行测试了，模拟器中运行效果如图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-248481f796531dbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"最终运行效果\"></p>\n<h1 id=\"五-提交审核\"><a href=\"#五-提交审核\" class=\"headerlink\" title=\"五.提交审核\"></a>五.提交审核</h1><p>（这一步不算在 10 分钟里哦，不属于开发过程唉，顺带提一下凑字数，🙄，购买开发者账号要等好几天呢）<br>若已经准备好了 iOS 开发者账号，就可以直接提交审核了，嗯，这个时候需要准备两张运行效果的屏幕截图，分别是 iPhone 和 iPad 的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Device</th>\n<th style=\"text-align:center\">Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">iPhone</td>\n<td style=\"text-align:center\">1242 x 2208</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iPad</td>\n<td style=\"text-align:center\">2048 x 2732</td>\n</tr>\n</tbody>\n</table>\n<p>然后应用图标使用之前准备好的 1024 x 1024 的应用图标即可，接下来填写好应用的各种信息，然后存储-提交审核即可。</p>\n<p>本文 App 已经通过审核，iOS 10 以上系统的同学可以下载体验：<br><a href=\"https://itunes.apple.com/cn/app/yang-cong-hou-biao-qing-bao/id1166254758?mt=8\" target=\"_blank\" rel=\"noopener\">https://itunes.apple.com/cn/app/yang-cong-hou-biao-qing-bao/id1166254758?mt=8</a></p>\n<p>同时预祝各位同学顺利开发出属于自己的表情包应用。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/11/24/2016-11-24-Coding-Emoji/\">http://www.eyrefree.org/2016/11/24/2016-11-24-Coding-Emoji/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Sticker"]},{"title":"iOS 为 App 添加 3D Touch 快捷菜单","url":"http://www.eyrefree.org/2016/09/22/3D-Touch/","content":"<p>iOS 为 App 图标添加 3D Touch 快捷启动菜单，Demo 地址：<br><a href=\"https://github.com/EyreFree/EF3DTouchDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EF3DTouchDemo</a></p>\n<hr>\n<h1 id=\"1-注意事项\"><a href=\"#1-注意事项\" class=\"headerlink\" title=\"1.注意事项\"></a>1.注意事项</h1><p>3D Touch 只在 iOS 9 及以上版本得到支持，之前版本的 iOS 并不支持该功能；<br>3D Touch 只在 iPhone 6s 及以后型号的 iPhone 或 iPad Pro 上可用，更早的设备并不支持该功能。<br>具体可通过如下代码进行判断：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if self.traitCollection.forceTouchCapability == UIForceTouchCapability.available &#123;</span><br><span class=\"line\">    print(&quot;支持 3D Touch&quot;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    print(&quot;不支持 3D Touch&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-添加按钮\"><a href=\"#2-添加按钮\" class=\"headerlink\" title=\"2.添加按钮\"></a>2.添加按钮</h1><p>右键点击工程中的 Info.plist 文件选择打开方式为 Source Code：</p>\n<center><br><img src=\"/images/3D-Touch-1.png\" alt=\"以 Source Code 方式打开 Info.plist\"><br></center>\n\n<p>在其中填写如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;UIApplicationShortcutItems&lt;/key&gt;</span><br><span class=\"line\">&lt;array&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemIconType&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;UIApplicationShortcutIconTypeShuffle&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemTitle&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;3D Touch 测试按钮&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemType&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;0&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemIconType&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;UIApplicationShortcutIconTypeLove&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemTitle&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;出来吧，小火龙！&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;UIApplicationShortcutItemType&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;1&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">&lt;/array&gt;</span><br></pre></td></tr></table></figure>\n<p>其中 UIApplicationShortcutItemIconType 项代表按钮图标，更多图标可以参见： <a href=\"https://developer.xamarin.com/api/type/UIKit.UIApplicationShortcutIconType/\" target=\"_blank\" rel=\"noopener\">https://developer.xamarin.com/api/type/UIKit.UIApplicationShortcutIconType/</a></p>\n<center><br><img src=\"/images/3D-Touch-2.png\" alt=\"在 Info.plist 添加按钮代码\"><br></center>\n\n<p>这段代码添加了两个 3D Touch 按钮，“3D Touch 测试按钮”和“3D 出来吧，小火龙！”。</p>\n<center><br><img src=\"/images/3D-Touch-3.png\" alt=\"成功添加 3D Touch 按钮\"><br></center>\n\n<h1 id=\"3-添加功能代码\"><a href=\"#3-添加功能代码\" class=\"headerlink\" title=\"3.添加功能代码\"></a>3.添加功能代码</h1><p>打开 AppDelegate.swift 在其中添加如下代码，这段代码对点击按钮操作进行了处理，点击按钮后会进入 App 弹出一个显示按钮名称的对话框：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -&gt; Void) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var sourceButtonTitle: String?</span><br><span class=\"line\"></span><br><span class=\"line\">    //根据按钮标题进行进一步操作</span><br><span class=\"line\">    switch shortcutItem.localizedTitle &#123;</span><br><span class=\"line\">    case &quot;3D Touch 测试按钮&quot;:</span><br><span class=\"line\">        sourceButtonTitle = &quot;来源按钮：3D Touch 测试按钮&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    case &quot;出来吧，小火龙！&quot;:</span><br><span class=\"line\">        sourceButtonTitle = &quot;来源按钮：出来吧，小火龙！&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    default:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试操作：弹出一个对话框显示来源按钮</span><br><span class=\"line\">    if let trySourceButtonTitle = sourceButtonTitle &#123;</span><br><span class=\"line\">        let alert = UIAlertController(title: nil, message: trySourceButtonTitle, preferredStyle: .alert)</span><br><span class=\"line\">        alert.addAction(UIAlertAction(title: &quot;知道啦&quot;, style: .cancel, handler: nil))</span><br><span class=\"line\">        self.window?.rootViewController?.present(alert, animated: true, completion: nil)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<center><br><img src=\"/images/3D-Touch-4.png\" alt=\"在 AppDelegate.swift 添加功能代码\"><br></center>\n\n<p>我们可以在这里添加代码从而实现根据不同来源按钮而执行不同的操作，结果如图所示：</p>\n<center><br><img src=\"/images/3D-Touch-5.png\" alt=\"操作结果\"><br></center>\n\n<h1 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4.其他\"></a>4.其他</h1><p>1.需要注意的是，快捷启动按钮最多只能添加 4 个。<br>2.最新的 iOS 10 系统会给所有的 App 额外添加一个 3D Touch 分享按钮，点击后不打开 App 而是调用系统分享该应用的 App Store 下载地址。</p>\n<hr>\n<p>参考资料：</p>\n<p><a href=\"http://iostuts.io/2015/10/08/how-to-add-quick-actions/\" target=\"_blank\" rel=\"noopener\">http://iostuts.io/2015/10/08/how-to-add-quick-actions/</a><br><a href=\"http://stackoverflow.com/questions/36369058/how-to-check-3d-touch-available-in-iphone-programatically\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/36369058/how-to-check-3d-touch-available-in-iphone-programatically</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/09/22/2016-09-22-3D-Touch/\">http://www.eyrefree.org/2016/09/22/2016-09-22-3D-Touch/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["3D Touch"]},{"title":"OS X 下统计项目代码行数","url":"http://www.eyrefree.org/2016/07/19/Wrap-Count/","content":"<p>这是一条普通的计算代码行数的命令，在终端中切换到源码文件所在目录下执行即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . &quot;(&quot; -name &quot;*.m&quot; -or -name &quot;*.mm&quot; -or -name &quot;*.swift&quot; -or -name &quot;*.cpp&quot; -or -name &quot;*.h&quot; -or -name &quot;*.rss&quot; &quot;)&quot; -print | xargs wc -l</span><br></pre></td></tr></table></figure>\n<p>可以计算代码行数，源码文件类型在命令里哦，可以根据自己需要修改，上面这条是计算 iOS 项目的，效果如下：</p>\n<p><img src=\"/images/Wrap-Count-1.png\" alt=\"Wrap-Count-1.png\"></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/07/19/2016-07-19-Wrap-Count/\">http://www.eyrefree.org/2016/07/19/2016-07-19-Wrap-Count/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["OS X"],"tags":["Nothing"]},{"title":"Momentum：一个赏心悦目的应用","url":"http://www.eyrefree.org/2016/06/02/Momentum-Introduction/","content":"<p>Momentum，一个赏心悦目的 Chrome 应用，主要用来替换 Chrome 原有的 New Tab 页面，每天会更新风景图片，图片主要来自<a href=\"https://500px.com/\" target=\"_blank\" rel=\"noopener\">500px</a>，来源和描述会显示在左下角，如图所示：</p>\n<p><img src=\"/images/Momentum-Introduction-1.png\" alt=\"Momentum-Introduction-1.png\"></p>\n<p>为我们增加了备忘、常用链接等实用的小工具（当然我只是为了看图…😂），在 Chrome应用商店的描述如下：</p>\n<p><img src=\"/images/Momentum-Introduction-2.png\" alt=\"Momentum-Introduction-2.png\"></p>\n<p>反正我觉得挺好用（看）的，😂，安利下，下载地址：<a href=\"https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/momentum/</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/06/02/2016-06-02-Momentum-Introduction/\">http://www.eyrefree.org/2016/06/02/2016-06-02-Momentum-Introduction/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Tool"],"tags":["Chrome"]},{"title":"译：SwiftLint 自述","url":"http://www.eyrefree.org/2016/05/11/SwiftLint-ReadMe/","content":"<p>原文链接：<a href=\"https://github.com/realm/SwiftLint/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/realm/SwiftLint/blob/master/README.md</a><br>译文链接：<a href=\"https://github.com/realm/SwiftLint/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/realm/SwiftLint/blob/master/README_CN.md</a></p>\n<hr>\n<p>SwiftLint 是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 <a href=\"https://github.com/github/swift-style-guide\" target=\"_blank\" rel=\"noopener\">GitHub’s Swift 代码风格指南</a>为基础。</p>\n<p>SwiftLint Hook 了 <a href=\"http://clang.llvm.org\" target=\"_blank\" rel=\"noopener\">Clang</a> 和 <a href=\"http://www.jpsim.com/uncovering-sourcekit\" target=\"_blank\" rel=\"noopener\">SourceKit</a> 从而能够使用 <a href=\"http://clang.llvm.org/docs/IntroductionToTheClangAST.html\" target=\"_blank\" rel=\"noopener\">AST</a> 来表示源代码文件的更多精确结果。</p>\n<p><img src=\"https://travis-ci.org/realm/SwiftLint.svg?branch=master\" alt=\"Test Status\"><br><a href=\"https://codecov.io/github/realm/SwiftLint?branch=master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codecov.io/github/realm/SwiftLint/coverage.svg?branch=master\" alt=\"codecov.io\"></a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-4d0ff83614f523a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用 <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install swiftlint</span><br></pre></td></tr></table></figure>\n<p>你也可以通过从<a href=\"https://github.com/realm/SwiftLint/releases/latest\" target=\"_blank\" rel=\"noopener\">最新的 GitHub 发布地址</a>下载<code>SwiftLint.pkg</code>然后执行的方式安装 SwiftLint。</p>\n<p>你也可以通过 Clone SwiftLint 的 Git 仓库到本地然后执行 <code>git submodule update --init --recursive; make install</code> (Xcode 7.1) 编译源代码的方式来安装。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h3><p>整合 SwiftLint 到 Xcode 体系中去从而可以使警告和错误显示到 IDE 上，只需要在 Xcode 中添加一个新的”Run Script Phase”并且包含如下代码即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">which</span> swiftlint &gt;/dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">  swiftlint</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-2700178bccd39d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.png\"></p>\n<h3 id=\"Atom\"><a href=\"#Atom\" class=\"headerlink\" title=\"Atom\"></a>Atom</h3><p>整合 SwiftLint 到 <a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Atom</a> 需要从 APM 安装<a href=\"https://atom.io/packages/linter-swiftlint\" target=\"_blank\" rel=\"noopener\"><code>linter-swiftlint</code></a>包。</p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ swiftlint help</span><br><span class=\"line\">Available commands:</span><br><span class=\"line\"></span><br><span class=\"line\">   autocorrect  Automatically correct warnings and errors</span><br><span class=\"line\">   help         Display general or command-specific help</span><br><span class=\"line\">   lint         Print lint warnings and errors for the Swift files in the current directory (default command)</span><br><span class=\"line\">   rules        Display the list of rules and their identifiers</span><br><span class=\"line\">   version      Display the current version of SwiftLint</span><br></pre></td></tr></table></figure>\n<p>在包含有需要执行代码分析的 Swift 源码文件的目录下执行 <code>swiftlint</code> 命令，会对目录进行递归查找。</p>\n<p>当使用 <code>lint</code> 或者 <code>autocorrect</code> 命令时，你可以通过添加 <code>--use-script-input-files</code> 选项并且设置以下实例变量：<code>SCRIPT_INPUT_FILE_COUNT</code> 和<br><code>SCRIPT_INPUT_FILE_0</code>, <code>SCRIPT_INPUT_FILE_1</code>… <code>SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT}</code> 的方式来指定一个文件列表（就像被 Xcode 特别是 <a href=\"https://github.com/norio-nomura/ExtraBuildPhase\" target=\"_blank\" rel=\"noopener\"><code>ExtraBuildPhase</code></a> Xcode 插件修改的文件组成的列表，或者类似 Git 工作树中 <code>git ls-files -m</code> 命令显示的被修改的文件列表）。</p>\n<p>也有类似的用来设置输入文件的环境变量以 <a href=\"http://indiestack.com/2014/12/speeding-up-custom-script-phases/\" target=\"_blank\" rel=\"noopener\">自定义 Xcode script phases</a> 。</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><p>现在只有很少的规则被实现了，但是我们希望 Swift 社区（就是你！）会在以后有更多的贡献，我们鼓励提交 Pull Requests。</p>\n<p>当前<em>正在</em>被实施的规则大多数只是作为一个基础，仅供参考。</p>\n<p>想要查看已实现的规则可以查看 <a href=\"Source/SwiftLintFramework/Rules\">Source/SwiftLintFramework/Rules</a> 目录。</p>\n<h3 id=\"在代码中关闭某个规则\"><a href=\"#在代码中关闭某个规则\" class=\"headerlink\" title=\"在代码中关闭某个规则\"></a>在代码中关闭某个规则</h3><p>可以通过在一个源文件中定义一个如下格式的注释来关闭某个规则：</p>\n<p><code>// swiftlint:disable &lt;rule&gt;</code></p>\n<p>在该文件结束之前或者在定义如下格式的匹配注释之前，这条规则都会被禁用：</p>\n<p><code>// swiftlint:enable &lt;rule&gt;</code></p>\n<p>例如:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiftlint:disable colon</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> noWarning :<span class=\"type\">String</span> = <span class=\"string\">\"\"</span> <span class=\"comment\">// No warning about colons immediately after variable names!</span></span><br><span class=\"line\"><span class=\"comment\">// swiftlint:enable colon</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hasWarning :<span class=\"type\">String</span> = <span class=\"string\">\"\"</span> <span class=\"comment\">// Warning generated about colons immediately after variable names</span></span><br></pre></td></tr></table></figure>\n<p>也可以通过添加 <code>:previous</code>, <code>:this</code> 或者 <code>:next</code> 来使关闭或者打开某条规则的命令分别应用于前一行，当前或者后一行代码。</p>\n<p>例如:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiftlint:disable:next force_cast</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> noWarning = <span class=\"type\">NSNumber</span>() <span class=\"keyword\">as</span>! <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hasWarning = <span class=\"type\">NSNumber</span>() <span class=\"keyword\">as</span>! <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> noWarning2 = <span class=\"type\">NSNumber</span>() <span class=\"keyword\">as</span>! <span class=\"type\">Int</span> <span class=\"comment\">// swiftlint:disable:this force_cast</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> noWarning3 = <span class=\"type\">NSNumber</span>() <span class=\"keyword\">as</span>! <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">// swiftlint:disable:previous force_cast</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>swiftlint rules</code> 命令可以输出所有可用的规则和他们的标识符组成的列表。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>可以通过在你需要执行 SwiftLint 的目录下添加一个 <code>.swiftlint.yml</code> 文件的方式来配置 SwiftLint。可以被配置的参数有：</p>\n<p>包含的规则:</p>\n<ul>\n<li><code>disabled_rules</code>: 关闭某些默认开启的规则.</li>\n<li><code>opt_in_rules</code>: 一些规则是可选的.</li>\n<li><code>whitelist_rules</code>: 不可以和 <code>disabled_rules</code> 或者 <code>opt_in_rules</code> 并列。类似一个白名单，只有在这个列表中的规则才是开启的。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">disabled_rules:</span> <span class=\"comment\"># 执行时排除掉的规则</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">colon</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">comma</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">control_statement</span></span><br><span class=\"line\"><span class=\"attr\">opt_in_rules:</span> <span class=\"comment\"># 一些规则仅仅是可选的</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">empty_count</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">missing_docs</span></span><br><span class=\"line\">  <span class=\"comment\"># 可以通过执行如下指令来查找所有可用的规则:</span></span><br><span class=\"line\">  <span class=\"comment\"># swiftlint rules</span></span><br><span class=\"line\"><span class=\"attr\">included:</span> <span class=\"comment\"># 执行 linting 时包含的路径。如果出现这个 `--path` 会被忽略。</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Source</span></span><br><span class=\"line\"><span class=\"attr\">excluded:</span> <span class=\"comment\"># 执行 linting 时忽略的路径。 优先级比 `included` 更高。</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Carthage</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Pods</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Source/ExcludedFolder</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Source/ExcludedFile.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可配置的规则可以通过这个配置文件来自定义</span></span><br><span class=\"line\"><span class=\"comment\"># 二进制规则可以设置他们的严格程度</span></span><br><span class=\"line\"><span class=\"attr\">force_cast:</span> <span class=\"string\">warning</span> <span class=\"comment\"># 隐式</span></span><br><span class=\"line\"><span class=\"attr\">force_try:</span></span><br><span class=\"line\"><span class=\"attr\">  severity:</span> <span class=\"string\">warning</span> <span class=\"comment\"># 显式</span></span><br><span class=\"line\"><span class=\"comment\"># 同时有警告和错误等级的规则，可以只设置它的警告等级</span></span><br><span class=\"line\"><span class=\"comment\"># 隐式</span></span><br><span class=\"line\"><span class=\"attr\">line_length:</span> <span class=\"number\">110</span></span><br><span class=\"line\"><span class=\"comment\"># 可以通过一个数组同时进行隐式设置</span></span><br><span class=\"line\"><span class=\"attr\">type_body_length:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">300</span> <span class=\"comment\"># warning</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">400</span> <span class=\"comment\"># error</span></span><br><span class=\"line\"><span class=\"comment\"># 或者也可以同时进行显式设置</span></span><br><span class=\"line\"><span class=\"attr\">file_length:</span></span><br><span class=\"line\"><span class=\"attr\">  warning:</span> <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"attr\">  error:</span> <span class=\"number\">1200</span></span><br><span class=\"line\"><span class=\"comment\"># 命名规则可以设置最小长度和最大程度的警告/错误</span></span><br><span class=\"line\"><span class=\"comment\"># 此外它们也可以设置排除在外的名字</span></span><br><span class=\"line\"><span class=\"attr\">type_name:</span></span><br><span class=\"line\"><span class=\"attr\">  min_length:</span> <span class=\"number\">4</span> <span class=\"comment\"># 只是警告</span></span><br><span class=\"line\"><span class=\"attr\">  max_length:</span> <span class=\"comment\"># 警告和错误</span></span><br><span class=\"line\"><span class=\"attr\">    warning:</span> <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"attr\">    error:</span> <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"attr\">  excluded:</span> <span class=\"string\">iPhone</span> <span class=\"comment\"># 排除某个名字</span></span><br><span class=\"line\"><span class=\"attr\">variable_name:</span></span><br><span class=\"line\"><span class=\"attr\">  min_length:</span> <span class=\"comment\"># 只有最小长度</span></span><br><span class=\"line\"><span class=\"attr\">    error:</span> <span class=\"number\">4</span> <span class=\"comment\"># 只有错误</span></span><br><span class=\"line\"><span class=\"attr\">  excluded:</span> <span class=\"comment\"># 排除某些名字</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">id</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">URL</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">GlobalAPIKey</span></span><br><span class=\"line\"><span class=\"attr\">reporter:</span> <span class=\"string\">\"xcode\"</span> <span class=\"comment\"># 报告类型 (xcode, json, csv, checkstyle)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定义自定义规则\"><a href=\"#定义自定义规则\" class=\"headerlink\" title=\"定义自定义规则\"></a>定义自定义规则</h4><p>你可以用如下语法在你的配置文件里定义基于正则表达式的自定义规则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_rules:</span></span><br><span class=\"line\"><span class=\"attr\">  pirates_beat_ninjas:</span> <span class=\"comment\"># 规则标识符</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">\"Pirates Beat Ninjas\"</span> <span class=\"comment\"># 规则名称，可选</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">\"([n,N]inja)\"</span> <span class=\"comment\"># 匹配的模式</span></span><br><span class=\"line\"><span class=\"attr\">    match_kinds:</span> <span class=\"comment\"># 需要匹配的语法类型，可选</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">comment</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">identifier</span></span><br><span class=\"line\"><span class=\"attr\">    message:</span> <span class=\"string\">\"Pirates are better than ninjas.\"</span> <span class=\"comment\"># 提示信息，可选</span></span><br><span class=\"line\"><span class=\"attr\">    severity:</span> <span class=\"string\">error</span> <span class=\"comment\"># 提示的级别，可选</span></span><br><span class=\"line\"><span class=\"attr\">  no_hiding_in_strings:</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">\"([n,N]inja)\"</span></span><br><span class=\"line\"><span class=\"attr\">    match_kinds:</span> <span class=\"string\">string</span></span><br></pre></td></tr></table></figure>\n<p>输出大概可能是这个样子的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1018190-c3caae77f520bbe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"custom-rule.png\"></p>\n<p>你可以通过提供一个或者多个 <code>match_kinds</code> 的方式来对匹配进行筛选，它会将含有不包括在列表中的语法类型的匹配排除掉。这里有全部可用的语法类型：</p>\n<ul>\n<li>argument</li>\n<li>attribute.builtin</li>\n<li>attribute.id</li>\n<li>buildconfig.id</li>\n<li>buildconfig.keyword</li>\n<li>comment</li>\n<li>comment.mark</li>\n<li>comment.url</li>\n<li>doccomment</li>\n<li>doccomment.field</li>\n<li>identifier</li>\n<li>keyword</li>\n<li>number</li>\n<li>objectliteral</li>\n<li>parameter</li>\n<li>placeholder</li>\n<li>string</li>\n<li>string_interpolation_anchor</li>\n<li>typeidentifier</li>\n</ul>\n<h4 id=\"嵌套配置\"><a href=\"#嵌套配置\" class=\"headerlink\" title=\"嵌套配置\"></a>嵌套配置</h4><p>SwiftLint 支持通过嵌套配置文件的方式来对代码分析过程进行更加细致的控制。</p>\n<ul>\n<li>在你的根 <code>.swiftlint.yml</code> 文件里设置 <code>use_nested_configs: true</code> 值。</li>\n<li>在目录结构必要的地方引入额外的 <code>.swiftlint.yml</code> 文件。</li>\n<li>每个文件被检查时会使用在文件所在目录下的或者父目录的更深层目录下的配置文件。否则根配置文件将会生效。</li>\n<li><code>excluded</code>， <code>included</code>，和 <code>use_nested_configs</code> 在嵌套结构中会被忽略。</li>\n</ul>\n<h3 id=\"自动更正\"><a href=\"#自动更正\" class=\"headerlink\" title=\"自动更正\"></a>自动更正</h3><p>SwiftLint 可以自动修正某些错误，磁盘上的文件会被一个修正后的版本覆盖。</p>\n<p>请确保在对文件执行 <code>swiftlint autocorrect</code> 之前有对它们做过备份，否则的话有可能导致重要数据的丢失。</p>\n<p>因为在执行自动更正修改某个文件后很有可能导致之前生成的代码检查信息无效或者不正确，所以当在执行代码更正时标准的检查是无法使用的。</p>\n<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p>MIT 许可。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/05/11/2016-05-11-SwiftLint-ReadMe/\">http://www.eyrefree.org/2016/05/11/2016-05-11-SwiftLint-ReadMe/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Swift"]},{"title":"iOS 获取当前 WiFi 信息","url":"http://www.eyrefree.org/2016/03/30/iOS-WiFi-Info/","content":"<p>此处以 Swift 代码为例</p>\n<hr>\n<h1 id=\"1-添加模块引用\"><a href=\"#1-添加模块引用\" class=\"headerlink\" title=\"1.添加模块引用\"></a>1.添加模块引用</h1><p>首先我们在需要获取 WiFi 信息的地方引用需要的模块：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SystemConfiguration.CaptiveNetwork</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-添加获取代码\"><a href=\"#2-添加获取代码\" class=\"headerlink\" title=\"2.添加获取代码\"></a>2.添加获取代码</h1><p>接下来编写获取 WiFi 信息的代码，如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取 WiFi 信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getWifiInfo</span><span class=\"params\">()</span></span> -&gt; (ssid: <span class=\"type\">String</span>, mac: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> cfas: <span class=\"type\">NSArray</span> = <span class=\"type\">CNCopySupportedInterfaces</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> cfa <span class=\"keyword\">in</span> cfas &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> dict = <span class=\"type\">CFBridgingRetain</span>(</span><br><span class=\"line\">                <span class=\"type\">CNCopyCurrentNetworkInfo</span>(cfa <span class=\"keyword\">as</span>! <span class=\"type\">CFString</span>)</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> ssid = dict[<span class=\"string\">\"SSID\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">String</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> bssid = dict[<span class=\"string\">\"BSSID\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (ssid, bssid)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">\"未知\"</span>, <span class=\"string\">\"未知\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-获取-WiFi-信息\"><a href=\"#3-获取-WiFi-信息\" class=\"headerlink\" title=\"3.获取 WiFi 信息\"></a>3.获取 WiFi 信息</h1><p>然后在我们需要获取 WiFi 信息的位置添加如下代码即可：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wifiInfo = getWifiInfo()</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(<span class=\"string\">\"SSID(WiFi名称): <span class=\"subst\">\\(wifiInfo.<span class=\"number\">0</span>)</span>\"</span>)</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(<span class=\"string\">\"BSSID(Mac地址): <span class=\"subst\">\\(wifiInfo.<span class=\"number\">1</span>)</span>\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"4-输出结果\"><a href=\"#4-输出结果\" class=\"headerlink\" title=\"4.输出结果\"></a>4.输出结果</h1><center><br><img src=\"/images/iOS-WiFi-Info-1.png\" alt=\"iOS-WiFi-Info-1\"><br></center>\n\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/03/30/2016-03-30-iOS-WiFi-Info/\">http://www.eyrefree.org/2016/03/30/2016-03-30-iOS-WiFi-Info/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Nothing"]},{"title":"OS X 下使用 Hexo 和 Coding Pages 搭建静态博客","url":"http://www.eyrefree.org/2016/03/23/Hexo-Coding-Pages/","content":"<p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一款基于 Node.js 的静态博客框架, 目前在 GitHub 上已有 9133 star 和 1499 fork。Hexo 生成的静态页面可以部署在 Github 或 Coding 上，并且能够免费绑定自己的域名，可以用来很方便地搭建个人博客。</p>\n<hr>\n<h1 id=\"1，Git-安装\"><a href=\"#1，Git-安装\" class=\"headerlink\" title=\"1，Git 安装\"></a>1，Git 安装</h1><p>搭建博客需要用到 git，下面这条命令可查看本机是否已安装 git，若未安装可参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000/\" target=\"_blank\" rel=\"noopener\">这篇博文</a>进行安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2，安装-Node-js\"><a href=\"#2，安装-Node-js\" class=\"headerlink\" title=\"2，安装 Node.js\"></a>2，安装 Node.js</h1><p>Mac下最简单的做法便是直接下载pkg文件进行安装，最新版本的下载地址如下，选择后缀为pkg的文件下载安装即可：<br><a href=\"https://nodejs.org/download/release/latest/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/download/release/latest/</a><br>完装完成后，要将以下路径计入你的系统环境变量 /usr/local/bin，步骤如下：<br>用vim 打开该文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>; vi .bash_profile</span><br></pre></td></tr></table></figure></p>\n<p>在文件中加入该语句：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure></p>\n<p>并保存退出，重新加载shell让设置的环境变量生效：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3，将-npm-的源替换成淘宝的源\"><a href=\"#3，将-npm-的源替换成淘宝的源\" class=\"headerlink\" title=\"3，将 npm 的源替换成淘宝的源\"></a>3，将 npm 的源替换成淘宝的源</h1><p>由于众所周知的原因，国内访问官方默认 npmjs.org 源速度不是十分理想，所以建议切换成国内的，利用以下命令将其替换为淘宝的 npm 源：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"4，安装-Hexo\"><a href=\"#4，安装-Hexo\" class=\"headerlink\" title=\"4，安装 Hexo\"></a>4，安装 Hexo</h1><p>利用 npm 命令安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>因为可能有文件读写权限的问题，这里推荐用 sudo，输入密码后会开始安装，时间可能比较长，耐心等待，如果长时间卡在某一步 Ctrl + C 终止当前任务后重试即可。</p>\n<h1 id=\"5，本地建立博客\"><a href=\"#5，本地建立博客\" class=\"headerlink\" title=\"5，本地建立博客\"></a>5，本地建立博客</h1><p>安装完成后，新建一个目录如 myblog 用于存放博客，切换到该目录下执行以下指令，Hexo 即会在目标文件夹初步生成博客所需要的所有文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>然后切换到该目录下执行如下命令，安装所需要的依赖：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install</span><br></pre></td></tr></table></figure></p>\n<p>网上有大量开发者们分享的模板可供选择使用，将它们的 Git 仓库 Clone 以后放到博客目录下的 themes 文件夹中即可：<br><a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">Github Hexo Themes</a><br><a href=\"http://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">有哪些好看的 Hexo 主题？</a><br>本博客的搭建我选择了使用该主题：<br><a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/fexo</a><br>在这里对原作者 forsigner 表示感谢，🙏</p>\n<h1 id=\"6，安装-Server-组件\"><a href=\"#6，安装-Server-组件\" class=\"headerlink\" title=\"6，安装 Server 组件\"></a>6，安装 Server 组件</h1><p>保持在本地博客路径下，在终端中执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo</span><br></pre></td></tr></table></figure></p>\n<p>因为这并不是一个完整的命令，所以这时我们可以看到 hexo 输出的帮助信息，如下图所示：</p>\n<center><br><img src=\"/images/Hexo-Coding-Pages-1.png\" alt=\"Hexo-Coding-Pages-1\"><br></center>\n\n<p>我们可以在左边的 Commands 列表中查看我们需要的命令是否已成功安装，因为某些版本的 Hexo 的 Server 模块需要独立安装所以这里我们并没有看到 server 命令，我们可以执行下面这条命令来进行安装，如果有的话可以跳过这一步：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-server --save</span><br></pre></td></tr></table></figure></p>\n<p>如果安装过程中出现一些问题导致某些模块没有安装成功的也可以通过类似的方式单独安装某个模块进行修复。</p>\n<h1 id=\"7，安装-RSS-插件（可忽略）\"><a href=\"#7，安装-RSS-插件（可忽略）\" class=\"headerlink\" title=\"7，安装 RSS 插件（可忽略）\"></a>7，安装 RSS 插件（可忽略）</h1><p>到博客所在目录 myblog 下，利用该命令安装 RSS 插件，暂时不需添加 RSS 功能的同学可忽略该步骤：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>\n<p>编辑 myblog 目录下的 _config.yml，添加如下代码开启 RSS 功能：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rss: /atom.xml</span><br></pre></td></tr></table></figure></p>\n<p>RSS 地址保持默认即可，不需要多做修改。</p>\n<h1 id=\"8，本地效果预览\"><a href=\"#8，本地效果预览\" class=\"headerlink\" title=\"8，本地效果预览\"></a>8，本地效果预览</h1><p>在终端使用 cd 命令切换到博客所在目录 myblog，执行如下命令生成静态博客页面并启动本地服务器，若成功可在浏览器中访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 进行预览。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></p>\n<p>或者如下的缩写形式也可以：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"9，部署到-Coding-Pages\"><a href=\"#9，部署到-Coding-Pages\" class=\"headerlink\" title=\"9，部署到 Coding Pages\"></a>9，部署到 Coding Pages</h1><p>在 Coding 新建一个项目，假设为 myblog，然后修改本地博客目录下的 _config.yml 文件，根据<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>的描述，修改以下几个参数，这些参数一般在文件底部：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git               <span class=\"comment\">#部署方式，这里我们用的是Coding的Git</span></span><br><span class=\"line\">repo: &lt;repository url&gt;  <span class=\"comment\">#仓库地址，例如我的是git@git.coding.net:eyrefree/myblog.git   </span></span><br><span class=\"line\">branch: [branch]        <span class=\"comment\">#分支名，可任意填写，我填写的是master</span></span><br><span class=\"line\">message: [message]      <span class=\"comment\">#可不填，这是显示在提交记录里的描述信息，默认为日期</span></span><br></pre></td></tr></table></figure></p>\n<p>参数修改完成后，我们需要在终端中切换到博客所在目录安装 deploy 组建，执行以下命令将生成的博客静态页面 push 到我们上面在 Coding 创建的 myblog 仓库中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>然后执行依次执行清理命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>生成命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<p>部署命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>如果在 _config.yml 的 repo 处填写的仓库地址是 https 形式的，在部署时可能需要输入你的 Coding 账号和密码。<br>然后切换到该项目的 Pages 标签，开启 pages 服务，分支名填写为我们在_config.yml 文件中设定的分支，我的是 master。</p>\n<h1 id=\"10，服务器效果预览\"><a href=\"#10，服务器效果预览\" class=\"headerlink\" title=\"10，服务器效果预览\"></a>10，服务器效果预览</h1><p>pages 服务开启完成后，Coding 会提供一个类似 {user_name}.coding.me/{project_name} 的链接用于访问，例如用户名为 eyrefree 项目名为 myblog 的链接应该是：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://eyrefree.coding.me/myblog</span><br></pre></td></tr></table></figure></p>\n<p>访问该链接即可进行预览，由于我们引用的资源很多是和域名相关的，导致这里可能会有资源加载失败的情况，只能出现部分文字，接下来我们将域名绑定后即可恢复正常。</p>\n<h1 id=\"11，绑定域名\"><a href=\"#11，绑定域名\" class=\"headerlink\" title=\"11，绑定域名\"></a>11，绑定域名</h1><p>默认提供的链接可能过长或者不便于日常使用，我们也可以绑定自己的域名。<br>首先，需要提前准备一个域名，然后打开自己的域名控制面板，新建一个 CNAME 解析到 {user_name}.coding.me，例如我的是将 www.eyrefree.org 解析到 eyrefree.coding.me；<br>然后，打开 Coding 项目页面切换到 pages 项，填入刚才的设置解析的域名 www.eyrefree.org，点击“添加域名绑定”按钮即可，在浏览器中直接访问 www.eyrefree.org 就能成功打开。<br>有时可能由于缓存或者解析时间的问题，稍等片刻即可。 </p>\n<h1 id=\"12，编写博文\"><a href=\"#12，编写博文\" class=\"headerlink\" title=\"12，编写博文\"></a>12，编写博文</h1><p>接下来就是日常的博文编写啦，这里是使用 markdown 格式的，编写完成后添加到 source/_posts 目录下然后按照第 8 步的方法部署到 Coding 服务器即可，具体可参考<a href=\"http://www.jianshu.com/p/3c7ddd48bfa9\" target=\"_blank\" rel=\"noopener\">这篇博文</a>，Markdown 的一些语法可以参考：<br><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">http://wowubuntu.com/markdown/</a></p>\n<h1 id=\"13，常见问题\"><a href=\"#13，常见问题\" class=\"headerlink\" title=\"13，常见问题\"></a>13，常见问题</h1><p>若执行 hexo 命令时出现如下警告信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以尝试执行以下命令修复：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>嘛，大概就是这些内容了，有遗漏的话会继续补充，😝。<a href=\"http://www.eyrefree.org\">我的博客</a>是用 Hexo 生成的使用了 Fexo 模版，开启了 Google 统计，Disqus 评论，RSS 订阅，站内搜索等，详情参见我的 Coding 仓库的 Hexo 分支：<br><a href=\"https://coding.net/u/eyrefree/p/blog.eyrefree.org/git\" target=\"_blank\" rel=\"noopener\">https://coding.net/u/eyrefree/p/blog.eyrefree.org/git</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/03/23/2016-03-23-Hexo-Coding-Pages/\">http://www.eyrefree.org/2016/03/23/2016-03-23-Hexo-Coding-Pages/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Blog"],"tags":["Hexo"]},{"title":"iOS 在 App 中获取 XCode 构建信息","url":"http://www.eyrefree.org/2016/03/08/iOS-Build-Info/","content":"<p>iOS 在 App 中获取当前版本的构建时间和 Git Hash 值，Demo 地址：<br><a href=\"https://github.com/EyreFree/EFBuildInfoDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFBuildInfoDemo</a></p>\n<hr>\n<h1 id=\"1-添加-Run-Script\"><a href=\"#1-添加-Run-Script\" class=\"headerlink\" title=\"1.添加 Run Script\"></a>1.添加 Run Script</h1><p>打开需要获取构建信息的工程，选中工程，切换到 Build Phases 选项卡，点击左边的“+”号选择“New Run Script Phase”一项添加一个新的 Run Script：</p>\n<center><br><img src=\"/images/iOS-Build-Info-1.png\" alt=\"iOS-Build-Info-1\"><br></center>\n\n<p>并将其命名为“Build Config”，然后将其拖动到“Target Dependencies”的下面：</p>\n<center><br><img src=\"/images/iOS-Build-Info-2.png\" alt=\"iOS-Build-Info-2\"><br></center>\n\n<h1 id=\"2-为-Run-Script-添加代码\"><a href=\"#2-为-Run-Script-添加代码\" class=\"headerlink\" title=\"2.为 Run Script 添加代码\"></a>2.为 Run Script 添加代码</h1><p>点开“Build Config”左边的小三角，在其中填写如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">myFile=<span class=\"string\">\"BuildConfig.plist\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myDate=`date +%Y-%m-%dT%H:%M:%S%z`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myDate</span></span><br><span class=\"line\">myHash=`git rev-parse --short HEAD`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myHash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f <span class=\"string\">\"<span class=\"variable\">$myFile</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    /usr/libexec/PlistBuddy -c <span class=\"string\">\"Add :BUILD_TIME string <span class=\"variable\">$myDate</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$myFile</span>\"</span></span><br><span class=\"line\">    /usr/libexec/PlistBuddy -c <span class=\"string\">\"Add :GIT_SHA string <span class=\"variable\">$myHash</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$myFile</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    /usr/libexec/PlistBuddy -c <span class=\"string\">\"Set :BUILD_TIME <span class=\"variable\">$myDate</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$myFile</span>\"</span></span><br><span class=\"line\">    /usr/libexec/PlistBuddy -c <span class=\"string\">\"Set :GIT_SHA <span class=\"variable\">$myHash</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$myFile</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<center><br><img src=\"/images/iOS-Build-Info-3.png\" alt=\"iOS-Build-Info-3\"><br></center>\n\n<h1 id=\"3-生成-BuildConfig-plist-文件\"><a href=\"#3-生成-BuildConfig-plist-文件\" class=\"headerlink\" title=\"3.生成 BuildConfig.plist 文件\"></a>3.生成 BuildConfig.plist 文件</h1><p>然后我们编译一次就可以发现，这段代码会在编译时在工程所在目录下生成一个 BuildConfig.plist 文件，其中包含了本次构建的时间和当前版本的 GitHash，以后每一次 XCode 构建时都会自动更新该文件，详细内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC <span class=\"string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;plist version=<span class=\"string\">\"1.0\"</span>&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;BUILD_TIME&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;2016-03-30T09:38:04+0800&lt;/string&gt;</span><br><span class=\"line\">        &lt;key&gt;GIT_SHA&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;3e4d213&lt;/string&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure></p>\n<center><br><img src=\"/images/iOS-Build-Info-4.png\" alt=\"iOS-Build-Info-4\"><br></center>\n\n<h1 id=\"4-获取-BuildConfig-plist-文件内容\"><a href=\"#4-获取-BuildConfig-plist-文件内容\" class=\"headerlink\" title=\"4.获取 BuildConfig.plist 文件内容\"></a>4.获取 BuildConfig.plist 文件内容</h1><p>将 BuildConfig.plist 添加到我们的工程中：</p>\n<center><br><img src=\"/images/iOS-Build-Info-5.png\" alt=\"iOS-Build-Info-5\"><br></center>\n\n<p>然后在需要获取构建信息的位置添加如下代码就能成功获取构建时间和 Git Hash 值：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//输出构建信息</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bulidTime: <span class=\"type\">String</span>!</span><br><span class=\"line\"><span class=\"keyword\">var</span> gitSha: <span class=\"type\">String</span>!</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> buildConfigFilePath = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\">    .pathForResource(<span class=\"string\">\"BuildConfig\"</span>, ofType: <span class=\"string\">\"plist\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> dict = <span class=\"type\">NSDictionary</span>(contentsOfFile: buildConfigFilePath) &#123;</span><br><span class=\"line\">        bulidTime = dict[<span class=\"string\">\"BUILD_TIME\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">String</span> ?? <span class=\"string\">\"未知\"</span></span><br><span class=\"line\">        gitSha = dict[<span class=\"string\">\"GIT_SHA\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">String</span> ?? <span class=\"string\">\"未知\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"BUILD_TIME: <span class=\"subst\">\\(bulidTime)</span>\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"GIT_SHA: <span class=\"subst\">\\(gitSha)</span>\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果如图所示：</p>\n<center><br><img src=\"/images/iOS-Build-Info-6.png\" alt=\"iOS-Build-Info-6\"><br></center>\n\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/03/08/2016-03-08-iOS-Build-Info/\">http://www.eyrefree.org/2016/03/08/2016-03-08-iOS-Build-Info/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Nothing"]},{"title":"OS X 下使用 Jekyll 和 Coding Pages 搭建静态博客","url":"http://www.eyrefree.org/2016/03/01/Jekyll-Coding-Pages/","content":"<p>Jekyll 是一个免费的简单静态网页生成工具，可以配合第三方服务例如 Disqus 实现一些扩展功能，不需要数据库支持。并且 Jekyll 可以部署在Github 或 Coding 上，可以绑定自己的域名，而且目前这是完全免费的。</p>\n<hr>\n<h1 id=\"1，Git-安装\"><a href=\"#1，Git-安装\" class=\"headerlink\" title=\"1，Git 安装\"></a>1，Git 安装</h1><p>搭建博客需要用到 git，git –version 命令可查看本机是否已安装 git，若未安装可参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000/\" target=\"_blank\" rel=\"noopener\">这篇博文</a>进行安装。</p>\n<h1 id=\"2，Gem-安装-设置\"><a href=\"#2，Gem-安装-设置\" class=\"headerlink\" title=\"2，Gem 安装/设置\"></a>2，Gem 安装/设置</h1><p>安装 Jekyll 需要用到包管理器 gem，gem -v 命令可查看本机是否已安装 gem，若未安装请自行安装。<br>由于众所周知的原因，国内访问官方默认 gem sources 源速度不是十分理想，所以建议切换成国内的，利用 gem sources -l 命令可查看当前 gem sources 源：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem sources --remove http://rubygems.org/</span><br></pre></td></tr></table></figure></p>\n<p>然后利用以下命令将其替换为淘宝的（注意：这里的 <a href=\"http://rubygems.org/\" target=\"_blank\" rel=\"noopener\">http://rubygems.org/</a> 替换成当前 gem sources 源地址）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3，安装-Jekyll-到本地\"><a href=\"#3，安装-Jekyll-到本地\" class=\"headerlink\" title=\"3，安装 Jekyll 到本地\"></a>3，安装 Jekyll 到本地</h1><p>因为打算在 Coding Pages 上搭建，根据 <a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"noopener\">Coding 帮助文档</a>，Coding Pages 目前支持 jekyll 2.4.0，所以我们需要指定版本安装 Jekyll，终端执行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gem install jekyll -v <span class=\"string\">'2.4.0'</span></span><br></pre></td></tr></table></figure></p>\n<p>输入密码后等待安装完成，执行以下命令尝试查看 Jekyll 版本号：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jekyll -v</span><br></pre></td></tr></table></figure></p>\n<p>若能正确显示版本号 jekyll 2.4.0 表示安装成功。 </p>\n<h1 id=\"4，本地建立博客\"><a href=\"#4，本地建立博客\" class=\"headerlink\" title=\"4，本地建立博客\"></a>4，本地建立博客</h1><p>从零开始手动编写的话可以参考：<a href=\"http://www.blogways.net/blog/2013/04/13/jekyll-usage.html\" target=\"_blank\" rel=\"noopener\">这篇博文</a>，同时网上有大量开发者们分享的模板可供选择使用：<br><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll Themes</a><br><a href=\"https://github.com/jekyll/jekyll/wiki/Sites\" target=\"_blank\" rel=\"noopener\">Github Jekyll Sites</a><br>本博客的搭建我选择了在该<a href=\"https://github.com/sl4m/skim.cc\" target=\"_blank\" rel=\"noopener\">模板</a>的基础上进行修改，在这里对原作者表示感谢，🙏<br>在终端中切换到合适的目录下执行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/sl4m/skim.cc.git</span><br></pre></td></tr></table></figure></p>\n<p>将模板 git 仓库下载到本地。</p>\n<h1 id=\"5，本地效果预览\"><a href=\"#5，本地效果预览\" class=\"headerlink\" title=\"5，本地效果预览\"></a>5，本地效果预览</h1><p>终端中用 cd 命令切换到本地博客所在目录，即 skim.cc 目录下，执行 jekyll server 命令启动本地服务器，若启动成功可在浏览器中访问 <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a> 进行预览。 </p>\n<h1 id=\"6，上传到-Coding-Pages\"><a href=\"#6，上传到-Coding-Pages\" class=\"headerlink\" title=\"6，上传到 Coding Pages\"></a>6，上传到 Coding Pages</h1><p>在 Coding 新建一个项目，将博客所在项目 push 到新建的项目中，推荐的做法是创建一个新的 coding-pages 分支来作为启动 Coding Pages 之用（其他分支名也可以），然后切换到 Pages 标签，开启 pages 服务，分支名填写为我们需要的分支，这里是 coding-pages。</p>\n<h1 id=\"7，服务器效果预览\"><a href=\"#7，服务器效果预览\" class=\"headerlink\" title=\"7，服务器效果预览\"></a>7，服务器效果预览</h1><p>这时 Coding 会提供一个类似 {user_name}.coding.me/{project_name} 的链接用于访问，例如本博客的是：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[http://eyrefree.coding.me/blog.eyrefree.org](http://eyrefree.coding.me/blog.eyrefree.org)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"8，绑定域名\"><a href=\"#8，绑定域名\" class=\"headerlink\" title=\"8，绑定域名\"></a>8，绑定域名</h1><p>默认提供的链接可能过长或者不便于日常使用，我们也可以绑定自己的域名。<br>首先，需要提前准备一个域名，然后打开自己的域名控制面板，新建一个 CNAME 解析到 {user_name}.coding.me，例如我的是将 blog.eyrefree.org 解析到 eyrefree.coding.me；<br>然后，打开 Coding 项目页面切换到 pages 项，填入刚才的设置解析的域名 blog.eyrefree.org，点击“添加域名绑定”按钮即可，在浏览器中直接访问 blog.eyrefree.org 就能成功打开。<br>有时可能由于缓存或者解析时间的问题，稍等片刻即可。 </p>\n<h1 id=\"9，编写博文\"><a href=\"#9，编写博文\" class=\"headerlink\" title=\"9，编写博文\"></a>9，编写博文</h1><p>接下来就是日常的博文编写啦，这里是使用 markdown 格式的，编写完成后添加到 _posts 目录下 push 到 Coding 服务器即可，具体可参考<a href=\"https://segmentfault.com/a/1190000000406013\" target=\"_blank\" rel=\"noopener\">这篇博文</a>。</p>\n<hr>\n<p>嘛，大概就是这些内容了，有遗漏的话后期会继续补充，😝，<a href=\"http://www.eyrefree.org\">我的博客</a>在原模版基础上将 Google 统计，Disqus 评论，feedburner 等替换为了自己的，其他的一些修改详情参见我的 Coding 仓库的 Jekyll 分支：<br><a href=\"https://coding.net/u/eyrefree/p/blog.eyrefree.org/git\" target=\"_blank\" rel=\"noopener\">https://coding.net/u/eyrefree/p/blog.eyrefree.org/git</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/03/01/2016-03-01-Jekyll-Coding-Pages/\">http://www.eyrefree.org/2016/03/01/2016-03-01-Jekyll-Coding-Pages/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Blog"],"tags":["Jekyll"]},{"title":"iOS 集成广点通移动 App 激活数据统计 API 上报方案","url":"http://www.eyrefree.org/2016/02/18/iOS-GuangDianTong/","content":"<p>iOS 集成广点通移动 App 激活数据统计 API 上报方案。</p>\n<p>Demo 地址：<a href=\"https://github.com/EyreFree/EFGuangDianTongDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFGuangDianTongDemo</a></p>\n<hr>\n<h1 id=\"一，获取参数\"><a href=\"#一，获取参数\" class=\"headerlink\" title=\"一，获取参数\"></a>一，获取参数</h1><h2 id=\"1，Apple-ID\"><a href=\"#1，Apple-ID\" class=\"headerlink\" title=\"1，Apple ID\"></a>1，Apple ID</h2><p>Apple ID 是一个数字，每一个 iOS 应用都有一个 Apple ID，打开 <a href=\"http://itunesconnect.apple.com\" target=\"_blank\" rel=\"noopener\">iTunesConnect</a>，点击我们所需要集成广点通的 App 进入详情页面，点击左边的“App 信息”，找到其中的“综合信息”一项，其中包含我们需要的 Apple ID，如下图所示：</p>\n<center><br><img src=\"/images/iOS-GuangDianTong-1.png\" alt=\"iOS-GuangDianTong-1\"><br></center>\n\n<h2 id=\"2，UID\"><a href=\"#2，UID\" class=\"headerlink\" title=\"2，UID\"></a>2，UID</h2><p>UID 是一个数字，它是我们在广点通的账户 ID，打开<a href=\"http://e.qq.com\" target=\"_blank\" rel=\"noopener\">广点通</a>进入管理平台，在最顶部的显示的账户信息中的“账户 ID”就是我们需要的 UID，如下图所示：</p>\n<center><br><img src=\"/images/iOS-GuangDianTong-2.png\" alt=\"iOS-GuangDianTong-2\"><br></center>\n\n<h2 id=\"3，EncryptKey-和-SignKey\"><a href=\"#3，EncryptKey-和-SignKey\" class=\"headerlink\" title=\"3，EncryptKey 和 SignKey\"></a>3，EncryptKey 和 SignKey</h2><p>每一个 AppID 广点通会分配给我们一个加密密钥 encrypt_key 和一个签名密钥 sign_key，打开<a href=\"http://e.qq.com\" target=\"_blank\" rel=\"noopener\">广点通</a>进入管理平台，点击左边的“工具箱”然后选择“转化跟踪”，然后点击“创建新转化”，依次输入信息创建对应 App 的转化，注意“转化方案”一项选择“API方案二”，提交后会在列表中出现一个我们新创建的转化，点击“查看”，就会得到我们需要的 encrypt_key 和 sign_key，如下图所示：</p>\n<center><br><img src=\"/images/iOS-GuangDianTong-3.png\" alt=\"iOS-GuangDianTong-3\"><br></center>\n\n<h1 id=\"二，实现-API-上报方案\"><a href=\"#二，实现-API-上报方案\" class=\"headerlink\" title=\"二，实现 API 上报方案\"></a>二，实现 API 上报方案</h1><p>根据文档实现了 API 上报方案流程，代码参见：<a href=\"https://github.com/EyreFree/EFGuangDianTongDemo/blob/master/EFGuangDianTongDemo/EFGuangDianTong.swift\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/EFGuangDianTongDemo/blob/master/EFGuangDianTongDemo/EFGuangDianTong.swift</a></p>\n<h1 id=\"三，调用方式\"><a href=\"#三，调用方式\" class=\"headerlink\" title=\"三，调用方式\"></a>三，调用方式</h1><h2 id=\"1，添加第三方库\"><a href=\"#1，添加第三方库\" class=\"headerlink\" title=\"1，添加第三方库\"></a>1，添加第三方库</h2><p>需要添加 Alamofire 用于网络操作，Demo 中是通过 CocoaPods 的方式引用，所以在将 Demo Clone 下来后要先进行 pod install 操作，具体内容可参考这篇博文：<a href=\"http://code4app.com/article/cocoapods-install-usage\" target=\"_blank\" rel=\"noopener\">CocoaPods安装和使用教程</a></p>\n<h2 id=\"2，添加头文件\"><a href=\"#2，添加头文件\" class=\"headerlink\" title=\"2，添加头文件\"></a>2，添加头文件</h2><p>由于实现 API 上报方案的过程中需要用到 MD5 加密，所以需要添加相应的 Objective-C 头文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#import &lt;CommonCrypto/CommonDigest.h&gt;</span><br></pre></td></tr></table></figure>\n<p>由于我们这里是 Swift 工程，所以添加 OC 头文件需要通过给项目添加一个用于桥接的头文件，具体过程可参考：<a href=\"http://blog.sina.com.cn/s/blog_8d1bc23f0102v5tl.html\" target=\"_blank\" rel=\"noopener\">IOS — OC与Swift混编</a></p>\n<h2 id=\"3，添加实现代码\"><a href=\"#3，添加实现代码\" class=\"headerlink\" title=\"3，添加实现代码\"></a>3，添加实现代码</h2><p>将 Demo 中的 EFGuangDianTong.swift 文件添加到需要集成广点通统计的项目中。</p>\n<h2 id=\"4，调用-API-上报方法\"><a href=\"#4，调用-API-上报方法\" class=\"headerlink\" title=\"4，调用 API 上报方法\"></a>4，调用 API 上报方法</h2><p>在 AppDelegate 的 didFinishLaunchingWithOptions 方法中合适的地方添加如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">EFGuangDianTong</span>.sharedInstance.<span class=\"type\">Schema2</span>(</span><br><span class=\"line\">      appid: <span class=\"number\">111111111</span>,              <span class=\"comment\">//替换为我们的 Apple ID</span></span><br><span class=\"line\">      uid: <span class=\"number\">222222</span>,                   <span class=\"comment\">//替换为我们的 UID</span></span><br><span class=\"line\">      signKey: <span class=\"string\">\"xxxxxxxxxxxxxxxx\"</span>,   <span class=\"comment\">//替换为我们的 sign_key</span></span><br><span class=\"line\">      encryptKey: <span class=\"string\">\"zzzzzzzzzzzzzzzz\"</span> <span class=\"comment\">//替换为我们的 encrypt_key</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，查看返回状态\"><a href=\"#5，查看返回状态\" class=\"headerlink\" title=\"5，查看返回状态\"></a>5，查看返回状态</h2><p>若上报成功，则 XCode 下方的控制台会输出“广点通上报:成功”；<br>若失败则会根据返回码输出具体失败原因，可以根据输出的错误信息来做相应的检查。</p>\n<h1 id=\"四，备注\"><a href=\"#四，备注\" class=\"headerlink\" title=\"四，备注\"></a>四，备注</h1><p>集成广点通需要使用 IDFA，请在 App 提交审核时注意勾选相应选项，否则容易导致二进制文件被拒绝。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2016/02/18/2016-02-18-iOS-GuangDianTong/\">http://www.eyrefree.org/2016/02/18/2016-02-18-iOS-GuangDianTong/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Nothing"]},{"title":"Swift UIColor 添加从十六进制值初始化的扩展","url":"http://www.eyrefree.org/2015/09/10/Swift-UIColor-Hex/","content":"<p>在实际开发中，我们拿到的设计图上的颜色往往标注的是十六进制的，而在不添加第三方库的情况下 UIColor 并不支持从十六进制数字初始化，手动将十六进制颜色转化为 RGB 形式十分浪费精力，我们可以通过为 UIColor 添加扩展的方式来支持直接从十六进制数值初始化从而为我们的开发带来便利。</p>\n<hr>\n<h1 id=\"1-添加文件\"><a href=\"#1-添加文件\" class=\"headerlink\" title=\"1.添加文件\"></a>1.添加文件</h1><p>在项目中添加一个用于编写扩展代码的文件，将其命名为 <code>UIColor+valueRGB.swift</code>。</p>\n<h1 id=\"2-添加扩展代码\"><a href=\"#2-添加扩展代码\" class=\"headerlink\" title=\"2.添加扩展代码\"></a>2.添加扩展代码</h1><p>在第一步创建的文件中添加如下代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIColor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用数值初始化颜色，便于生成设计图上标明的十六进制颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(valueRGB: <span class=\"type\">UInt</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(</span><br><span class=\"line\">            red: <span class=\"type\">CGFloat</span>((valueRGB &amp; <span class=\"number\">0xFF0000</span>) &gt;&gt; <span class=\"number\">16</span>) / <span class=\"number\">255.0</span>,</span><br><span class=\"line\">            green: <span class=\"type\">CGFloat</span>((valueRGB &amp; <span class=\"number\">0x00FF00</span>) &gt;&gt; <span class=\"number\">8</span>) / <span class=\"number\">255.0</span>,</span><br><span class=\"line\">            blue: <span class=\"type\">CGFloat</span>(valueRGB &amp; <span class=\"number\">0x0000FF</span>) / <span class=\"number\">255.0</span>,</span><br><span class=\"line\">            alpha: <span class=\"type\">CGFloat</span>(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-调用\"><a href=\"#3-调用\" class=\"headerlink\" title=\"3.调用\"></a>3.调用</h1><p>然后我们就可以在工程中以如下方式直接从十六进制数字初始化 UIColor 了：<br><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> testColor = <span class=\"type\">UIColor</span>(valueRGB: <span class=\"number\">0x666666</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>实际上这里没有做十六进制的限定，只需要是 UInt 类型都可以，但是貌似暂时没发现什么实际意义，用来生成随机颜色？或者是画颜色表？大家可以自行挖掘下，😊</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/09/10/2015-09-10-Swift-UIColor-Hex/\">http://www.eyrefree.org/2015/09/10/2015-09-10-Swift-UIColor-Hex/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Swift"]},{"title":"XCode 中 Swift / Objective-C / C / C++ 混合编程","url":"http://www.eyrefree.org/2015/09/06/XCode-Swift-Objective-C-C-C++/","content":"<p>Swift 是苹果于2014年 WWDC 发布的一种新的用于编写 iOS 和 OS X 应用的编程语言，可与 Objective-C / C / C++ 进行混合编程。</p>\n<hr>\n<h1 id=\"1-Objective-C-调用-C\"><a href=\"#1-Objective-C-调用-C\" class=\"headerlink\" title=\"1.Objective-C 调用 C\"></a>1.Objective-C 调用 C</h1><p>Objective-C 是 C 的超集，所以 Objective-C 完全兼容 C，可以直接在 Objective-C 代码中写 C 代码无需修改。</p>\n<h1 id=\"2-Objective-C-调用-C\"><a href=\"#2-Objective-C-调用-C\" class=\"headerlink\" title=\"2.Objective-C 调用 C++\"></a>2.Objective-C 调用 C++</h1><p>Xcode 需要源文件以 .mm 为扩展名，这样才能启动编译器的 Objective-C++ 扩展，在 .mm 文件内可以编写 C++ 代码也可以编写 Objective-C 代码，支持大部分的 C++ 的特性，几乎完全兼容 GNU C/C++。</p>\n<h1 id=\"3-Swift-调用-Objective-C\"><a href=\"#3-Swift-调用-Objective-C\" class=\"headerlink\" title=\"3.Swift 调用 Objective-C\"></a>3.Swift 调用 Objective-C</h1><h2 id=\"1-添加桥接文件\"><a href=\"#1-添加桥接文件\" class=\"headerlink\" title=\"1.添加桥接文件\"></a>1.添加桥接文件</h2><p>添加一个新的头文件到工程中作为桥接文件，建议命名为 <code>{project_name}-Bridging-Header.h</code>，这里我命名为 SwiftMixedDemo-Bridging-Header.h，如图所示：</p>\n<center><br><img src=\"/images/XCode-Swift-Objective-C-C-C++-1.png\" alt=\"XCode-Swift-Objective-C-C-C++-1\"><br></center>\n\n<h2 id=\"2-设置-Objective-C-Bridging-Header\"><a href=\"#2-设置-Objective-C-Bridging-Header\" class=\"headerlink\" title=\"2.设置 Objective-C Bridging Header\"></a>2.设置 Objective-C Bridging Header</h2><p>选中工程名，切换到 Build Settings 选项卡，选中 All，在右上角的搜索栏中输入 bridging 找到 <code>Objective-C Bridging Header</code> 一项，并将其设为 <code>{project_name}/{project_name}-Bridging-Header.h</code>，这里我设为 SwiftMixedDemo/SwiftMixedDemo-Bridging-Header.h，如图所示：</p>\n<center><br><img src=\"/images/XCode-Swift-Objective-C-C-C++-2.png\" alt=\"XCode-Swift-Objective-C-C-C++-2\"><br></center>\n\n<h2 id=\"3-添加-Objective-C-文件\"><a href=\"#3-添加-Objective-C-文件\" class=\"headerlink\" title=\"3.添加 Objective-C 文件\"></a>3.添加 Objective-C 文件</h2><p>将需要引入的 Objective-C 文件添加到项目，然后将相应的头文件添加到桥接文件 SwiftMixedDemo-Bridging-Header.h 中：</p>\n<center><br><img src=\"/images/XCode-Swift-Objective-C-C-C++-3.png\" alt=\"XCode-Swift-Objective-C-C-C++-3\"><br></center>\n\n<p>接下来即可正常调用 Objective-C 文件中的代码。</p>\n<h2 id=\"4-Swift-调用-C-C\"><a href=\"#4-Swift-调用-C-C\" class=\"headerlink\" title=\"4.Swift 调用 C/C++\"></a>4.Swift 调用 C/C++</h2><p>并且 Swift 不能直接调用 C/C++，但可以通过调用 Objective-C 代码的方式间接调用 C/C++。</p>\n<hr>\n<p>PS：<code>{project_name}</code> 代指工程名。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/09/06/2015-09-06-XCode-Swift-Objective-C-C-C++/\">http://www.eyrefree.org/2015/09/06/2015-09-06-XCode-Swift-Objective-C-C-C++/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Swift"]},{"title":"在需要兼容 iOS 7.0 及以下的项目中使用 Alamofire","url":"http://www.eyrefree.org/2015/08/14/iOS7-Alamofire/","content":"<p>Alamofire 是 iOS 和 OS X 上最受欢迎的第三方库之一，它在 <a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"noopener\">Github</a> 上面获得了 15638 个 stars 和2304 个 forks，是使用最广的开源项目之一。</p>\n<hr>\n<h1 id=\"1-官方描述\"><a href=\"#1-官方描述\" class=\"headerlink\" title=\"1.官方描述\"></a>1.官方描述</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Embedded frameworks require a minimum deployment target of iOS 8 or OS X Mavericks.</span><br><span class=\"line\">To use Alamofire with a project targeting iOS 7, you must include all Swift files located inside the Source directory directly in your project. See the ‘Source File’ section for additional instructions.</span><br></pre></td></tr></table></figure>\n<p>官方文档指出在需要兼容 iOS 7 的项目中一定要包含所有 Alamofire 源文件。</p>\n<h1 id=\"2-添加方法\"><a href=\"#2-添加方法\" class=\"headerlink\" title=\"2.添加方法\"></a>2.添加方法</h1><h2 id=\"1-添加-Alamofire-子模块\"><a href=\"#1-添加-Alamofire-子模块\" class=\"headerlink\" title=\"1.添加 Alamofire 子模块\"></a>1.添加 Alamofire 子模块</h2><p>首先添加 submodule，将 Alamofire 作为当前项目的一个子模块：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加子模块：</span></span><br><span class=\"line\">git submodule add https://github.com/Alamofire/Alamofire.git Alamofire</span><br><span class=\"line\"><span class=\"comment\">#初始化子模块：</span></span><br><span class=\"line\">git submodule init</span><br><span class=\"line\"><span class=\"comment\">#更新子模块：</span></span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-添加源文件到工程\"><a href=\"#2-添加源文件到工程\" class=\"headerlink\" title=\"2.添加源文件到工程\"></a>2.添加源文件到工程</h2><p>将 Alamofire 目录下的 Source 目录中的所有 <code>.swift</code> 文件以引用方式添加到项目中去，如图所示：</p>\n<center><br><img src=\"/images/iOS7-Alamofire-1.png\" alt=\"iOS7-Alamofire-1\"><br></center>\n\n<h1 id=\"3-调用方法\"><a href=\"#3-调用方法\" class=\"headerlink\" title=\"3.调用方法\"></a>3.调用方法</h1><p>直接调用方法即可，不需要通过 <code>Alamofire.</code> 前缀，如图所示：</p>\n<center><br><img src=\"/images/iOS7-Alamofire-2.png\" alt=\"iOS7-Alamofire-2\"><br></center>\n\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/08/14/2015-08-14-iOS7-Alamofire/\">http://www.eyrefree.org/2015/08/14/2015-08-14-iOS7-Alamofire/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Alamofire"]},{"title":"CentOS Git WebHook Coding.net","url":"http://www.eyrefree.org/2015/08/05/WebHook/","content":"<p>利用 Coding.net 项目的 webhook 实现代码 push 后的自动部署。</p>\n<hr>\n<p>大致思路:<br>本地 Push 到 Coding 后调用 WebHook 地址对应的 PHP 脚本，PHP 脚本将刚 Push 的版本 Pull 下来实现自动更新。</p>\n<p>主要步骤:<br>1.CentOS 服务器 Clone 项目；<br>2.编写 PHP 实现调用后 Pull, 这里用 SSH 方式会方便一点；<br>3.PHP 关闭安全模式/开启 sudo /打开某些函数执行权限…巴拉巴拉反正是开放权限使之能够正常 Pull；<br>4.Coding 填写 WebHook 地址为上面写的 PHP，模式设为 Push；<br>5.测试一下，大概好了。</p>\n<hr>\n<p>参考资料:<br><a href=\"http://www.4wei.cn/archives/1001469\" target=\"_blank\" rel=\"noopener\">apache/Nginx下的PHP/Ruby执行sudo权限的系统命令</a><br><a href=\"http://stackoverflow.com/questions/5144039/shell-exec-and-git-pull\" target=\"_blank\" rel=\"noopener\">shell_exec and git pull</a><br><a href=\"http://blog.csdn.net/wuhengwudi/article/details/7454094\" target=\"_blank\" rel=\"noopener\">通过sudo解决php执行linux脚本的权限问题</a><br><a href=\"http://blog.csdn.net/agoago_2009/article/details/8266942\" target=\"_blank\" rel=\"noopener\">PHP 执行 system、exec 等函数发生错误</a><br><a href=\"http://my.oschina.net/u/190107/blog/86519\" target=\"_blank\" rel=\"noopener\">php 执行shell命令的函数</a><br><a href=\"http://blog.csdn.net/hustpzb/article/details/8230454/\" target=\"_blank\" rel=\"noopener\">Git SSH Key 生成步骤</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/08/05/2015-08-05-CentOS-Git%20WebHook-Coding.net/\">http://www.eyrefree.org/2015/08/05/2015-08-05-CentOS-Git%20WebHook-Coding.net/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Git"],"tags":["Nothing"]},{"title":"iOS 设置 Launch Image 启动图片","url":"http://www.eyrefree.org/2015/06/01/iOS-LaunchImage/","content":"<h1 id=\"1、添加图片资源\"><a href=\"#1、添加图片资源\" class=\"headerlink\" title=\"1、添加图片资源\"></a>1、添加图片资源</h1><p>打开工程，进入 <code>Images.xcassets</code>，出现图片资源列表，对列表空白处右击单击，在弹出菜单中选择 <code>New Launch Image</code>，出现 <code>LaunchImage</code> 的空文件夹，按要求添加若干尺寸的 Launch 图片：</p>\n<center><br><img src=\"/images/iOS-LaunchImage-1.jpg\" alt=\"iOS-LaunchImage-1\"><br></center>\n\n<h1 id=\"2、修改工程设置\"><a href=\"#2、修改工程设置\" class=\"headerlink\" title=\"2、修改工程设置\"></a>2、修改工程设置</h1><p>选中工程名，然后在 Targets 中再次选中，接着选择 General，找到 <code>App Icons and Launch Images</code>，将第二项 <code>Launch Image Source</code> 设为第一步中创建的 LaunchImage，将第三项 <code>Launch Screen File</code> 设为空即可。</p>\n<center><br><img src=\"/images/iOS-LaunchImage-2.jpg\" alt=\"iOS-LaunchImage-2\"><br></center>\n\n<p>接下来 Run 一下工程，启动 App 时就可以出现我们上面设置的启动图片啦，😊</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/06/01/2015-06-01-iOS-LaunchImage/\">http://www.eyrefree.org/2015/06/01/2015-06-01-iOS-LaunchImage/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["iOS"],"tags":["Nothing"]},{"title":"WordPress 使用笔记","url":"http://www.eyrefree.org/2015/05/31/WordPress-Notes/","content":"<p>最近在看一些有意思的东西，想要写一些笔记作为记录，时间久了不记得了还可以回头来看看。然后其实本来是用 CSDN 博客的，但是不知道为啥米（正文加了链接？），最近每次修改或者发布都需要审核（不嗨森），然后就想自己搭一个玩一下，嗯，酱紫！</p>\n<p>买了国内某服务器发现需要备案（然后百度了一下发现别人都是备好了案才买服务器的，年少无知，囧），然后备好了案发现域名服务提供商还不提供域名隐私保护（不支持.org的为虾米，不嗨森），好了不管了，反正填的资料真真假假的，233333，开始玩弄 WP 吧。</p>\n<h1 id=\"1、选择主题\"><a href=\"#1、选择主题\" class=\"headerlink\" title=\"1、选择主题\"></a>1、选择主题</h1><p>首先，挑一个好看（或者自认为好看）的主题（什么，你问主题在哪里？外观-&gt;主题-&gt;添加 哟，是不是一下子粗来好多~，嘛，要是没出来好多，或者出来好多边框和标题但是没有看到缩略图的话，您可能需要一个梯子，别问我什么是梯子，我不懂，0_o）。</p>\n<h1 id=\"2、设置用户头像\"><a href=\"#2、设置用户头像\" class=\"headerlink\" title=\"2、设置用户头像\"></a>2、设置用户头像</h1><p>主题换好以后，发现用户头像那里是空的耶（或者是个占位图？总之好蓝看）。默认情况下用户头像是木有的（可能是由于模板的原因？反正我的没有，有的话请跳过本步骤），这时候我们可以使用一个叫 Simple Local Avatar 的插件来实现添加用户头像的功能（插件-&gt;安装插件-&gt;搜索），安装完插件并且开启后就会在 用户-&gt;个人资料 中出现 Avatar 的选项，选择自己喜欢的头像图片上传即可。</p>\n<h1 id=\"3、添加友链\"><a href=\"#3、添加友链\" class=\"headerlink\" title=\"3、添加友链\"></a>3、添加友链</h1><p>嗯，接下来就是把几个中二病的博客链接加到友情链接里面去啦，默认情况下友情链接也是木有的（同上，有的话请跳过本步骤），这时候我们可以使用一个叫 Link Manager 的插件来实现添加友情链接的功能，插件安装完成并且开启后在控制面板（或者叫后台？）的菜单项中会出现 链接 一栏，然后点进去就可以给博客加友链了，是不是很简单！</p>\n<h1 id=\"4、去除-Google-相关引用\"><a href=\"#4、去除-Google-相关引用\" class=\"headerlink\" title=\"4、去除 Google 相关引用\"></a>4、去除 Google 相关引用</h1><p>嗯，针对一般的主题设置上面这些应该已经差不多了，但是，由于 WP 的主题大部分作者是国外的，所以中间可能有些主题使用了谷歌字体或者谷歌地图之类的谷歌 API （很不幸，我使用的这个主题就使用了大量的这类东东，蓝后打开的时候死慢死慢的），简单地看了一下他人的解决办法，有使用 Disable Google Fonts 和 Disable Google Maps 这类插件来解提速的，大家可以试试，反正我用了还是慢得要shi（可能是还有其他 Google 的东东在里面？），然后用了比较原始但有效的方法：将网站整站打包下载然后用 Sublime Text 搜索所有包含 googleapis 的行，然后注释掉它们就可以了（嘛，貌似工作量略大，而且修改的时候要记住编码方式要和原来的文件一样，同时请童鞋们注意：主题升级以后会恢复原样，所以升级主题时请慎重！）</p>\n<center><br><img src=\"/images/WordPress-Notes-1.jpg\" alt=\"WordPress-Notes-1\"><br></center>\n\n<h1 id=\"5、博客提速\"><a href=\"#5、博客提速\" class=\"headerlink\" title=\"5、博客提速\"></a>5、博客提速</h1><p>第4步完成以后，博客的访问速度已经得到了很大程度的提升，如果在此基础上安装一个名为 WP Super Cache 可能（“可能”是什么么鬼…）会使速度进一步提升（关于这个插件的详细信息可以参考<a href=\"http://plugins.wopus.org/best-plugin/242.html\" target=\"_blank\" rel=\"noopener\">WP Super Cache使用全攻略</a>）。</p>\n<h1 id=\"6、添加邮件通知\"><a href=\"#6、添加邮件通知\" class=\"headerlink\" title=\"6、添加邮件通知\"></a>6、添加邮件通知</h1><p>然后 WP 默认是没有开启邮件发送功能的， WP SMTP 这款插件可以帮助我们实现“邮件通知”、“用户注册邮件发送”等一些列与电子邮件服务相关的功能，只需要简单设置邮件服务器等参数即可（关于这个插件的详细信息可以参考<a href=\"http://www.wpdaxue.com/wordpress-smtp-email.html\" target=\"_blank\" rel=\"noopener\">WordPress SMTP发送邮件插件：WP SMTP</a>）。</p>\n<h1 id=\"7、反恶意注册\"><a href=\"#7、反恶意注册\" class=\"headerlink\" title=\"7、反恶意注册\"></a>7、反恶意注册</h1><p>开启了注册功能以后，遇到大量恶意注册，大量用户名是随机字符串的雅虎邮箱申请注册，尝试在注册页面加了验证码，具体方法可以参考<a href=\"http://www.ludou.org/wordpress-ludou-custom-user-register.html\" target=\"_blank\" rel=\"noopener\">WordPress自定义用户注册页面插件</a>、<a href=\"http://www.zhiyanblog.com/wordpress-si-captcha-anti-spam-plugin.html\" target=\"_blank\" rel=\"noopener\">WordPress评论、注册、登录验证码</a>、<a href=\"http://www.diandidao.com/573.html\" target=\"_blank\" rel=\"noopener\">wordpress受到恶意注册，注册登录页面增加验证码</a>，这几款插件都能有效阻止此类恶意行为。</p>\n<center><br><img src=\"/images/WordPress-Notes-2.jpg\" alt=\"WordPress-Notes-2\"><br></center>\n\n<p>未完待续，QAQ</p>\n<hr>\n<p>2016 年 3 月 28 日续：<br>最近用 Hexo 搭建了自己的纯静态博客来代替 WordPress，然后在把原来的博客迁移过来，😌。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/05/31/2015-05-31-WordPress-Notes/\">http://www.eyrefree.org/2015/05/31/2015-05-31-WordPress-Notes/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Blog"],"tags":["WordPress"]},{"title":"Git 常用命令","url":"http://www.eyrefree.org/2015/04/09/Git-Commands/","content":"<p>Git 常用命令备忘</p>\n<hr>\n<h1 id=\"1-获取所有-SubModule\"><a href=\"#1-获取所有-SubModule\" class=\"headerlink\" title=\"1.获取所有 SubModule\"></a>1.获取所有 SubModule</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-删除某个-SubModule\"><a href=\"#2-删除某个-SubModule\" class=\"headerlink\" title=\"2.删除某个 SubModule\"></a>2.删除某个 SubModule</h1><p>例如：xxx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule deinit xxx</span><br><span class=\"line\">git rm xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-添加-Tag\"><a href=\"#3-添加-Tag\" class=\"headerlink\" title=\"3.添加 Tag\"></a>3.添加 Tag</h1><p>例如：2.333</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a 2.333 -m <span class=\"string\">\"2.333 版本的备注信息.\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-上传本地-Tag-到服务器\"><a href=\"#4-上传本地-Tag-到服务器\" class=\"headerlink\" title=\"4.上传本地 Tag 到服务器\"></a>4.上传本地 Tag 到服务器</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-删除本地-Tag\"><a href=\"#5-删除本地-Tag\" class=\"headerlink\" title=\"5.删除本地 Tag\"></a>5.删除本地 Tag</h1><p>例如：2.333</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -d 2.333</span><br></pre></td></tr></table></figure>\n<p>这时可以趁机同时删除远程 Tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/2.333</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-同步本地与远程分支\"><a href=\"#6-同步本地与远程分支\" class=\"headerlink\" title=\"6.同步本地与远程分支\"></a>6.同步本地与远程分支</h1><p>删除远程不存在的本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch --p</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-合并本地的最后两次-Commit\"><a href=\"#7-合并本地的最后两次-Commit\" class=\"headerlink\" title=\"7.合并本地的最后两次 Commit\"></a>7.合并本地的最后两次 Commit</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD^git commit --amend</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-修改上一次的-Commit-信息\"><a href=\"#8-修改上一次的-Commit-信息\" class=\"headerlink\" title=\"8.修改上一次的 Commit 信息\"></a>8.修改上一次的 Commit 信息</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-撤销所有未提交的本地修改\"><a href=\"#9-撤销所有未提交的本地修改\" class=\"headerlink\" title=\"9.撤销所有未提交的本地修改\"></a>9.撤销所有未提交的本地修改</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-删除远程仓库地址\"><a href=\"#10-删除远程仓库地址\" class=\"headerlink\" title=\"10.删除远程仓库地址\"></a>10.删除远程仓库地址</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-添加远程仓库地址\"><a href=\"#11-添加远程仓库地址\" class=\"headerlink\" title=\"11.添加远程仓库地址\"></a>11.添加远程仓库地址</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin https://git.coding.net/eyrefree/xxx.git</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-Push-本地分支到指定远程分支\"><a href=\"#12-Push-本地分支到指定远程分支\" class=\"headerlink\" title=\"12.Push 本地分支到指定远程分支\"></a>12.Push 本地分支到指定远程分支</h1><p>例如：Push 本地当前分支到远程仓库 origin 的 master 分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-设置本地用户名、邮箱\"><a href=\"#13-设置本地用户名、邮箱\" class=\"headerlink\" title=\"13.设置本地用户名、邮箱\"></a>13.设置本地用户名、邮箱</h1><p>例如：设置用户名为 eyrefree，邮箱为 eyrefree@eyrefree.org</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"eyrefree\"</span> git config --global user.email eyrefree@eyrefree.org</span><br></pre></td></tr></table></figure>\n<h1 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h1><p>最后，转载一张觉得挺棒的图片：</p>\n<p><img src=\"/images/git.png\" alt=\"\"></p>\n<hr>\n<p>更多 Git 常用命令可参考：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用 Git 命令清单</a><br>或查阅官方文档：<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git book</a></p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2015/04/09/2015-04-09-Git-Commands/\">http://www.eyrefree.org/2015/04/09/2015-04-09-Git-Commands/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Git"],"tags":["Nothing"]},{"title":"Windows 7 下 QT 5.1.1 for Android 开发环境的搭建与配置","url":"http://www.eyrefree.org/2013/11/08/Windows7-QT-Android/","content":"<p>Qt 是诺基亚开发的一个跨平台的 C++ 图形用户界面应用程序框架，对于一些想要开发 Android 的应用但是又不想学习 Java 的开发人员而言，Qt 是一个很好选择。</p>\n<p>本次使用的操作系统为 Windows 7 64 位，用的是 32 位的安装包，32 位系统没有验证过。  </p>\n<hr>\n<h1 id=\"一、下载安装包\"><a href=\"#一、下载安装包\" class=\"headerlink\" title=\"一、下载安装包\"></a>一、下载安装包</h1><p>首先下载以下安装包，如果提供的链接失效请自行下载：</p>\n<p>（1）Android SDK （Windows 32-bit ADT版）：</p>\n<p>【直接下载】<a href=\"http://dl.google.com/android/adt/adt-bundle-windows-x86-20131030.zip\" target=\"_blank\" rel=\"noopener\">http://dl.google.com/android/adt/adt-bundle-windows-x86-20131030.zip</a></p>\n<p>（2）Android NDK（Windows 32-bit）：</p>\n<p>【直接下载】<a href=\"http://dl.google.com/android/ndk/android-ndk-r9b-windows-x86.zip\" target=\"_blank\" rel=\"noopener\">http://dl.google.com/android/ndk/android-ndk-r9b-windows-x86.zip</a></p>\n<p>（3）Java JDK（Windows 32-bit）：</p>\n<p>【手动下载】<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>\n<p>（4）Apache-Ant：</p>\n<p>【直接下载】<a href=\"http://mirrors.cnnic.cn/apache//ant/binaries/apache-ant-1.9.2-bin.zip\" target=\"_blank\" rel=\"noopener\">http://mirrors.cnnic.cn/apache//ant/binaries/apache-ant-1.9.2-bin.zip</a></p>\n<p>（5）QT 5.1.1 for Android （Windows 32-bit  离线版）：</p>\n<p>【直接下载】<a href=\"http://mirrors.hustunique.com/qt/official_releases/qt/5.1/5.1.1/qt-windows-opensource-5.1.1-android-x86-win32-offline.exe\" target=\"_blank\" rel=\"noopener\">http://mirrors.hustunique.com/qt/official_releases/qt/5.1/5.1.1/qt-windows-opensource-5.1.1-android-x86-win32-offline.exe</a>  </p>\n<h1 id=\"二、安装包的解压与安装\"><a href=\"#二、安装包的解压与安装\" class=\"headerlink\" title=\"二、安装包的解压与安装\"></a>二、安装包的解压与安装</h1><p>接下来解压、安装下载好的各安装包：</p>\n<p>（1）Android SDK：【解压】解压到  D:\\ADT 目录下<br>（2）Android NDK：【解压】解压到 D:\\NDK 目录下<br>（3）Java JDK（Windows 35-bit）：【安装】安装过程中有两次要选择安装路径，注意请根据自己安装的版本自行修改，后面设置环境变量需要用到，这里我第一次填写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\Java\\jdk1.7.0_45</span><br></pre></td></tr></table></figure>\n<p>第二次填写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\Java\\jre7</span><br></pre></td></tr></table></figure>\n<p>（4）Apache-Ant：【解压】解压到 D:\\ANT 目录下<br>（5）QT 5.1.1 for Android（Windows 35-bit 离线版）：【安装】安装到 D:\\QT 目录下  </p>\n<h1 id=\"三、设置环境变量\"><a href=\"#三、设置环境变量\" class=\"headerlink\" title=\"三、设置环境变量\"></a>三、设置环境变量</h1><p>根据第二步中的相关路径，设置系统环境变量：  </p>\n<h2 id=\"1，添加新的环境变量\"><a href=\"#1，添加新的环境变量\" class=\"headerlink\" title=\"1，添加新的环境变量\"></a>1，添加新的环境变量</h2><p>右键单击 我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量中新建以下变量：</p>\n<p>（1）变量名：JAVA_HOME，变量值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\Java\\jdk1.7.0_45</span><br></pre></td></tr></table></figure>\n<p>（2）变量名：CLASSPATH，变量值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar;</span><br></pre></td></tr></table></figure>\n<p>【注意最前面的点号 . 和最后面的分号 ; 不能漏掉】<br>（3）变量名：ANDROID_SDK_HOME，变量值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\ADT\\sdk\\</span><br></pre></td></tr></table></figure>\n<p>（4）变量名：ANT_HOME，变量值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\ANT</span><br></pre></td></tr></table></figure>\n<h2 id=\"2，修改系统变量\"><a href=\"#2，修改系统变量\" class=\"headerlink\" title=\"2，修改系统变量\"></a>2，修改系统变量</h2><p>在系统变量里找到变量 Path ，选择”编辑“，在最后面添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;%ANDROID_SDK_HOME%;</span><br></pre></td></tr></table></figure>\n<p>【注意最后面的分号 ; 不能漏掉】  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-1.jpeg\" alt=\"Windows7-QT-Android-1\"><br></center>\n\n<h1 id=\"四、Qt-Creator-设置\"><a href=\"#四、Qt-Creator-设置\" class=\"headerlink\" title=\"四、Qt Creator 设置\"></a>四、Qt Creator 设置</h1><p>打开Qt Creator，单击 工具 -&gt; 选项，出现选项界面后选择 Android，分别做如下设置：</p>\n<p>（1）Android-SDK的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\ADT\\sdk</span><br></pre></td></tr></table></figure>\n<p>（2）Android NDK的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\NDK</span><br></pre></td></tr></table></figure>\n<p>（3）ANT的路径： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\ANT\\bin\\ant.bat</span><br></pre></td></tr></table></figure>\n<p>（4）JDK location：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\Java\\jdk1.7.0_45</span><br></pre></td></tr></table></figure>\n<center><br><img src=\"/images/Windows7-QT-Android-2.jpeg\" alt=\"Windows7-QT-Android-2\"><br></center>\n\n<h1 id=\"五、添加虚拟机\"><a href=\"#五、添加虚拟机\" class=\"headerlink\" title=\"五、添加虚拟机\"></a>五、添加虚拟机</h1><p>单击 启动Android AVD管理器，出现Android Virtual Device Manager界面，单击 New 创建一个Android虚拟设备。</p>\n<center><br><img src=\"/images/Windows7-QT-Android-3.jpeg\" alt=\"Windows7-QT-Android-3\"><br></center>\n\n<h1 id=\"六、建立测试工程\"><a href=\"#六、建立测试工程\" class=\"headerlink\" title=\"六、建立测试工程\"></a>六、建立测试工程</h1><p>经过以上这些步骤，开发环境基本配置完成，接下来我们建立一个简单的工程来验证配置是否正确：</p>\n<p>（1）重新打开Qt Creator，选择 文件 -&gt; 新建文件或项目，出现项目创建向导，选择 QT Gui 应用：  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-4.jpeg\" alt=\"Windows7-QT-Android-4\"><br></center>\n\n<p>（2）然后下一步，工程路径任选。<br>【但是切记，绝对不要在路径内包含任何空格，这里我使用的是D:\\QT-WorkSpace，否则会出现各种意想不到的编译错误！】<br>（3）然后下一步，选择 Android for arm：  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-5.jpeg\" alt=\"Windows7-QT-Android-5\"><br></center>\n\n<p>（4）后面的信息暂时不需要过多关注，直接下一步即可，直至完成项目创建。  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-6.jpeg\" alt=\"Windows7-QT-Android-6\"><br></center>\n\n<p>（5）项目创建完毕后，右键 项目，选择 构建，若成功则继续下一步，否则请对照上文寻找可能的出错步骤进行相应修改或返回本文开头尝试重新开始配置过程。  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-7.jpeg\" alt=\"Windows7-QT-Android-7\"><br></center>\n\n<p>（6）项目构建成功后，右键<br>项目，选择 运行，Android虚拟设备将会自动打开，启动过程过程较慢，耐心等候。<br>（7）若无意外，将会成功运行该空项目生成的apk，因为这里是个空的项目，什么也没写，所以当然什么也没有，效果如图，表明环境配置成功。  </p>\n<center><br><img src=\"/images/Windows7-QT-Android-8.jpeg\" alt=\"Windows7-QT-Android-8\"><br></center>\n\n<hr>\n<p>到这里就应该已经完成了，接下来可以使用 C++ 动手开始 QT for Android 开发了，😝。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2013/11/08/2013-11-08-Windows7-QT-Android/\">http://www.eyrefree.org/2013/11/08/2013-11-08-Windows7-QT-Android/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Environment"],"tags":["Qt"]},{"title":"MFC 腾讯游戏大厅连连看辅助","url":"http://www.eyrefree.org/2013/03/20/TencentLinkupPlugin-Brief-Introduction/","content":"<p>MFC 腾讯游戏大厅连连看辅助，代码地址：<a href=\"https://github.com/EyreFree/TencentLinkupPlugin\" target=\"_blank\" rel=\"noopener\">https://github.com/EyreFree/TencentLinkupPlugin</a></p>\n<hr>\n<h1 id=\"一，准备工作\"><a href=\"#一，准备工作\" class=\"headerlink\" title=\"一，准备工作\"></a>一，准备工作</h1><p>首先，下载并安装 QQ 游戏大厅，同时事先编译好本辅助程序，生成可执行文件。</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-1.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-1\"><br></center>\n\n<h1 id=\"二，打开本程序\"><a href=\"#二，打开本程序\" class=\"headerlink\" title=\"二，打开本程序\"></a>二，打开本程序</h1><p>打开本程序 Lianliankan.exe。</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-2.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-2\"><br></center>\n\n<h1 id=\"三，打开连连看\"><a href=\"#三，打开连连看\" class=\"headerlink\" title=\"三，打开连连看\"></a>三，打开连连看</h1><p>登录游戏大厅，打开连连看游戏.</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-3.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-3\"><br></center>\n\n<h1 id=\"四，进入游戏\"><a href=\"#四，进入游戏\" class=\"headerlink\" title=\"四，进入游戏\"></a>四，进入游戏</h1><p>选好游戏区，然后点击”快速加入游戏”选号座位，然后点击开始游戏。</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-4.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-4\"><br></center>\n\n<p>进入游戏页面后，切换到本辅助程序 Lianliankan.exe 点击”开始”按钮，会开始进行自动消除操作（并不是自动匹配，而是遍历所有可连接方式进行暴力消除）。</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-5.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-5\"><br></center>\n\n<p>需要注意的是，当游戏结束后要及时按“暂停”按钮，因为该辅助程序无法识别游戏结束，所以不及时暂停可能会由于持续大量发送鼠标点击消息造成连连看程序假死。</p>\n<center><br><img src=\"/images/TencentLinkupPlugin-Brief-Introduction-6.jpg\" alt=\"TencentLinkupPlugin-Brief-Introduction-6\"><br></center>\n\n\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2013/03/20/2013-03-20-TencentLinkupPlugin-Brief-Introduction/\">http://www.eyrefree.org/2013/03/20/2013-03-20-TencentLinkupPlugin-Brief-Introduction/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["MFC"],"tags":["Game"]},{"title":"荏苒。","url":"http://www.eyrefree.org/2011/11/11/Sing-A-Song/","content":"<p>纽扣第一颗就扣错了，可你扣到最后一颗才发现。有些事一开始就是错的，可只有到最后才不得不承认。</p>\n<p>要想获得百倍的回报，必须付出千倍的汗水。</p>\n<p>想干事的人永远在找方法，不想干事的人永远在找理由。</p>\n<p>如果你昨天的成绩了不起，说明你今天做得还不够好。</p>\n<p>人就这么一辈子，开心也是一天，不开心也是一天，所以你一定要开心。<br>人就这么一辈子，做错事不可以重来；碎了的心难再愈合，所以你一定不能事后后悔。<br>人就这么一辈子，过了今天就不会再有另一个今天；一分一秒都不会再回头，所以你一定要珍惜每分每秒。<br>告诉自己：要微笑面着对任何挫折。</p>\n<p>就生物界来说，生存是个几率，每一分钟都可能出现意外；挫折应该是常态，顺利才是例外。</p>\n<p>与其诅咒黑暗，不如燃起蜡烛。没有人能给你光明，除了你自己。</p>\n<p>理想就像内裤，要有，但不能逢人就去证明你有。</p>\n<p>决定我们一生的，有时不是我们的能力，而是我们的选择。</p>\n<p>最困难的选择无非只有两个选项：你敢，或不敢。</p>\n<p>每个人都有底线，我不说不代表我没有。</p>\n<p>最先道歉的人最勇敢；最先原谅的人最坚强；最先释怀的人最幸福。</p>\n<p>他们说网络很假，我笑了，说得好像现实很真一样。</p>\n<p>人的眼睛有5.76亿像素但却终究看不懂人心，说的真心好。</p>\n<p>这个世界，看你笑话的人，永远比在乎你的多。</p>\n<p>可以相信别人，但不可以指望别人；不要拒绝善意，不要停止微笑；错误可以犯，但不可以重复犯；批评一定要接受，侮辱绝对不能接受。</p>\n<p>该说的要说，该哑的要哑，是一种聪明；该干的要干，该退的要退，是一种睿智；该显的要显，该藏的要藏，是一种境界。</p>\n<p>你再优秀也会有人对你不屑一顾，你再不堪也会有人把你视若生命。所以，牛逼时不要得瑟，落魄时不要堕落。</p>\n<p>你现在的生活状态是你曾经努力或者堕落的结果，你现在努力或者堕落将决定你将来的生活质量。</p>\n<p>我们可以转身，但是不必回头，即使有一天，发现自己错了，转身大步朝著对的方向去，而不是一直回头怨自己错了。</p>\n<p>嗯，很好，等忙完这一阵，就可以……忙下一阵了。</p>\n<p>如果我的玩笑刺痛了你，很对不起，我以为我们很熟。</p>\n<p>你想过普通的生活，就会遇到普通的挫折。你想过最好的生活，就一定会遇到最强的伤害。这世界很公平，你想要最好，就一定会给你最痛。能闯过去，你就是赢家，闯不过去，那就乖乖退回去做个普通人吧……所谓成功，并不是看你有多聪明，也不是要你出卖自己，而是看你能否笑着渡过难关。</p>\n<p>看懂一件事，长大了。看清一件事，开窍了。看破一件事，理性了。看透一件事，成熟了。看穿一件事，到头了。看淡一件事，放下了。</p>\n<p>太在意别人的看法会有这样两种结局：要么自己累死，要么让别人整死。</p>\n<p>不要等到什么都准备好了才开始行动，在游泳时学会游泳，在开车时学会开车，前提是你输得起。</p>\n<p>这个世界上所有的东西都是需要交换的，得到得到的，失去失去的，从来如此公平。</p>\n<p>没伞的孩子，要拼命的向前奔跑。</p>\n<p>真正的自由不是想做什么就做什么，而是不想做什么就可以不做什么。</p>\n<p>“如果你给我的和你给别人的是一样的，那我就不要了。”</p>\n<p>如果有一天，你发觉日子特别的艰难，那可能是这次的收获将特别的巨大。</p>\n<p>时间在变，人也在变，有些事，不管我们如何努力，回不去就是回不去了。</p>\n<p>如果有一天，你开始后悔放弃我，请记得，我从未想用离开的方式教会你如何去珍惜。</p>\n<p>没占下风，先放弃，然后就输了。没试过，先胆怯，然后就败了。没有拥有过，先说不要，然后就错过了。没争取过，先回避，然后就再也没有了。青春是挺胸抬头无所畏惧，即使言不由衷也不想低头。</p>\n<p>一个人的成熟，在思想里。一个人的天真，在眼神里。成熟是种生活态度，天真是种生活方式。</p>\n<p>可爱什么的不需要，重要的是有能力。</p>\n<p>生活总是这样，不能叫人处处都满意。但是世界是本就没有完美，我们还要热情地活下去，活的比你想象的美丽。人活一生，值得爱的东西很多，不要因为一个不满意，就灰心。</p>\n<p>生活时常和我们开着玩笑，你期待什么，什么就会离你越远；你执着谁，就会被谁伤害得最深。所以，做事不必太期待，坚持不必太执着；要学会放下，放下不切实际的期待，放下没有结果的执着。所以，凡事要看淡一些，看开一些，看透一些，什么都在失去，什么都留不住，唯有当下的快乐与幸福。人生从未有过永远，只有失散。</p>\n<p>我不问，你不说，这就是距离；我问了，你不说，这就是隔阂；我问了，你说了，这就是信任；你不说，我不问，这就是默契；我不问，你说了，这就是依赖。</p>\n<p>人生是一场负重的狂奔，需要不停地在每一个岔路口做出选择。而每一个选择，都将通往另一条截然不同的命运之路。</p>\n<p>幸福不是别人能给予的，是要靠自己去争取。</p>\n<p>只要是阳光能照到的土地，都会有阴影的。</p>\n<p>原来他一直抬头望天，是为了忍住眼中的泪。</p>\n<p>和平是什么？是一个失衡到另一个失衡之间、短暂维持的脆弱平衡。</p>\n<p>有时候，上天没有给你想要的，不是因为你不配，而是你值得拥有更好的。</p>\n<p>每个人的性格中，都有某些无法让人接受的部分，再美好的人也一样。所以不要苛求别人，也不要埋怨自己。</p>\n<p>只要你奔跑，这个世界就会跟着你奔跑，只要你停驻，这个世界就会舍弃你独自奔跑。唯有你确定一个方向，使劲的跑起来，这个世界会为你而让路，你需要动起来，让风都在你背后。</p>\n<p>不要以为一天到晚笑嘻嘻或者沉默寡言的人好惹，当你撕开他的面具你会连跪下机会都没有。</p>\n<p>某天，你开始怀疑自己曾经坚信的东西。不必迷茫，也许这是成熟。从某种意义上说，成熟是可悲的，那是一路抛弃＂自己＂的过程。世俗总会想方设法把众人变成统一模本，因此才便于管理。成熟帮你得到了很多东西，唯独放弃了自由做自己的权利。所谓成功，就是用最昂贵的，换走了你最珍贵的。</p>\n<p>Nothing is too small to know, and nothing is too big to attempt.<br>没有事情是小到不值得知道的，也没有什么事情会大到无法尝试。</p>\n<p>不要轻言你是在为谁付出和牺牲，其实所有的付出和牺牲，最终的受益人都是自己。人生就是独自的修行，这是一条悲欣交集的道路，路的尽头一定有礼物，就看你配不配得到。</p>\n<p>每个人在成长中都会受到很多伤，会哭泣，会悲伤，会觉得疼痛。而疼过之后，你就是一个全新的自己了。你疼过，便懂得了；你跨越过，便成熟了；你总是要失去了什么，才学会珍惜什么；你总是要碰了壁，才会学会改变什么，放弃什么。而这些，都是你的财富。</p>\n<p>如果你觉得我哪里不对，请一定要告诉我，反正我也不会改，你别再憋出个好歹来。</p>\n<p>不要去看远方模糊的，做手边清楚的事。世上最重要的事，不在于我们处于什么位置，而在于我们向什么方向移动。</p>\n<p>该来的始终会来，千万别太着急，如果你失去了耐心，就会失去更多。该走过的路总是要走过的，从来不要认为你走错了路，哪怕最后转了一个大弯。这条路上你看到的风景总是特属于你自己的，没有人能夺走它。</p>\n<p>永远不要以自己认定的道德标准要求他人，学会理解最奇怪的事物，学会欣赏与自己距离最远的处世风格。每个人的价值评判标准不一，我们与他人总有差异存在。其实任何时候努力让自己在人前表现完美，那种面面俱到的风格也会使自己很辛苦，所以笑视和淡然那些不完美。</p>\n<p>懂得自嘲的人，是极聪明的人。他用贬低自己的方式，来保护自己。其实没人真正愿意承认自己不如别人，于是才有一种腹黑，是用尽各种极致的赞美，来为一个人树敌。做人的成功，不是你在时，别人如何赞美你。而是你离开后，别人是否还能想起你。</p>\n<p>所谓的成功并不是要你比所有的人都强，你只需要强过自己的对手或同行，就足够能显示你的价值。 在通往成功的道路上，只有努力拼搏的人才能够弥补自己的不足，超越平庸，取得最后的胜利。</p>\n<p>有些事情，现在不去做，那以后很有可能永远也做不了。不是没时间，是因为有时间，你才会一拖再拖，放心让它们搁在那里，铺上厚厚的灰尘。而你终将遗忘曾经想要做的事、想要抓住的人。时间久能生情，时间久了也许会淡漠；只要时间足够长，那必将人心看破。</p>\n<p>One is never as unhappy as one thinks, nor as happy as one hopes.<br>一个人永远不会像他想象的那样不幸，也不会像他希望的那样幸福。</p>\n<p>任何问题，一旦被提出来，答案就已经摆在那里了。我们之所以还要到处去问，只是因为，我们不喜欢那个答案罢了。</p>\n<p>当有一天，你发现你的情绪不能用语言说出来，而宁愿让自己渐渐消失在深夜亮着华丽街灯的街道上，这就是孤独。</p>\n<p>如果你等到每件事都确定是对的才去做，那你也许永远都成不了什么事。</p>\n<p>我们都是在快毕业的时候才爱上学校的。我们都是在快结束时才想要好好开始的。</p>\n<p>你所浪费的今天，是昨天死去的人所奢望的明天；你所厌恶的现在，是未来的你回不去的曾经。</p>\n<p>快乐的人都记性不好。</p>\n<p>当坚持之苦大过放弃之痛，就是该放手的时候了。</p>\n<p>别让那些不重要的事来影响你，从而让你失去那些真正重要的东西。</p>\n<p>有时候，你需要出去走一走，呼吸一下新鲜空气，然后提醒自己，你是谁，想成为什么样的人。</p>\n<p>失去人性，失去很多；失去兽性，失去一切。</p>\n<p>你花六块八买个便当吃，觉得很节省，有人在路边买了七毛钱馒头吞咽后步履匆匆；你八点起床看书，觉得很勤奋，上微博发现曾经的同学八点就已经在面对繁重的工作；你周六补个课，觉得很累，打个电话才知道许多朋友都连续加班了一个月。亲爱的，你真的还不够苦，不够勤奋和努力。早安，继续努力！</p>\n<p>最佳的报复不是仇恨，而是打心底发出的冷淡，干嘛花力气去恨一个不相干的人。</p>\n<p>你失败过很多次，虽然你可能不记得：你第一次尝试走路，你摔倒了；你第一次张嘴说话，你说错了；你第一次投篮，你没有投进…不要担心失败，你需要担心的是如果你畏惧失败，你将丧失机会。</p>\n<p>当你是地平线上的一棵小草的时候，你有什么理由要求别人在遥远的地方就看见你？当你想要别人注意的时候，你就必须变成地平线上的一棵大树。你的心灵如果是草的种子，你就永远是一棵被人践踏的小草。如果你的心灵是一棵树的种子，你早晚有一天会长成参天大树。</p>\n<p>这世界除了心理上的失败，实际上并不存在什么失败，只要不是一败涂地，你一定会取得胜利。</p>\n<p>每个人都会心情不好，只是有些人比别人更会隐藏而已。</p>\n<p>不是所有人都是真心；不是所有人都值得你付出；不是所有人都会背叛；不是眼泪就能挽回失去的；不是乞求就可以得到；不是伤心就一定要哭泣；不是善良就可以受到庇佑；不是所有表情都要写在脸上；不是所有说爱你的人都爱你；不是任何人都理解你。</p>\n<p>不要向任何人解释你自己。爱你的人不介意，恨你的人不会信。</p>\n<p>现在的生活并不是我想要的，但确实是我自找的，所以活该，我认了。</p>\n<p>No pain, no palm; no thorns, no throne ; no gall, no glory; no cross, no crown.<br>没有播种，何来收获；没有辛劳，何来成功；没有磨难，何来荣耀；没有挫折，何来辉煌。</p>\n<p>我倒是不在乎万箭穿心，就是别让我知道，里面有一支，是你放的。</p>\n<p>Brave do yourself, don’t change for anyone. If they cannot accept the worst you, also do not deserve the best you.<br>勇敢的做自己，不要为任何人而改变。如果他们不能接受最差的你，也不配拥有最好的你。</p>\n<p>我是一个很有原则的人，我的原则只有三个字：看心情。</p>\n<p>当别人认定了你是错的，就算你冷静地解释了也会越描越黑，还会被认为是在狡辩。不解释却只能吃哑巴亏，会被解读为心虚。如果你为此生气发飙了，那就更加不得了，再有理也会变成错。当别人对你万般地误会，你只能暂且默默忍受。只要做好自己的本分，用实力证明自己，时间会为你说话。</p>\n<p>最有效的自省，就是在自己的伤口上狠狠补一刀。</p>\n<p>生活就要像疯子一样地过，才能忘记生命带给我们的颠簸。</p>\n<p>犯错误是无可非议的，只要能及时觉察并纠正就好，谨小慎微的科学家既犯不了错误，也不会有所发现。宁愿跑起来被拌倒无数次，也不要规规矩矩走一辈子。</p>\n<p>美好这东西，美就美在它的偶然性和不可预见性，就好像电台突然播了一首你以前很喜欢却已很久不听的老歌，亦或你只是出门去倒个垃圾，却捡回了一辈子的爱人。</p>\n<p>当我买得起巧克力的时候，我已经不再天天想吃了。当我可以随便玩电脑而没人管的时候，我已经懒得打开电脑了。当我优秀地足够让你不会离我而去时，我已经不再非你莫属了。</p>\n<p>在你不害怕的时间去斗牛，这不算什么；在你害怕时不去斗牛，也没有什么了不起；只有在你害怕时还去斗牛才是真正了不起。再长的路，一步步也能走完，再短的路，不迈开双脚也无法到达。</p>\n<p>每一个挫折都是为了迎接一个更好的未来。只要岁月静好，身体无恙，一切都不可怕。</p>\n<p>“他们急于成长，然后又哀叹失去的童年；他们以健康换取金钱，不久后又想用金钱恢复健康。他们对未来焦虑不已，却又无视现在的幸福。因此，他们既不活在当下，也不活在未来。他们活着仿佛从来不会死亡；临死前，又仿佛他们从未活过。” —————人类的奇怪之处</p>\n<p>我从不曾停下脚步，因为身体和灵魂总要有个在路上。</p>\n<p>只要一个人还有追求，他就没有老。直到后悔取代了梦想，一个人才算老。</p>\n<p>没什么是过不去的，总有一天我们能长成自己希望变成的那个人。</p>\n<p>只要是喜剧收尾，过程你让我怎么哭都行。</p>\n<p>不保留的，才叫青春。不解释的，才叫从容。不放手的，才叫真爱。不完美的，才叫人生。</p>\n<p>感到微不足道时，那就想想自己的目标。觉得自以为是时，那就试试自己能否呼风唤雨。</p>\n<p>嫉妒一个人，就是承认 ta 比你强。</p>\n<p>梦想是一个说出来就矫情的东西，它就像是生在暗地里的一颗种子，只有破土而出，拔节而长，终有一日开出花来，才能正大光明的让所有人都知道。在此之前，除了坚持，别无选择。</p>\n<p>你的努力，别人不一定放在眼里；你不努力，别人一定放在心里。</p>\n<p>学历代表过去，财力代表现在，能力代表将来。所见所闻改变一生，不知不觉会断送一世。没有目标的人永远为有目标的人去努力；没有危机是最大的危机，满足现状是最大的陷讲。</p>\n<p>很多事情，我并不是不知道、不在意，只是不想斤斤计较，不想戳穿你。那么请你在骗我的同时，也请注意点分寸。</p>\n<p>不要轻易去依赖一个人，它会成为你的习惯，当分别来临，你失去的不是某个人，而是你精神的支柱。无论何时何地，都要学会独立行走，它会让你走得更坦然些。</p>\n<p>真正的强者，不是没有眼泪的人，而是含着眼泪奔跑的人。</p>\n<p>很多人都说：我不知道我自己想要什么。其实这句话的真正含义是：我没有勇气面对和足够的努力去争取我想要的。</p>\n<p>有人侮辱你的时候,要记得狮子不会因为听到狗吠而回头。</p>\n<p>猫喜欢吃鱼，可猫不会游泳。鱼喜欢吃蚯蚓，可鱼又不能上岸。上帝给了你很多诱惑，却不会让你轻易得到。总不能流血就喊痛，怕黑就开灯，想念就联系，疲惫就放空，被孤立就讨好，脆弱就想家。不要被现实蒙蔽双眼，不要事事总都想依靠。人，终究是要长大，最漆黑的那段路终需自己走完。</p>\n<p>并不是每一份努力都会得到回报，并不是每一次坚持都有人看到，并不是每一点付出都能得到公正待遇，并不是每一个善意都能被理解————这就是人生。很多时候，我们需要一点耐心、勇气。</p>\n<p>将你击垮的不是压力，而是你承受压力的方式。</p>\n<p>不要太在乎自己的长相，因为能力不会写在脸上。</p>\n<p>There is only one thing that makes a dream impossible to achieve: the fear of failure.<br>世界上只有一样东西可以阻止梦想实现,那就是：对失败的恐惧。</p>\n<p>每当你想放弃的时候，想一想是什么支撑着你一路坚持。世上没有偶然，有的只是必然。因为有许多事不完美，所以我们才追求完美；因为有许多时候不快乐，所以 我们才渴望快乐。生活，原本就是完美与缺憾的交响；人生，原本也就是痛苦和快乐的和声，输掉什么，你都是不可以输掉微笑。</p>\n<p>你之所以会迷茫，是因为你想的太多，而做的太少。</p>\n<p>人生总是结束于寻找出路的过程中。</p>\n<p>人跟猪的区别，就在于一样懒，但是没办法像猪一样，懒得心安理得。</p>\n<p>最怕你一生碌碌无为，还安慰自己平凡可贵。</p>\n<p>当你变得足够强大，就不会在意曾经付出过多少代价。</p>\n<p>如果我们之间有 1000 步的距离，你只要跨出第 1 步，我就会朝你的方向走其余的 999 步。</p>\n<p>通常愿意留下来跟你争吵的人，才是真正爱你的人。</p>\n<p>付出真心，才会得到真心，却也可能伤得彻底，保持距离，就能保护自己，却也注定永远寂寞。</p>\n<p>有时候，不是对方不在乎你，而是你把对方看得太重。</p>\n<p>朋友就是把你看透了，还能喜欢你的人。</p>\n<p>真正的好朋友并不是在一起就有聊不完的话题 而是在一起，就算不说话，也不会感到尴尬。</p>\n<p>没有一百分的另一半，只有五十分的两个人。</p>\n<p>为你的难过而快乐的，是敌人；<br>为你的快乐而快乐的，是朋友；<br>为你的难过而难过的， 就是那些该放进心里的人。</p>\n<p>我以为我能逗你笑你就会喜欢上我，但是我居然输给了让你哭的人。</p>\n<p>五岁的时候，你可以只为捕捉一只蝴蝶，而跑到一公里外的田野；<br>十岁的时候，你可以只为一个冰淇凌，跑遍大街小巷的商店；<br>二十岁的时候，你可以为喜欢的人，一个人去陌生的城市；<br>二十七岁的时候，你可以只为了生活，而随便就找个人，过一辈子。<br>你说，你越来越懒了，懒得去爱，也懒得被爱。</p>\n<p>假如这个世界非常舒服，天堂便不会被认为是最高的理想。</p>\n<p>成熟是一种明亮而不刺眼的光辉，一种圆润而不腻耳的音响，一种不需要对别人察颜观色的从容，一种终于停止了向周围申诉求告的大气，一种不理会哄闹的微笑，一种洗刷了偏激的淡漠，一种无须声张的厚实，一种并不陡峭的高度。</p>\n<p>只要活着，就一定能遇到好吃的。</p>\n<p>What it lies in our power to do, it lies in our power not to do.<br>我们能有所为，亦能有所不为。</p>\n<p>高兴的时候不做承诺，愤怒的时候不做决定。</p>\n<p>未来不迎，既过不恋，当时不杂。</p>\n<p>梦想般的人生就是：一直在做梦想中的事情。</p>\n<p>It’s hard to have ideas and easy to give up.<br>思考是件很难的事，放弃却很简单。</p>\n<p>当他回首往事的时候，不因虚度年华而悔恨，也不因碌碌无为而羞耻。</p>\n<p>一个人越成长越觉得很多东西不必看得太重，比如外界对你的期望，比如无关紧要的人对你喜欢与否。过分看重就会让你迷失自我，仅仅是活出了他人帮你定义的成功。为了讨好别人，踮着脚尖改来改去。一路走下来，才明白真正的魅力不是你应该变成谁，而是你本身是谁。</p>\n<p>如果无能为力，那就顺其自然。</p>\n<p>“何谓王道？”<br>“对手不乖，便从他身上碾过。”<br>“何谓霸道？”<br>“乖的，也碾过。”<br>“………何谓孔孟之道？”<br>“碾之前先跟他说一声。”</p>\n<p>江河都往海里流，海却不满。</p>\n<p>小孩才分对错，大人只谈利弊。</p>\n<p>只要目的正当，可以不择手段。</p>\n<p>你没有必要让所有的人都满意，只需让你在乎的人满意就行了。</p>\n<p>如果有一天小丑哭了，你会不会觉得他是在搞笑？</p>\n<p>人都是被自己打败的，而且首先给自己的情绪打败。控制不了自己情绪的人，别人的一个字、一句话，你就可以失眠一整晚。</p>\n<p>她那时候还太年轻，不知道所有命运赠送的礼物，早已在暗中标好了价格。</p>\n<p>人的一生有五件事：<br>一，争取自己的权利，实现自己的价值；<br>二，照顾好自己的家人；<br>三，帮助善良的人；<br>四，为自己的种群和同类发出声音；<br>五，为自己的民族和国家奋斗。<br>任何颠倒以上次序的人，都不值得信任。</p>\n<p>这世上所有的不公平都是因为当事人能力的不足。</p>\n<p>他不停的跑啊跑，为的只是追上那个被寄予厚望的自己。</p>\n<p>This is the way the world ends, Not with a bang but a whimper.<br>世界是这样结束的，不是砰的巨响，而是一声抽泣。</p>\n<p>▕┃</p>\n<hr>\n<p>荏苒：摘抄本，励志歌。</p>\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2011/11/11/2011-11-11-Sing-A-Song/\">http://www.eyrefree.org/2011/11/11/2011-11-11-Sing-A-Song/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Ease"],"tags":["Nothing"]},{"title":"Hello World","url":"http://www.eyrefree.org/2011/10/24/Hello-World/","content":"<center><br><img src=\"/images/Hello-World-1.jpg\" alt=\"Hello-World-1\"><br></center>\n\n<hr>\n<p>本文链接：<a href=\"http://www.eyrefree.org/2011/10/24/2011-10-24-Hello-World/\">http://www.eyrefree.org/2011/10/24/2011-10-24-Hello-World/</a></p>\n<p>如文中无特殊说明，本站均使用以下协议保护：<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/cn/\" target=\"_blank\" rel=\"noopener\">署名-非商业性使用-禁止演绎</a></p>\n","categories":["Ease"],"tags":["Nothing"]},{"title":"about","url":"http://www.eyrefree.org/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://www.eyrefree.org/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://www.eyrefree.org/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://www.eyrefree.org/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://www.eyrefree.org/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://www.eyrefree.org/tag/index.html","content":"","categories":[],"tags":[]}]